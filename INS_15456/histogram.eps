%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: histogram(1).pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: Lavender
%%CreationDate: 2020/2/19, 0:08:50
%%BoundingBox: 0 0 402 391
%%HiResBoundingBox: 0 0 401.2581 390.1245
%%CropBox: 0 0 401.2581 390.1245
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 636 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-02-18T16:05:35Z"
   xmp:CreatorTool="matplotlib 3.1.1, http://matplotlib.org"
   xmp:ModifyDate="2020-02-18T16:05:35Z"
   pdf:Producer="macOS 版本 10.14.1（版号 18B75） Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -390.124 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 390.124 li
401.258 390.124 li
401.258 0 li
cp
clp
-20.2371 397.56 mo
440.563 397.56 li
440.563 -4.19952 li
-20.2371 -4.19952 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40958 li
37.3629 4.40958 li
cp
f
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
53.5957 85.4791 mo
61.1021 85.4791 li
61.1021 9.90439 li
53.5957 9.90439 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
53.5957 85.4791 mo
61.1021 85.4791 li
61.1021 9.90439 li
53.5957 9.90439 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
81.7449 85.4791 mo
89.2513 85.4791 li
89.2513 10.8685 li
81.7449 10.8685 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
81.7449 85.4791 mo
89.2513 85.4791 li
89.2513 10.8685 li
81.7449 10.8685 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
109.894 85.4791 mo
117.401 85.4791 li
117.401 13.0208 li
109.894 13.0208 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
109.894 85.4791 mo
117.401 85.4791 li
117.401 13.0208 li
109.894 13.0208 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
138.043 85.4791 mo
145.55 85.4791 li
145.55 10.4394 li
138.043 10.4394 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
138.043 85.4791 mo
145.55 85.4791 li
145.55 10.4394 li
138.043 10.4394 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
166.193 85.4791 mo
173.699 85.4791 li
173.699 15.7731 li
166.193 15.7731 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
166.193 85.4791 mo
173.699 85.4791 li
173.699 15.7731 li
166.193 15.7731 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
194.342 85.4791 mo
201.848 85.4791 li
201.848 8.56699 li
194.342 8.56699 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
194.342 85.4791 mo
201.848 85.4791 li
201.848 8.56699 li
194.342 8.56699 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
222.491 85.4791 mo
229.998 85.4791 li
229.998 11.2311 li
222.491 11.2311 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
222.491 85.4791 mo
229.998 85.4791 li
229.998 11.2311 li
222.491 11.2311 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
250.64 85.4791 mo
258.147 85.4791 li
258.147 30.595 li
250.64 30.595 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
250.64 85.4791 mo
258.147 85.4791 li
258.147 30.595 li
250.64 30.595 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
278.79 85.4791 mo
286.296 85.4791 li
286.296 8.55148 li
278.79 8.55148 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
278.79 85.4791 mo
286.296 85.4791 li
286.296 8.55148 li
278.79 8.55148 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
306.939 85.4791 mo
314.445 85.4791 li
314.445 8.27008 li
306.939 8.27008 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
306.939 85.4791 mo
314.445 85.4791 li
314.445 8.27008 li
306.939 8.27008 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
335.088 85.4791 mo
342.595 85.4791 li
342.595 8.70459 li
335.088 8.70459 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
335.088 85.4791 mo
342.595 85.4791 li
342.595 8.70459 li
335.088 8.70459 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
363.237 85.4791 mo
370.744 85.4791 li
370.744 17.1322 li
363.237 17.1322 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
363.237 85.4791 mo
370.744 85.4791 li
370.744 17.1322 li
363.237 17.1322 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
61.1021 85.4791 mo
68.6086 85.4791 li
68.6086 10.7834 li
61.1021 10.7834 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
61.1021 85.4791 mo
68.6086 85.4791 li
68.6086 10.7834 li
61.1021 10.7834 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
89.2513 85.4791 mo
96.7578 85.4791 li
96.7578 9.1507 li
89.2513 9.1507 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
89.2513 85.4791 mo
96.7578 85.4791 li
96.7578 9.1507 li
89.2513 9.1507 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
117.401 85.4791 mo
124.907 85.4791 li
124.907 12.5685 li
117.401 12.5685 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
117.401 85.4791 mo
124.907 85.4791 li
124.907 12.5685 li
117.401 12.5685 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
145.55 85.4791 mo
153.056 85.4791 li
153.056 11.7274 li
145.55 11.7274 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
145.55 85.4791 mo
153.056 85.4791 li
153.056 11.7274 li
145.55 11.7274 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
173.699 85.4791 mo
181.206 85.4791 li
181.206 24.8848 li
173.699 24.8848 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
173.699 85.4791 mo
181.206 85.4791 li
181.206 24.8848 li
173.699 24.8848 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
201.848 85.4791 mo
209.355 85.4791 li
209.355 10.41 li
201.848 10.41 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
201.848 85.4791 mo
209.355 85.4791 li
209.355 10.41 li
201.848 10.41 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
229.998 85.4791 mo
237.504 85.4791 li
237.504 9.77377 li
229.998 9.77377 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
229.998 85.4791 mo
237.504 85.4791 li
237.504 9.77377 li
229.998 9.77377 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
258.147 85.4791 mo
265.653 85.4791 li
265.653 37.6271 li
258.147 37.6271 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.147 85.4791 mo
265.653 85.4791 li
265.653 37.6271 li
258.147 37.6271 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
286.296 85.4791 mo
293.803 85.4791 li
293.803 8.54999 li
286.296 8.54999 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
286.296 85.4791 mo
293.803 85.4791 li
293.803 8.54999 li
286.296 8.54999 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
314.445 85.4791 mo
321.952 85.4791 li
321.952 10.0281 li
314.445 10.0281 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
314.445 85.4791 mo
321.952 85.4791 li
321.952 10.0281 li
314.445 10.0281 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
342.595 85.4791 mo
350.101 85.4791 li
350.101 8.96588 li
342.595 8.96588 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
342.595 85.4791 mo
350.101 85.4791 li
350.101 8.96588 li
342.595 8.96588 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 85.4791 mo
394.483 85.4791 li
394.483 4.40967 li
37.3629 4.40967 li
cp
clp
370.744 85.4791 mo
378.25 85.4791 li
378.25 20.2996 li
370.744 20.2996 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
370.744 85.4791 mo
378.25 85.4791 li
378.25 20.2996 li
370.744 20.2996 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
-20.2371 397.56 mo
440.563 397.56 li
440.563 -4.19952 li
-20.2371 -4.19952 li
cp
clp
64.8554 85.4791 mo
64.8554 88.9791 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.8554 85.4791 mo
64.8554 88.9791 li
@
64.8557 93.4328 mo
64.3457 93.4328 63.9657 93.6828 63.7057 94.1828 cv
63.4457 94.6828 63.3257 95.4328 63.3257 96.4328 cv
63.3257 97.4328 63.4457 98.1828 63.7057 98.6828 cv
63.9657 99.1828 64.3457 99.4328 64.8557 99.4328 cv
65.3657 99.4328 65.7457 99.1828 66.0057 98.6828 cv
66.2557 98.1828 66.3857 97.4328 66.3857 96.4328 cv
66.3857 95.4328 66.2557 94.6828 66.0057 94.1828 cv
65.7457 93.6828 65.3657 93.4328 64.8557 93.4328 cv
64.8557 92.6528 mo
65.6657 92.6528 66.2857 92.9828 66.7257 93.6228 cv
67.1557 94.2728 67.3757 95.2128 67.3757 96.4328 cv
67.3757 97.6628 67.1557 98.6028 66.7257 99.2428 cv
66.2857 99.8828 65.6657 100.203 64.8557 100.203 cv
64.0357 100.203 63.4057 99.8828 62.9757 99.2428 cv
62.5457 98.6028 62.3357 97.6628 62.3357 96.4328 cv
62.3357 95.2128 62.5457 94.2728 62.9757 93.6228 cv
63.4057 92.9828 64.0357 92.6528 64.8557 92.6528 cv
f
93.0046 85.4791 mo
93.0046 88.9791 li
f
93.0046 85.4791 mo
93.0046 88.9791 li
@
91.0649 99.2428 mo
92.6749 99.2428 li
92.6749 93.6828 li
90.9249 94.0328 li
90.9249 93.1328 li
92.6649 92.7828 li
93.6549 92.7828 li
93.6549 99.2428 li
95.2649 99.2428 li
95.2649 100.073 li
91.0649 100.073 li
91.0649 99.2428 li
f
121.154 85.4791 mo
121.154 88.9791 li
f
121.154 85.4791 mo
121.154 88.9791 li
@
119.894 99.2428 mo
123.334 99.2428 li
123.334 100.073 li
118.704 100.073 li
118.704 99.2428 li
119.074 98.8628 119.584 98.3428 120.234 97.6828 cv
120.874 97.0328 121.284 96.6128 121.454 96.4228 cv
121.774 96.0728 121.994 95.7728 122.114 95.5228 cv
122.234 95.2828 122.304 95.0328 122.304 94.7928 cv
122.304 94.4128 122.164 94.0928 121.894 93.8528 cv
121.624 93.6128 121.274 93.4828 120.834 93.4828 cv
120.524 93.4828 120.194 93.5428 119.854 93.6428 cv
119.514 93.7528 119.144 93.9128 118.754 94.1328 cv
118.754 93.1328 li
119.154 92.9728 119.524 92.8528 119.864 92.7728 cv
120.204 92.6928 120.524 92.6528 120.814 92.6528 cv
121.564 92.6528 122.164 92.8428 122.614 93.2228 cv
123.064 93.6028 123.294 94.1028 123.294 94.7328 cv
123.294 95.0328 123.234 95.3228 123.124 95.5828 cv
123.014 95.8528 122.814 96.1728 122.514 96.5328 cv
122.434 96.6328 122.174 96.9028 121.734 97.3528 cv
121.294 97.8028 120.684 98.4328 119.894 99.2428 cv
f
149.303 85.4791 mo
149.303 88.9791 li
f
149.303 85.4791 mo
149.303 88.9791 li
@
150.183 96.1428 mo
150.653 96.2428 151.023 96.4528 151.283 96.7728 cv
151.543 97.0928 151.683 97.4928 151.683 97.9528 cv
151.683 98.6728 151.433 99.2328 150.943 99.6228 cv
150.443 100.013 149.743 100.203 148.833 100.203 cv
148.523 100.203 148.203 100.173 147.883 100.113 cv
147.563 100.063 147.223 99.9728 146.883 99.8528 cv
146.883 98.9028 li
147.153 99.0628 147.453 99.1828 147.783 99.2628 cv
148.103 99.3428 148.443 99.3828 148.803 99.3828 cv
149.423 99.3828 149.893 99.2628 150.213 99.0228 cv
150.533 98.7828 150.703 98.4228 150.703 97.9528 cv
150.703 97.5328 150.553 97.1928 150.253 96.9528 cv
149.953 96.7128 149.533 96.5828 148.993 96.5828 cv
148.143 96.5828 li
148.143 95.7728 li
149.033 95.7728 li
149.513 95.7728 149.883 95.6828 150.143 95.4828 cv
150.403 95.2928 150.533 95.0128 150.533 94.6428 cv
150.533 94.2728 150.393 93.9828 150.133 93.7828 cv
149.863 93.5828 149.483 93.4828 148.993 93.4828 cv
148.723 93.4828 148.433 93.5128 148.123 93.5728 cv
147.813 93.6328 147.473 93.7228 147.103 93.8428 cv
147.103 92.9628 li
147.473 92.8628 147.823 92.7828 148.153 92.7328 cv
148.473 92.6828 148.783 92.6528 149.083 92.6528 cv
149.823 92.6528 150.413 92.8228 150.853 93.1628 cv
151.293 93.5028 151.513 93.9628 151.513 94.5428 cv
151.513 94.9428 151.393 95.2828 151.163 95.5628 cv
150.933 95.8428 150.603 96.0428 150.183 96.1428 cv
f
177.452 85.4791 mo
177.452 88.9791 li
f
177.452 85.4791 mo
177.452 88.9791 li
@
178.053 93.6428 mo
175.563 97.5328 li
178.053 97.5328 li
178.053 93.6428 li
177.793 92.7828 mo
179.033 92.7828 li
179.033 97.5328 li
180.073 97.5328 li
180.073 98.3528 li
179.033 98.3528 li
179.033 100.073 li
178.053 100.073 li
178.053 98.3528 li
174.763 98.3528 li
174.763 97.4028 li
177.793 92.7828 li
f
205.602 85.4791 mo
205.602 88.9791 li
f
205.602 85.4791 mo
205.602 88.9791 li
@
203.502 92.7828 mo
207.372 92.7828 li
207.372 93.6128 li
204.402 93.6128 li
204.402 95.4028 li
204.542 95.3528 204.692 95.3128 204.832 95.2928 cv
204.972 95.2728 205.122 95.2528 205.262 95.2528 cv
206.072 95.2528 206.712 95.4828 207.192 95.9228 cv
207.672 96.3728 207.912 96.9728 207.912 97.7328 cv
207.912 98.5228 207.662 99.1328 207.172 99.5628 cv
206.682 99.9928 205.992 100.203 205.112 100.203 cv
204.802 100.203 204.492 100.173 204.172 100.133 cv
203.852 100.083 203.532 100.013 203.192 99.9028 cv
203.192 98.9128 li
203.482 99.0728 203.782 99.1928 204.102 99.2728 cv
204.412 99.3528 204.742 99.3828 205.092 99.3828 cv
205.652 99.3828 206.102 99.2428 206.432 98.9428 cv
206.752 98.6428 206.922 98.2428 206.922 97.7328 cv
206.922 97.2328 206.752 96.8328 206.432 96.5328 cv
206.102 96.2328 205.652 96.0828 205.092 96.0828 cv
204.832 96.0828 204.562 96.1128 204.302 96.1728 cv
204.042 96.2328 203.772 96.3228 203.502 96.4428 cv
203.502 92.7828 li
f
233.751 85.4791 mo
233.751 88.9791 li
f
233.751 85.4791 mo
233.751 88.9791 li
@
233.871 96.0328 mo
233.431 96.0328 233.081 96.1928 232.821 96.4928 cv
232.561 96.7928 232.431 97.2128 232.431 97.7328 cv
232.431 98.2628 232.561 98.6828 232.821 98.9828 cv
233.081 99.2828 233.431 99.4328 233.871 99.4328 cv
234.311 99.4328 234.661 99.2828 234.921 98.9828 cv
235.181 98.6828 235.311 98.2628 235.311 97.7328 cv
235.311 97.2128 235.181 96.7928 234.921 96.4928 cv
234.661 96.1928 234.311 96.0328 233.871 96.0328 cv
235.831 92.9428 mo
235.831 93.8428 li
235.581 93.7228 235.331 93.6328 235.081 93.5728 cv
234.821 93.5128 234.571 93.4828 234.331 93.4828 cv
233.671 93.4828 233.171 93.7028 232.831 94.1428 cv
232.491 94.5828 232.291 95.2528 232.251 96.1328 cv
232.441 95.8528 232.681 95.6328 232.971 95.4828 cv
233.261 95.3328 233.581 95.2528 233.931 95.2528 cv
234.661 95.2528 235.241 95.4828 235.661 95.9228 cv
236.081 96.3628 236.301 96.9728 236.301 97.7328 cv
236.301 98.4828 236.071 99.0828 235.631 99.5328 cv
235.191 99.9828 234.601 100.203 233.871 100.203 cv
233.031 100.203 232.381 99.8828 231.941 99.2428 cv
231.491 98.6028 231.271 97.6628 231.271 96.4328 cv
231.271 95.2828 231.541 94.3628 232.091 93.6828 cv
232.631 93.0028 233.371 92.6528 234.291 92.6528 cv
234.531 92.6528 234.781 92.6828 235.041 92.7228 cv
235.291 92.7728 235.551 92.8428 235.831 92.9428 cv
f
261.9 85.4791 mo
261.9 88.9791 li
f
261.9 85.4791 mo
261.9 88.9791 li
@
259.54 92.7828 mo
264.23 92.7828 li
264.23 93.2028 li
261.58 100.073 li
260.55 100.073 li
263.04 93.6128 li
259.54 93.6128 li
259.54 92.7828 li
f
290.049 85.4791 mo
290.049 88.9791 li
f
290.049 85.4791 mo
290.049 88.9791 li
@
290.05 96.6128 mo
289.58 96.6128 289.21 96.7428 288.94 96.9928 cv
288.67 97.2428 288.54 97.5828 288.54 98.0228 cv
288.54 98.4628 288.67 98.8128 288.94 99.0628 cv
289.21 99.3128 289.58 99.4328 290.05 99.4328 cv
290.51 99.4328 290.88 99.3128 291.15 99.0528 cv
291.42 98.8028 291.56 98.4628 291.56 98.0228 cv
291.56 97.5828 291.42 97.2428 291.16 96.9928 cv
290.89 96.7428 290.52 96.6128 290.05 96.6128 cv
289.06 96.1928 mo
288.64 96.0928 288.31 95.8928 288.07 95.6028 cv
287.83 95.3128 287.72 94.9628 287.72 94.5428 cv
287.72 93.9628 287.92 93.5028 288.34 93.1628 cv
288.75 92.8228 289.32 92.6528 290.05 92.6528 cv
290.77 92.6528 291.34 92.8228 291.76 93.1628 cv
292.17 93.5028 292.38 93.9628 292.38 94.5428 cv
292.38 94.9628 292.26 95.3128 292.02 95.6028 cv
291.78 95.8928 291.46 96.0928 291.04 96.1928 cv
291.51 96.3028 291.88 96.5228 292.15 96.8428 cv
292.41 97.1628 292.55 97.5628 292.55 98.0228 cv
292.55 98.7328 292.33 99.2728 291.9 99.6428 cv
291.46 100.023 290.85 100.203 290.05 100.203 cv
289.24 100.203 288.62 100.023 288.19 99.6428 cv
287.76 99.2728 287.55 98.7328 287.55 98.0228 cv
287.55 97.5628 287.68 97.1628 287.95 96.8428 cv
288.21 96.5228 288.58 96.3028 289.06 96.1928 cv
288.7 94.6328 mo
288.7 95.0128 288.81 95.3128 289.05 95.5228 cv
289.29 95.7328 289.62 95.8328 290.05 95.8328 cv
290.47 95.8328 290.8 95.7328 291.04 95.5228 cv
291.28 95.3128 291.4 95.0128 291.4 94.6328 cv
291.4 94.2528 291.28 93.9628 291.04 93.7528 cv
290.8 93.5428 290.47 93.4328 290.05 93.4328 cv
289.62 93.4328 289.29 93.5428 289.05 93.7528 cv
288.81 93.9628 288.7 94.2528 288.7 94.6328 cv
f
318.199 85.4791 mo
318.199 88.9791 li
f
318.199 85.4791 mo
318.199 88.9791 li
@
316.119 99.9228 mo
316.119 99.0228 li
316.359 99.1428 316.609 99.2328 316.869 99.2928 cv
317.119 99.3528 317.369 99.3828 317.619 99.3828 cv
318.259 99.3828 318.759 99.1728 319.099 98.7328 cv
319.439 98.2928 319.639 97.6328 319.699 96.7328 cv
319.499 97.0128 319.259 97.2328 318.979 97.3828 cv
318.689 97.5328 318.369 97.6028 318.019 97.6028 cv
317.279 97.6028 316.699 97.3828 316.279 96.9428 cv
315.859 96.5028 315.649 95.9028 315.649 95.1328 cv
315.649 94.3928 315.869 93.7928 316.309 93.3328 cv
316.749 92.8828 317.339 92.6528 318.079 92.6528 cv
318.919 92.6528 319.569 92.9828 320.009 93.6228 cv
320.449 94.2728 320.679 95.2128 320.679 96.4328 cv
320.679 97.5928 320.399 98.5028 319.859 99.1828 cv
319.309 99.8628 318.579 100.203 317.659 100.203 cv
317.409 100.203 317.159 100.173 316.909 100.133 cv
316.649 100.093 316.389 100.023 316.119 99.9228 cv
318.079 96.8328 mo
318.519 96.8328 318.869 96.6828 319.129 96.3828 cv
319.389 96.0828 319.519 95.6628 319.519 95.1328 cv
319.519 94.6128 319.389 94.1928 319.129 93.8928 cv
318.869 93.5928 318.519 93.4328 318.079 93.4328 cv
317.639 93.4328 317.289 93.5928 317.029 93.8928 cv
316.769 94.1928 316.639 94.6128 316.639 95.1328 cv
316.639 95.6628 316.769 96.0828 317.029 96.3828 cv
317.289 96.6828 317.639 96.8328 318.079 96.8328 cv
f
346.348 85.4791 mo
346.348 88.9791 li
f
346.348 85.4791 mo
346.348 88.9791 li
@
341.228 99.2428 mo
342.838 99.2428 li
342.838 93.6828 li
341.088 94.0328 li
341.088 93.1328 li
342.828 92.7828 li
343.818 92.7828 li
343.818 99.2428 li
345.428 99.2428 li
345.428 100.073 li
341.228 100.073 li
341.228 99.2428 li
f
349.528 93.4328 mo
349.018 93.4328 348.638 93.6828 348.378 94.1828 cv
348.118 94.6828 347.998 95.4328 347.998 96.4328 cv
347.998 97.4328 348.118 98.1828 348.378 98.6828 cv
348.638 99.1828 349.018 99.4328 349.528 99.4328 cv
350.038 99.4328 350.418 99.1828 350.678 98.6828 cv
350.928 98.1828 351.058 97.4328 351.058 96.4328 cv
351.058 95.4328 350.928 94.6828 350.678 94.1828 cv
350.418 93.6828 350.038 93.4328 349.528 93.4328 cv
349.528 92.6528 mo
350.338 92.6528 350.958 92.9828 351.398 93.6228 cv
351.828 94.2728 352.048 95.2128 352.048 96.4328 cv
352.048 97.6628 351.828 98.6028 351.398 99.2428 cv
350.958 99.8828 350.338 100.203 349.528 100.203 cv
348.708 100.203 348.078 99.8828 347.648 99.2428 cv
347.218 98.6028 347.008 97.6628 347.008 96.4328 cv
347.008 95.2128 347.218 94.2728 347.648 93.6228 cv
348.078 92.9828 348.708 92.6528 349.528 92.6528 cv
f
374.497 85.4791 mo
374.497 88.9791 li
f
374.497 85.4791 mo
374.497 88.9791 li
@
369.378 99.2428 mo
370.988 99.2428 li
370.988 93.6828 li
369.238 94.0328 li
369.238 93.1328 li
370.978 92.7828 li
371.968 92.7828 li
371.968 99.2428 li
373.578 99.2428 li
373.578 100.073 li
369.378 100.073 li
369.378 99.2428 li
f
375.738 99.2428 mo
377.348 99.2428 li
377.348 93.6828 li
375.598 94.0328 li
375.598 93.1328 li
377.338 92.7828 li
378.328 92.7828 li
378.328 99.2428 li
379.938 99.2428 li
379.938 100.073 li
375.738 100.073 li
375.738 99.2428 li
f
189.898 106.36 mo
190.591 106.36 li
190.591 108.453 li
193.097 108.453 li
193.097 106.36 li
193.79 106.36 li
193.79 111.463 li
193.097 111.463 li
193.097 109.034 li
190.591 109.034 li
190.591 111.463 li
189.898 111.463 li
189.898 106.36 li
f
194.462 106.36 mo
198.774 106.36 li
198.774 106.941 li
196.961 106.941 li
196.961 111.463 li
196.268 111.463 li
196.268 106.941 li
194.462 106.941 li
194.462 106.36 li
f
198.739 106.36 mo
203.051 106.36 li
203.051 106.941 li
201.238 106.941 li
201.238 111.463 li
200.545 111.463 li
200.545 106.941 li
198.739 106.941 li
198.739 106.36 li
f
204.409 106.927 mo
204.409 108.845 li
205.277 108.845 li
205.599 108.845 205.844 108.768 206.019 108.6 cv
206.194 108.432 206.285 108.194 206.285 107.886 cv
206.285 107.578 206.194 107.347 206.019 107.179 cv
205.844 107.011 205.599 106.927 205.277 106.927 cv
204.409 106.927 li
203.716 106.36 mo
205.277 106.36 li
205.844 106.36 206.278 106.493 206.572 106.752 cv
206.866 107.011 207.013 107.389 207.013 107.886 cv
207.013 108.39 206.866 108.775 206.572 109.027 cv
206.278 109.286 205.844 109.412 205.277 109.412 cv
204.409 109.412 li
204.409 111.463 li
203.716 111.463 li
203.716 106.36 li
f
210.996 106.528 mo
210.996 107.2 li
210.73 107.074 210.485 106.983 210.254 106.92 cv
210.016 106.864 209.792 106.829 209.582 106.829 cv
209.204 106.829 208.91 106.906 208.707 107.046 cv
208.504 107.193 208.406 107.403 208.406 107.669 cv
208.406 107.893 208.469 108.068 208.609 108.18 cv
208.742 108.299 209.001 108.39 209.379 108.46 cv
209.799 108.544 li
210.31 108.642 210.688 108.817 210.933 109.062 cv
211.178 109.314 211.304 109.643 211.304 110.056 cv
211.304 110.553 211.136 110.924 210.807 111.176 cv
210.471 111.428 209.988 111.554 209.351 111.554 cv
209.106 111.554 208.847 111.526 208.574 111.477 cv
208.301 111.428 208.021 111.351 207.734 111.239 cv
207.734 110.525 li
208.014 110.686 208.287 110.805 208.553 110.882 cv
208.819 110.966 209.085 111.001 209.351 111.001 cv
209.743 111.001 210.044 110.924 210.261 110.77 cv
210.471 110.616 210.583 110.399 210.583 110.105 cv
210.583 109.853 210.506 109.657 210.352 109.517 cv
210.198 109.377 209.946 109.272 209.596 109.202 cv
209.176 109.118 li
208.658 109.02 208.287 108.859 208.056 108.635 cv
207.825 108.418 207.713 108.117 207.713 107.725 cv
207.713 107.277 207.867 106.92 208.189 106.661 cv
208.504 106.402 208.945 106.269 209.505 106.269 cv
209.743 106.269 209.981 106.29 210.233 106.332 cv
210.478 106.374 210.73 106.444 210.996 106.528 cv
f
217.023 107.746 mo
217.023 108.341 li
216.841 108.257 216.659 108.187 216.47 108.138 cv
216.274 108.096 216.078 108.068 215.875 108.068 cv
215.56 108.068 215.322 108.117 215.168 108.215 cv
215.014 108.313 214.937 108.453 214.937 108.642 cv
214.937 108.789 214.993 108.901 215.105 108.985 cv
215.217 109.069 215.441 109.153 215.777 109.223 cv
215.994 109.272 li
216.442 109.37 216.757 109.51 216.946 109.678 cv
217.128 109.853 217.226 110.098 217.226 110.406 cv
217.226 110.763 217.086 111.043 216.806 111.246 cv
216.526 111.456 216.134 111.554 215.644 111.554 cv
215.434 111.554 215.224 111.533 215 111.498 cv
214.776 111.463 214.545 111.407 214.3 111.323 cv
214.3 110.672 li
214.531 110.798 214.762 110.889 214.986 110.945 cv
215.21 111.008 215.434 111.036 215.658 111.036 cv
215.952 111.036 216.183 110.987 216.344 110.889 cv
216.498 110.791 216.582 110.644 216.582 110.455 cv
216.582 110.287 216.519 110.154 216.407 110.063 cv
216.295 109.972 216.043 109.881 215.651 109.797 cv
215.434 109.748 li
215.042 109.664 214.755 109.538 214.587 109.37 cv
214.412 109.202 214.328 108.971 214.328 108.67 cv
214.328 108.313 214.454 108.033 214.706 107.837 cv
214.958 107.641 215.322 107.543 215.798 107.543 cv
216.029 107.543 216.246 107.564 216.456 107.599 cv
216.659 107.634 216.848 107.683 217.023 107.746 cv
f
221.503 109.391 mo
221.503 109.699 li
218.612 109.699 li
218.64 110.133 218.766 110.469 219.004 110.693 cv
219.235 110.917 219.557 111.029 219.977 111.029 cv
220.215 111.029 220.453 111.001 220.677 110.945 cv
220.901 110.889 221.132 110.798 221.356 110.672 cv
221.356 111.267 li
221.132 111.365 220.901 111.442 220.663 111.484 cv
220.425 111.526 220.18 111.554 219.942 111.554 cv
219.326 111.554 218.843 111.379 218.486 111.029 cv
218.129 110.679 217.954 110.196 217.954 109.587 cv
217.954 108.964 218.122 108.467 218.458 108.096 cv
218.794 107.732 219.256 107.543 219.83 107.543 cv
220.348 107.543 220.754 107.711 221.055 108.04 cv
221.349 108.376 221.503 108.824 221.503 109.391 cv
220.873 109.209 mo
220.866 108.866 220.768 108.593 220.586 108.383 cv
220.397 108.18 220.145 108.075 219.837 108.075 cv
219.487 108.075 219.207 108.18 218.997 108.376 cv
218.787 108.572 218.661 108.852 218.633 109.209 cv
220.873 109.209 li
f
224.751 108.222 mo
224.681 108.18 224.604 108.152 224.52 108.131 cv
224.436 108.117 224.345 108.103 224.247 108.103 cv
223.89 108.103 223.617 108.222 223.428 108.453 cv
223.232 108.684 223.141 109.013 223.141 109.447 cv
223.141 111.463 li
222.511 111.463 li
222.511 107.634 li
223.141 107.634 li
223.141 108.229 li
223.267 107.998 223.442 107.823 223.652 107.711 cv
223.862 107.599 224.121 107.543 224.429 107.543 cv
224.471 107.543 224.52 107.55 224.576 107.55 cv
224.625 107.557 224.681 107.564 224.751 107.578 cv
224.751 108.222 li
f
224.961 107.634 mo
225.626 107.634 li
226.823 110.847 li
228.02 107.634 li
228.685 107.634 li
227.25 111.463 li
226.396 111.463 li
224.961 107.634 li
f
229.553 107.634 mo
230.183 107.634 li
230.183 111.463 li
229.553 111.463 li
229.553 107.634 li
229.553 106.143 mo
230.183 106.143 li
230.183 106.941 li
229.553 106.941 li
229.553 106.143 li
f
234.257 107.781 mo
234.257 108.369 li
234.075 108.271 233.9 108.201 233.718 108.152 cv
233.536 108.103 233.361 108.075 233.179 108.075 cv
232.773 108.075 232.451 108.208 232.227 108.467 cv
232.003 108.726 231.891 109.09 231.891 109.552 cv
231.891 110.021 232.003 110.385 232.227 110.644 cv
232.451 110.903 232.773 111.029 233.179 111.029 cv
233.361 111.029 233.536 111.008 233.718 110.959 cv
233.9 110.91 234.075 110.833 234.257 110.735 cv
234.257 111.316 li
234.075 111.4 233.893 111.463 233.711 111.498 cv
233.522 111.533 233.319 111.554 233.109 111.554 cv
232.535 111.554 232.073 111.379 231.737 111.015 cv
231.394 110.658 231.226 110.168 231.226 109.552 cv
231.226 108.929 231.394 108.439 231.737 108.082 cv
232.08 107.725 232.549 107.543 233.151 107.543 cv
233.347 107.543 233.536 107.564 233.718 107.606 cv
233.9 107.648 234.082 107.704 234.257 107.781 cv
f
238.625 109.391 mo
238.625 109.699 li
235.734 109.699 li
235.762 110.133 235.888 110.469 236.126 110.693 cv
236.357 110.917 236.679 111.029 237.099 111.029 cv
237.337 111.029 237.575 111.001 237.799 110.945 cv
238.023 110.889 238.254 110.798 238.478 110.672 cv
238.478 111.267 li
238.254 111.365 238.023 111.442 237.785 111.484 cv
237.547 111.526 237.302 111.554 237.064 111.554 cv
236.448 111.554 235.965 111.379 235.608 111.029 cv
235.251 110.679 235.076 110.196 235.076 109.587 cv
235.076 108.964 235.244 108.467 235.58 108.096 cv
235.916 107.732 236.378 107.543 236.952 107.543 cv
237.47 107.543 237.876 107.711 238.177 108.04 cv
238.471 108.376 238.625 108.824 238.625 109.391 cv
237.995 109.209 mo
237.988 108.866 237.89 108.593 237.708 108.383 cv
237.519 108.18 237.267 108.075 236.959 108.075 cv
236.609 108.075 236.329 108.18 236.119 108.376 cv
235.909 108.572 235.783 108.852 235.755 109.209 cv
237.995 109.209 li
f
242.097 107.746 mo
242.097 108.341 li
241.915 108.257 241.733 108.187 241.544 108.138 cv
241.348 108.096 241.152 108.068 240.949 108.068 cv
240.634 108.068 240.396 108.117 240.242 108.215 cv
240.088 108.313 240.011 108.453 240.011 108.642 cv
240.011 108.789 240.067 108.901 240.179 108.985 cv
240.291 109.069 240.515 109.153 240.851 109.223 cv
241.068 109.272 li
241.516 109.37 241.831 109.51 242.02 109.678 cv
242.202 109.853 242.3 110.098 242.3 110.406 cv
242.3 110.763 242.16 111.043 241.88 111.246 cv
241.6 111.456 241.208 111.554 240.718 111.554 cv
240.508 111.554 240.298 111.533 240.074 111.498 cv
239.85 111.463 239.619 111.407 239.374 111.323 cv
239.374 110.672 li
239.605 110.798 239.836 110.889 240.06 110.945 cv
240.284 111.008 240.508 111.036 240.732 111.036 cv
241.026 111.036 241.257 110.987 241.418 110.889 cv
241.572 110.791 241.656 110.644 241.656 110.455 cv
241.656 110.287 241.593 110.154 241.481 110.063 cv
241.369 109.972 241.117 109.881 240.725 109.797 cv
240.508 109.748 li
240.116 109.664 239.829 109.538 239.661 109.37 cv
239.486 109.202 239.402 108.971 239.402 108.67 cv
239.402 108.313 239.528 108.033 239.78 107.837 cv
240.032 107.641 240.396 107.543 240.872 107.543 cv
241.103 107.543 241.32 107.564 241.53 107.599 cv
241.733 107.634 241.922 107.683 242.097 107.746 cv
f
213.21 113.979 mo
212.902 114.511 212.678 115.029 212.531 115.54 cv
212.377 116.051 212.307 116.569 212.307 117.094 cv
212.307 117.626 212.377 118.144 212.531 118.655 cv
212.678 119.173 212.902 119.684 213.21 120.209 cv
212.664 120.209 li
212.321 119.67 212.062 119.152 211.894 118.634 cv
211.726 118.116 211.642 117.605 211.642 117.094 cv
211.642 116.59 211.726 116.079 211.894 115.561 cv
212.062 115.043 212.314 114.518 212.664 113.979 cv
213.21 113.979 li
f
216.171 117.367 mo
215.66 117.367 215.31 117.43 215.114 117.542 cv
214.918 117.661 214.82 117.857 214.82 118.137 cv
214.82 118.361 214.89 118.543 215.037 118.669 cv
215.184 118.802 215.387 118.865 215.639 118.865 cv
215.989 118.865 216.269 118.746 216.479 118.494 cv
216.689 118.249 216.794 117.92 216.794 117.507 cv
216.794 117.367 li
216.171 117.367 li
217.424 117.108 mo
217.424 119.292 li
216.794 119.292 li
216.794 118.711 li
216.647 118.949 216.465 119.117 216.255 119.222 cv
216.045 119.327 215.779 119.383 215.471 119.383 cv
215.079 119.383 214.764 119.278 214.533 119.061 cv
214.302 118.844 214.19 118.55 214.19 118.179 cv
214.19 117.752 214.33 117.43 214.624 117.206 cv
214.911 116.989 215.338 116.877 215.912 116.877 cv
216.794 116.877 li
216.794 116.814 li
216.794 116.527 216.696 116.303 216.507 116.142 cv
216.318 115.988 216.052 115.904 215.709 115.904 cv
215.485 115.904 215.275 115.932 215.065 115.988 cv
214.855 116.044 214.659 116.121 214.47 116.219 cv
214.47 115.638 li
214.694 115.554 214.918 115.484 215.135 115.442 cv
215.352 115.4 215.562 115.372 215.772 115.372 cv
216.325 115.372 216.738 115.519 217.011 115.806 cv
217.284 116.093 217.424 116.527 217.424 117.108 cv
f
218.621 113.979 mo
219.167 113.979 li
219.503 114.518 219.762 115.043 219.93 115.561 cv
220.098 116.079 220.189 116.59 220.189 117.094 cv
220.189 117.605 220.098 118.116 219.93 118.634 cv
219.762 119.152 219.503 119.67 219.167 120.209 cv
218.621 120.209 li
218.922 119.684 219.146 119.173 219.3 118.655 cv
219.447 118.144 219.524 117.626 219.524 117.094 cv
219.524 116.569 219.447 116.051 219.3 115.54 cv
219.146 115.029 218.922 114.511 218.621 113.979 cv
f
37.3629 85.4791 mo
33.8629 85.4791 li
f
37.3629 85.4791 mo
33.8629 85.4791 li
@
17.6367 82.6359 mo
17.1267 82.6359 16.7467 82.8859 16.4867 83.3859 cv
16.2267 83.8859 16.1067 84.6359 16.1067 85.6359 cv
16.1067 86.6359 16.2267 87.3859 16.4867 87.8859 cv
16.7467 88.3859 17.1267 88.6359 17.6367 88.6359 cv
18.1467 88.6359 18.5267 88.3859 18.7867 87.8859 cv
19.0367 87.3859 19.1667 86.6359 19.1667 85.6359 cv
19.1667 84.6359 19.0367 83.8859 18.7867 83.3859 cv
18.5267 82.8859 18.1467 82.6359 17.6367 82.6359 cv
17.6367 81.8559 mo
18.4467 81.8559 19.0667 82.1859 19.5067 82.8259 cv
19.9367 83.4759 20.1567 84.4159 20.1567 85.6359 cv
20.1567 86.8659 19.9367 87.8059 19.5067 88.4459 cv
19.0667 89.0859 18.4467 89.4059 17.6367 89.4059 cv
16.8167 89.4059 16.1867 89.0859 15.7567 88.4459 cv
15.3267 87.8059 15.1167 86.8659 15.1167 85.6359 cv
15.1167 84.4159 15.3267 83.4759 15.7567 82.8259 cv
16.1867 82.1859 16.8167 81.8559 17.6367 81.8559 cv
f
21.8867 88.0359 mo
22.9167 88.0359 li
22.9167 89.2759 li
21.8867 89.2759 li
21.8867 88.0359 li
f
27.1767 82.6359 mo
26.6667 82.6359 26.2867 82.8859 26.0267 83.3859 cv
25.7667 83.8859 25.6467 84.6359 25.6467 85.6359 cv
25.6467 86.6359 25.7667 87.3859 26.0267 87.8859 cv
26.2867 88.3859 26.6667 88.6359 27.1767 88.6359 cv
27.6867 88.6359 28.0667 88.3859 28.3267 87.8859 cv
28.5767 87.3859 28.7067 86.6359 28.7067 85.6359 cv
28.7067 84.6359 28.5767 83.8859 28.3267 83.3859 cv
28.0667 82.8859 27.6867 82.6359 27.1767 82.6359 cv
27.1767 81.8559 mo
27.9867 81.8559 28.6067 82.1859 29.0467 82.8259 cv
29.4767 83.4759 29.6967 84.4159 29.6967 85.6359 cv
29.6967 86.8659 29.4767 87.8059 29.0467 88.4459 cv
28.6067 89.0859 27.9867 89.4059 27.1767 89.4059 cv
26.3567 89.4059 25.7267 89.0859 25.2967 88.4459 cv
24.8667 87.8059 24.6567 86.8659 24.6567 85.6359 cv
24.6567 84.4159 24.8667 83.4759 25.2967 82.8259 cv
25.7267 82.1859 26.3567 81.8559 27.1767 81.8559 cv
f
37.3629 46.8239 mo
33.8629 46.8239 li
f
37.3629 46.8239 mo
33.8629 46.8239 li
@
17.6367 43.9808 mo
17.1267 43.9808 16.7467 44.2308 16.4867 44.7308 cv
16.2267 45.2308 16.1067 45.9808 16.1067 46.9808 cv
16.1067 47.9808 16.2267 48.7308 16.4867 49.2308 cv
16.7467 49.7308 17.1267 49.9808 17.6367 49.9808 cv
18.1467 49.9808 18.5267 49.7308 18.7867 49.2308 cv
19.0367 48.7308 19.1667 47.9808 19.1667 46.9808 cv
19.1667 45.9808 19.0367 45.2308 18.7867 44.7308 cv
18.5267 44.2308 18.1467 43.9808 17.6367 43.9808 cv
17.6367 43.2008 mo
18.4467 43.2008 19.0667 43.5308 19.5067 44.1708 cv
19.9367 44.8208 20.1567 45.7608 20.1567 46.9808 cv
20.1567 48.2108 19.9367 49.1508 19.5067 49.7908 cv
19.0667 50.4308 18.4467 50.7508 17.6367 50.7508 cv
16.8167 50.7508 16.1867 50.4308 15.7567 49.7908 cv
15.3267 49.1508 15.1167 48.2108 15.1167 46.9808 cv
15.1167 45.7608 15.3267 44.8208 15.7567 44.1708 cv
16.1867 43.5308 16.8167 43.2008 17.6367 43.2008 cv
f
21.8867 49.3808 mo
22.9167 49.3808 li
22.9167 50.6208 li
21.8867 50.6208 li
21.8867 49.3808 li
f
25.0767 43.3308 mo
28.9467 43.3308 li
28.9467 44.1608 li
25.9767 44.1608 li
25.9767 45.9508 li
26.1167 45.9008 26.2667 45.8608 26.4067 45.8408 cv
26.5467 45.8208 26.6967 45.8008 26.8367 45.8008 cv
27.6467 45.8008 28.2867 46.0308 28.7667 46.4708 cv
29.2467 46.9208 29.4867 47.5208 29.4867 48.2808 cv
29.4867 49.0708 29.2367 49.6808 28.7467 50.1108 cv
28.2567 50.5408 27.5667 50.7508 26.6867 50.7508 cv
26.3767 50.7508 26.0667 50.7208 25.7467 50.6808 cv
25.4267 50.6308 25.1067 50.5608 24.7667 50.4508 cv
24.7667 49.4608 li
25.0567 49.6208 25.3567 49.7408 25.6767 49.8208 cv
25.9867 49.9008 26.3167 49.9308 26.6667 49.9308 cv
27.2267 49.9308 27.6767 49.7908 28.0067 49.4908 cv
28.3267 49.1908 28.4967 48.7908 28.4967 48.2808 cv
28.4967 47.7808 28.3267 47.3808 28.0067 47.0808 cv
27.6767 46.7808 27.2267 46.6308 26.6667 46.6308 cv
26.4067 46.6308 26.1367 46.6608 25.8767 46.7208 cv
25.6167 46.7808 25.3467 46.8708 25.0767 46.9908 cv
25.0767 43.3308 li
f
37.3629 8.16879 mo
33.8629 8.16879 li
f
37.3629 8.16879 mo
33.8629 8.16879 li
@
15.6967 11.1357 mo
17.3067 11.1357 li
17.3067 5.57568 li
15.5567 5.92569 li
15.5567 5.0257 li
17.2967 4.67569 li
18.2867 4.67569 li
18.2867 11.1357 li
19.8967 11.1357 li
19.8967 11.9657 li
15.6967 11.9657 li
15.6967 11.1357 li
f
21.8867 10.7257 mo
22.9167 10.7257 li
22.9167 11.9657 li
21.8867 11.9657 li
21.8867 10.7257 li
f
27.1767 5.32568 mo
26.6667 5.32568 26.2867 5.57568 26.0267 6.07568 cv
25.7667 6.57568 25.6467 7.32568 25.6467 8.32568 cv
25.6467 9.32568 25.7667 10.0757 26.0267 10.5757 cv
26.2867 11.0757 26.6667 11.3257 27.1767 11.3257 cv
27.6867 11.3257 28.0667 11.0757 28.3267 10.5757 cv
28.5767 10.0757 28.7067 9.32568 28.7067 8.32568 cv
28.7067 7.32568 28.5767 6.57568 28.3267 6.07568 cv
28.0667 5.57568 27.6867 5.32568 27.1767 5.32568 cv
27.1767 4.54568 mo
27.9867 4.54568 28.6067 4.87567 29.0467 5.51569 cv
29.4767 6.16568 29.6967 7.10568 29.6967 8.32568 cv
29.6967 9.55569 29.4767 10.4957 29.0467 11.1357 cv
28.6067 11.7757 27.9867 12.0957 27.1767 12.0957 cv
26.3567 12.0957 25.7267 11.7757 25.2967 11.1357 cv
24.8667 10.4957 24.6567 9.55569 24.6567 8.32568 cv
24.6567 7.10568 24.8667 6.16568 25.2967 5.51569 cv
25.7267 4.87567 26.3567 4.54568 27.1767 4.54568 cv
f
4.46756 59.3232 mo
6.38556 59.3232 li
6.38556 58.4552 li
6.38556 58.1332 6.30856 57.8882 6.14056 57.7132 cv
5.97256 57.5382 5.73456 57.4472 5.42656 57.4472 cv
5.11856 57.4472 4.88756 57.5382 4.71956 57.7132 cv
4.55156 57.8882 4.46756 58.1332 4.46756 58.4552 cv
4.46756 59.3232 li
3.90056 60.0162 mo
3.90056 58.4552 li
3.90056 57.8882 4.03356 57.4542 4.29256 57.1602 cv
4.55156 56.8662 4.92956 56.7192 5.42656 56.7192 cv
5.93056 56.7192 6.31556 56.8662 6.56756 57.1602 cv
6.82656 57.4542 6.95256 57.8882 6.95256 58.4552 cv
6.95256 59.3232 li
9.00356 59.3232 li
9.00356 60.0162 li
3.90056 60.0162 li
f
5.76256 53.6042 mo
5.72056 53.6742 5.69256 53.7512 5.67156 53.8352 cv
5.65756 53.9192 5.64356 54.0102 5.64356 54.1082 cv
5.64356 54.4652 5.76256 54.7382 5.99356 54.9272 cv
6.22456 55.1232 6.55356 55.2142 6.98756 55.2142 cv
9.00356 55.2142 li
9.00356 55.8442 li
5.17456 55.8442 li
5.17456 55.2142 li
5.76956 55.2142 li
5.53856 55.0882 5.36356 54.9132 5.25156 54.7032 cv
5.13956 54.4932 5.08356 54.2342 5.08356 53.9262 cv
5.08356 53.8842 5.09056 53.8352 5.09056 53.7792 cv
5.09756 53.7302 5.10456 53.6742 5.11856 53.6042 cv
5.76256 53.6042 li
f
6.93156 49.6702 mo
7.23956 49.6702 li
7.23956 52.5612 li
7.67356 52.5332 8.00956 52.4072 8.23356 52.1692 cv
8.45756 51.9382 8.56956 51.6162 8.56956 51.1962 cv
8.56956 50.9582 8.54156 50.7202 8.48556 50.4962 cv
8.42956 50.2722 8.33856 50.0412 8.21256 49.8172 cv
8.80756 49.8172 li
8.90556 50.0412 8.98256 50.2722 9.02456 50.5102 cv
9.06656 50.7482 9.09456 50.9932 9.09456 51.2312 cv
9.09456 51.8472 8.91956 52.3302 8.56956 52.6872 cv
8.21956 53.0442 7.73656 53.2192 7.12756 53.2192 cv
6.50456 53.2192 6.00756 53.0512 5.63656 52.7152 cv
5.27256 52.3792 5.08356 51.9172 5.08356 51.3432 cv
5.08356 50.8252 5.25156 50.4192 5.58056 50.1182 cv
5.91656 49.8242 6.36456 49.6702 6.93156 49.6702 cv
6.74956 50.3002 mo
6.40656 50.3072 6.13356 50.4052 5.92356 50.5872 cv
5.72056 50.7762 5.61556 51.0282 5.61556 51.3362 cv
5.61556 51.6862 5.72056 51.9662 5.91656 52.1762 cv
6.11256 52.3862 6.39256 52.5122 6.74956 52.5402 cv
6.74956 50.3002 li
f
5.32156 45.8832 mo
5.90956 45.8832 li
5.81156 46.0652 5.74156 46.2402 5.69256 46.4222 cv
5.64356 46.6042 5.61556 46.7792 5.61556 46.9612 cv
5.61556 47.3672 5.74856 47.6892 6.00756 47.9132 cv
6.26656 48.1372 6.63056 48.2492 7.09256 48.2492 cv
7.56156 48.2492 7.92556 48.1372 8.18456 47.9132 cv
8.44356 47.6892 8.56956 47.3672 8.56956 46.9612 cv
8.56956 46.7792 8.54856 46.6042 8.49956 46.4222 cv
8.45056 46.2402 8.37356 46.0652 8.27556 45.8832 cv
8.85656 45.8832 li
8.94056 46.0652 9.00356 46.2472 9.03856 46.4292 cv
9.07356 46.6182 9.09456 46.8212 9.09456 47.0312 cv
9.09456 47.6052 8.91956 48.0672 8.55556 48.4032 cv
8.19856 48.7462 7.70856 48.9142 7.09256 48.9142 cv
6.46956 48.9142 5.97956 48.7462 5.62256 48.4032 cv
5.26556 48.0602 5.08356 47.5912 5.08356 46.9892 cv
5.08356 46.7932 5.10456 46.6042 5.14656 46.4222 cv
5.18856 46.2402 5.24456 46.0582 5.32156 45.8832 cv
f
5.17456 44.7912 mo
5.17456 44.1612 li
9.00356 44.1612 li
9.00356 44.7912 li
5.17456 44.7912 li
3.68356 44.7912 mo
3.68356 44.1612 li
4.48156 44.1612 li
4.48156 44.7912 li
3.68356 44.7912 li
f
5.28656 40.4022 mo
5.88156 40.4022 li
5.79756 40.5842 5.72756 40.7662 5.67856 40.9552 cv
5.63656 41.1512 5.60856 41.3472 5.60856 41.5502 cv
5.60856 41.8652 5.65756 42.1032 5.75556 42.2572 cv
5.85356 42.4112 5.99356 42.4882 6.18256 42.4882 cv
6.32956 42.4882 6.44156 42.4322 6.52556 42.3202 cv
6.60956 42.2082 6.69356 41.9842 6.76356 41.6482 cv
6.81256 41.4312 li
6.91056 40.9832 7.05056 40.6682 7.21856 40.4792 cv
7.39356 40.2972 7.63856 40.1992 7.94656 40.1992 cv
8.30356 40.1992 8.58356 40.3392 8.78656 40.6192 cv
8.99656 40.8992 9.09456 41.2912 9.09456 41.7812 cv
9.09456 41.9912 9.07356 42.2012 9.03856 42.4252 cv
9.00356 42.6492 8.94756 42.8802 8.86356 43.1252 cv
8.21256 43.1252 li
8.33856 42.8942 8.42956 42.6632 8.48556 42.4392 cv
8.54856 42.2152 8.57656 41.9912 8.57656 41.7672 cv
8.57656 41.4732 8.52756 41.2422 8.42956 41.0812 cv
8.33156 40.9272 8.18456 40.8432 7.99556 40.8432 cv
7.82756 40.8432 7.69456 40.9062 7.60356 41.0182 cv
7.51256 41.1302 7.42156 41.3822 7.33756 41.7742 cv
7.28856 41.9912 li
7.20456 42.3832 7.07856 42.6702 6.91056 42.8382 cv
6.74256 43.0132 6.51156 43.0972 6.21056 43.0972 cv
5.85356 43.0972 5.57356 42.9712 5.37756 42.7192 cv
5.18156 42.4672 5.08356 42.1032 5.08356 41.6272 cv
5.08356 41.3962 5.10456 41.1792 5.13956 40.9692 cv
5.17456 40.7662 5.22356 40.5772 5.28656 40.4022 cv
f
5.17456 39.1982 mo
5.17456 38.5682 li
9.00356 38.5682 li
9.00356 39.1982 li
5.17456 39.1982 li
3.68356 39.1982 mo
3.68356 38.5682 li
4.48156 38.5682 li
4.48156 39.1982 li
3.68356 39.1982 li
f
5.61556 35.7682 mo
5.61556 36.1042 5.74856 36.3702 6.01456 36.5662 cv
6.28056 36.7622 6.63756 36.8602 7.09256 36.8602 cv
7.55456 36.8602 7.91156 36.7692 8.17756 36.5732 cv
8.44356 36.3772 8.56956 36.1112 8.56956 35.7682 cv
8.56956 35.4322 8.44356 35.1662 8.17756 34.9702 cv
7.91156 34.7742 7.55456 34.6762 7.09256 34.6762 cv
6.64456 34.6762 6.28056 34.7742 6.01456 34.9702 cv
5.74856 35.1662 5.61556 35.4322 5.61556 35.7682 cv
5.08356 35.7682 mo
5.08356 35.2222 5.26556 34.7952 5.61556 34.4802 cv
5.97256 34.1722 6.46256 34.0112 7.09256 34.0112 cv
7.72256 34.0112 8.21256 34.1722 8.56256 34.4802 cv
8.91956 34.7952 9.09456 35.2222 9.09456 35.7682 cv
9.09456 36.3212 8.91956 36.7552 8.56256 37.0632 cv
8.21256 37.3712 7.72256 37.5252 7.09256 37.5252 cv
6.46256 37.5252 5.97256 37.3712 5.61556 37.0632 cv
5.26556 36.7552 5.08356 36.3212 5.08356 35.7682 cv
f
6.69356 29.7832 mo
9.00356 29.7832 li
9.00356 30.4132 li
6.71456 30.4132 li
6.35056 30.4132 6.08456 30.4902 5.90256 30.6302 cv
5.72056 30.7702 5.62956 30.9802 5.62956 31.2602 cv
5.62956 31.6032 5.74156 31.8692 5.95856 32.0652 cv
6.17556 32.2612 6.46956 32.3592 6.84056 32.3592 cv
9.00356 32.3592 li
9.00356 32.9892 li
5.17456 32.9892 li
5.17456 32.3592 li
5.76956 32.3592 li
5.54556 32.2122 5.37056 32.0372 5.25856 31.8272 cv
5.14656 31.6242 5.08356 31.3862 5.08356 31.1202 cv
5.08356 30.6862 5.22356 30.3502 5.49656 30.1262 cv
5.76956 29.9022 6.16856 29.7832 6.69356 29.7832 cv
f
2 lc
0 lj
37.3629 85.4791 mo
37.3629 4.40958 li
@
394.483 85.4791 mo
394.483 4.40958 li
@
37.3629 85.4791 mo
394.483 85.4791 li
@
37.3629 4.40958 mo
394.483 4.40958 li
@
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
53.5957 207.083 mo
61.1021 207.083 li
61.1021 131.151 li
53.5957 131.151 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
53.5957 207.083 mo
61.1021 207.083 li
61.1021 131.151 li
53.5957 131.151 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
81.7449 207.083 mo
89.2513 207.083 li
89.2513 132.656 li
81.7449 132.656 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
81.7449 207.083 mo
89.2513 207.083 li
89.2513 132.656 li
81.7449 132.656 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
109.894 207.083 mo
117.401 207.083 li
117.401 133.731 li
109.894 133.731 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
109.894 207.083 mo
117.401 207.083 li
117.401 133.731 li
109.894 133.731 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
138.043 207.083 mo
145.55 207.083 li
145.55 131.801 li
138.043 131.801 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
138.043 207.083 mo
145.55 207.083 li
145.55 131.801 li
138.043 131.801 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
166.193 207.083 mo
173.699 207.083 li
173.699 141.414 li
166.193 141.414 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
166.193 207.083 mo
173.699 207.083 li
173.699 141.414 li
166.193 141.414 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
194.342 207.083 mo
201.848 207.083 li
201.848 134.597 li
194.342 134.597 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
194.342 207.083 mo
201.848 207.083 li
201.848 134.597 li
194.342 134.597 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
222.491 207.083 mo
229.998 207.083 li
229.998 132.342 li
222.491 132.342 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
222.491 207.083 mo
229.998 207.083 li
229.998 132.342 li
222.491 132.342 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
250.64 207.083 mo
258.147 207.083 li
258.147 144.457 li
250.64 144.457 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
250.64 207.083 mo
258.147 207.083 li
258.147 144.457 li
250.64 144.457 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
278.79 207.083 mo
286.296 207.083 li
286.296 130.802 li
278.79 130.802 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
278.79 207.083 mo
286.296 207.083 li
286.296 130.802 li
278.79 130.802 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
306.939 207.083 mo
314.445 207.083 li
314.445 130.875 li
306.939 130.875 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
306.939 207.083 mo
314.445 207.083 li
314.445 130.875 li
306.939 130.875 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
335.088 207.083 mo
342.595 207.083 li
342.595 130.278 li
335.088 130.278 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
335.088 207.083 mo
342.595 207.083 li
342.595 130.278 li
335.088 130.278 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
363.237 207.083 mo
370.744 207.083 li
370.744 139.047 li
363.237 139.047 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
363.237 207.083 mo
370.744 207.083 li
370.744 139.047 li
363.237 139.047 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
61.1021 207.083 mo
68.6086 207.083 li
68.6086 132.358 li
61.1021 132.358 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
61.1021 207.083 mo
68.6086 207.083 li
68.6086 132.358 li
61.1021 132.358 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
89.2513 207.083 mo
96.7578 207.083 li
96.7578 130.943 li
89.2513 130.943 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
89.2513 207.083 mo
96.7578 207.083 li
96.7578 130.943 li
89.2513 130.943 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
117.401 207.083 mo
124.907 207.083 li
124.907 131.111 li
117.401 131.111 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
117.401 207.083 mo
124.907 207.083 li
124.907 131.111 li
117.401 131.111 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
145.55 207.083 mo
153.056 207.083 li
153.056 136.259 li
145.55 136.259 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
145.55 207.083 mo
153.056 207.083 li
153.056 136.259 li
145.55 136.259 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
173.699 207.083 mo
181.206 207.083 li
181.206 137.831 li
173.699 137.831 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
173.699 207.083 mo
181.206 207.083 li
181.206 137.831 li
173.699 137.831 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
201.848 207.083 mo
209.355 207.083 li
209.355 131.724 li
201.848 131.724 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
201.848 207.083 mo
209.355 207.083 li
209.355 131.724 li
201.848 131.724 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
229.998 207.083 mo
237.504 207.083 li
237.504 133.655 li
229.998 133.655 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
229.998 207.083 mo
237.504 207.083 li
237.504 133.655 li
229.998 133.655 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
258.147 207.083 mo
265.653 207.083 li
265.653 153.211 li
258.147 153.211 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.147 207.083 mo
265.653 207.083 li
265.653 153.211 li
258.147 153.211 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
286.296 207.083 mo
293.803 207.083 li
293.803 130.422 li
286.296 130.422 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
286.296 207.083 mo
293.803 207.083 li
293.803 130.422 li
286.296 130.422 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
314.445 207.083 mo
321.952 207.083 li
321.952 129.874 li
314.445 129.874 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
314.445 207.083 mo
321.952 207.083 li
321.952 129.874 li
314.445 129.874 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
342.595 207.083 mo
350.101 207.083 li
350.101 129.92 li
342.595 129.92 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
342.595 207.083 mo
350.101 207.083 li
350.101 129.92 li
342.595 129.92 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 207.083 mo
394.483 207.083 li
394.483 126.014 li
37.3629 126.014 li
cp
clp
370.744 207.083 mo
378.25 207.083 li
378.25 136.166 li
370.744 136.166 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
370.744 207.083 mo
378.25 207.083 li
378.25 136.166 li
370.744 136.166 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
-20.2371 397.56 mo
440.563 397.56 li
440.563 -4.19952 li
-20.2371 -4.19952 li
cp
clp
64.8554 207.083 mo
64.8554 210.583 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.8554 207.083 mo
64.8554 210.583 li
@
64.8557 215.037 mo
64.3457 215.037 63.9657 215.287 63.7057 215.787 cv
63.4457 216.287 63.3257 217.037 63.3257 218.037 cv
63.3257 219.037 63.4457 219.787 63.7057 220.287 cv
63.9657 220.787 64.3457 221.037 64.8557 221.037 cv
65.3657 221.037 65.7457 220.787 66.0057 220.287 cv
66.2557 219.787 66.3857 219.037 66.3857 218.037 cv
66.3857 217.037 66.2557 216.287 66.0057 215.787 cv
65.7457 215.287 65.3657 215.037 64.8557 215.037 cv
64.8557 214.257 mo
65.6657 214.257 66.2857 214.587 66.7257 215.227 cv
67.1557 215.877 67.3757 216.817 67.3757 218.037 cv
67.3757 219.267 67.1557 220.207 66.7257 220.847 cv
66.2857 221.487 65.6657 221.807 64.8557 221.807 cv
64.0357 221.807 63.4057 221.487 62.9757 220.847 cv
62.5457 220.207 62.3357 219.267 62.3357 218.037 cv
62.3357 216.817 62.5457 215.877 62.9757 215.227 cv
63.4057 214.587 64.0357 214.257 64.8557 214.257 cv
f
93.0046 207.083 mo
93.0046 210.583 li
f
93.0046 207.083 mo
93.0046 210.583 li
@
91.0649 220.847 mo
92.6749 220.847 li
92.6749 215.287 li
90.9249 215.637 li
90.9249 214.737 li
92.6649 214.387 li
93.6549 214.387 li
93.6549 220.847 li
95.2649 220.847 li
95.2649 221.677 li
91.0649 221.677 li
91.0649 220.847 li
f
121.154 207.083 mo
121.154 210.583 li
f
121.154 207.083 mo
121.154 210.583 li
@
119.894 220.847 mo
123.334 220.847 li
123.334 221.677 li
118.704 221.677 li
118.704 220.847 li
119.074 220.467 119.584 219.947 120.234 219.287 cv
120.874 218.637 121.284 218.217 121.454 218.027 cv
121.774 217.677 121.994 217.377 122.114 217.127 cv
122.234 216.887 122.304 216.637 122.304 216.397 cv
122.304 216.017 122.164 215.697 121.894 215.457 cv
121.624 215.217 121.274 215.087 120.834 215.087 cv
120.524 215.087 120.194 215.147 119.854 215.247 cv
119.514 215.357 119.144 215.517 118.754 215.737 cv
118.754 214.737 li
119.154 214.577 119.524 214.457 119.864 214.377 cv
120.204 214.297 120.524 214.257 120.814 214.257 cv
121.564 214.257 122.164 214.447 122.614 214.827 cv
123.064 215.207 123.294 215.707 123.294 216.337 cv
123.294 216.637 123.234 216.927 123.124 217.187 cv
123.014 217.457 122.814 217.777 122.514 218.137 cv
122.434 218.237 122.174 218.507 121.734 218.957 cv
121.294 219.407 120.684 220.037 119.894 220.847 cv
f
149.303 207.083 mo
149.303 210.583 li
f
149.303 207.083 mo
149.303 210.583 li
@
150.183 217.747 mo
150.653 217.847 151.023 218.057 151.283 218.377 cv
151.543 218.697 151.683 219.097 151.683 219.557 cv
151.683 220.277 151.433 220.837 150.943 221.227 cv
150.443 221.617 149.743 221.807 148.833 221.807 cv
148.523 221.807 148.203 221.777 147.883 221.717 cv
147.563 221.667 147.223 221.577 146.883 221.457 cv
146.883 220.507 li
147.153 220.667 147.453 220.787 147.783 220.867 cv
148.103 220.947 148.443 220.987 148.803 220.987 cv
149.423 220.987 149.893 220.867 150.213 220.627 cv
150.533 220.387 150.703 220.027 150.703 219.557 cv
150.703 219.137 150.553 218.797 150.253 218.557 cv
149.953 218.317 149.533 218.187 148.993 218.187 cv
148.143 218.187 li
148.143 217.377 li
149.033 217.377 li
149.513 217.377 149.883 217.287 150.143 217.087 cv
150.403 216.897 150.533 216.617 150.533 216.247 cv
150.533 215.877 150.393 215.587 150.133 215.387 cv
149.863 215.187 149.483 215.087 148.993 215.087 cv
148.723 215.087 148.433 215.117 148.123 215.177 cv
147.813 215.237 147.473 215.327 147.103 215.447 cv
147.103 214.567 li
147.473 214.467 147.823 214.387 148.153 214.337 cv
148.473 214.287 148.783 214.257 149.083 214.257 cv
149.823 214.257 150.413 214.427 150.853 214.767 cv
151.293 215.107 151.513 215.567 151.513 216.147 cv
151.513 216.547 151.393 216.887 151.163 217.167 cv
150.933 217.447 150.603 217.647 150.183 217.747 cv
f
177.452 207.083 mo
177.452 210.583 li
f
177.452 207.083 mo
177.452 210.583 li
@
178.053 215.247 mo
175.563 219.137 li
178.053 219.137 li
178.053 215.247 li
177.793 214.387 mo
179.033 214.387 li
179.033 219.137 li
180.073 219.137 li
180.073 219.957 li
179.033 219.957 li
179.033 221.677 li
178.053 221.677 li
178.053 219.957 li
174.763 219.957 li
174.763 219.007 li
177.793 214.387 li
f
205.602 207.083 mo
205.602 210.583 li
f
205.602 207.083 mo
205.602 210.583 li
@
203.502 214.387 mo
207.372 214.387 li
207.372 215.217 li
204.402 215.217 li
204.402 217.007 li
204.542 216.957 204.692 216.917 204.832 216.897 cv
204.972 216.877 205.122 216.857 205.262 216.857 cv
206.072 216.857 206.712 217.087 207.192 217.527 cv
207.672 217.977 207.912 218.577 207.912 219.337 cv
207.912 220.127 207.662 220.737 207.172 221.167 cv
206.682 221.597 205.992 221.807 205.112 221.807 cv
204.802 221.807 204.492 221.777 204.172 221.737 cv
203.852 221.687 203.532 221.617 203.192 221.507 cv
203.192 220.517 li
203.482 220.677 203.782 220.797 204.102 220.877 cv
204.412 220.957 204.742 220.987 205.092 220.987 cv
205.652 220.987 206.102 220.847 206.432 220.547 cv
206.752 220.247 206.922 219.847 206.922 219.337 cv
206.922 218.837 206.752 218.437 206.432 218.137 cv
206.102 217.837 205.652 217.687 205.092 217.687 cv
204.832 217.687 204.562 217.717 204.302 217.777 cv
204.042 217.837 203.772 217.927 203.502 218.047 cv
203.502 214.387 li
f
233.751 207.083 mo
233.751 210.583 li
f
233.751 207.083 mo
233.751 210.583 li
@
233.871 217.637 mo
233.431 217.637 233.081 217.797 232.821 218.097 cv
232.561 218.397 232.431 218.817 232.431 219.337 cv
232.431 219.867 232.561 220.287 232.821 220.587 cv
233.081 220.887 233.431 221.037 233.871 221.037 cv
234.311 221.037 234.661 220.887 234.921 220.587 cv
235.181 220.287 235.311 219.867 235.311 219.337 cv
235.311 218.817 235.181 218.397 234.921 218.097 cv
234.661 217.797 234.311 217.637 233.871 217.637 cv
235.831 214.547 mo
235.831 215.447 li
235.581 215.327 235.331 215.237 235.081 215.177 cv
234.821 215.117 234.571 215.087 234.331 215.087 cv
233.671 215.087 233.171 215.307 232.831 215.747 cv
232.491 216.187 232.291 216.857 232.251 217.737 cv
232.441 217.457 232.681 217.237 232.971 217.087 cv
233.261 216.937 233.581 216.857 233.931 216.857 cv
234.661 216.857 235.241 217.087 235.661 217.527 cv
236.081 217.967 236.301 218.577 236.301 219.337 cv
236.301 220.087 236.071 220.687 235.631 221.137 cv
235.191 221.587 234.601 221.807 233.871 221.807 cv
233.031 221.807 232.381 221.487 231.941 220.847 cv
231.491 220.207 231.271 219.267 231.271 218.037 cv
231.271 216.887 231.541 215.967 232.091 215.287 cv
232.631 214.607 233.371 214.257 234.291 214.257 cv
234.531 214.257 234.781 214.287 235.041 214.327 cv
235.291 214.377 235.551 214.447 235.831 214.547 cv
f
261.9 207.083 mo
261.9 210.583 li
f
261.9 207.083 mo
261.9 210.583 li
@
259.54 214.387 mo
264.23 214.387 li
264.23 214.807 li
261.58 221.677 li
260.55 221.677 li
263.04 215.217 li
259.54 215.217 li
259.54 214.387 li
f
290.049 207.083 mo
290.049 210.583 li
f
290.049 207.083 mo
290.049 210.583 li
@
290.05 218.217 mo
289.58 218.217 289.21 218.347 288.94 218.597 cv
288.67 218.847 288.54 219.187 288.54 219.627 cv
288.54 220.067 288.67 220.417 288.94 220.667 cv
289.21 220.917 289.58 221.037 290.05 221.037 cv
290.51 221.037 290.88 220.917 291.15 220.657 cv
291.42 220.407 291.56 220.067 291.56 219.627 cv
291.56 219.187 291.42 218.847 291.16 218.597 cv
290.89 218.347 290.52 218.217 290.05 218.217 cv
289.06 217.797 mo
288.64 217.697 288.31 217.497 288.07 217.207 cv
287.83 216.917 287.72 216.567 287.72 216.147 cv
287.72 215.567 287.92 215.107 288.34 214.767 cv
288.75 214.427 289.32 214.257 290.05 214.257 cv
290.77 214.257 291.34 214.427 291.76 214.767 cv
292.17 215.107 292.38 215.567 292.38 216.147 cv
292.38 216.567 292.26 216.917 292.02 217.207 cv
291.78 217.497 291.46 217.697 291.04 217.797 cv
291.51 217.907 291.88 218.127 292.15 218.447 cv
292.41 218.767 292.55 219.167 292.55 219.627 cv
292.55 220.337 292.33 220.877 291.9 221.247 cv
291.46 221.627 290.85 221.807 290.05 221.807 cv
289.24 221.807 288.62 221.627 288.19 221.247 cv
287.76 220.877 287.55 220.337 287.55 219.627 cv
287.55 219.167 287.68 218.767 287.95 218.447 cv
288.21 218.127 288.58 217.907 289.06 217.797 cv
288.7 216.237 mo
288.7 216.617 288.81 216.917 289.05 217.127 cv
289.29 217.337 289.62 217.437 290.05 217.437 cv
290.47 217.437 290.8 217.337 291.04 217.127 cv
291.28 216.917 291.4 216.617 291.4 216.237 cv
291.4 215.857 291.28 215.567 291.04 215.357 cv
290.8 215.147 290.47 215.037 290.05 215.037 cv
289.62 215.037 289.29 215.147 289.05 215.357 cv
288.81 215.567 288.7 215.857 288.7 216.237 cv
f
318.199 207.083 mo
318.199 210.583 li
f
318.199 207.083 mo
318.199 210.583 li
@
316.119 221.527 mo
316.119 220.627 li
316.359 220.747 316.609 220.837 316.869 220.897 cv
317.119 220.957 317.369 220.987 317.619 220.987 cv
318.259 220.987 318.759 220.777 319.099 220.337 cv
319.439 219.897 319.639 219.237 319.699 218.337 cv
319.499 218.617 319.259 218.837 318.979 218.987 cv
318.689 219.137 318.369 219.207 318.019 219.207 cv
317.279 219.207 316.699 218.987 316.279 218.547 cv
315.859 218.107 315.649 217.507 315.649 216.737 cv
315.649 215.997 315.869 215.397 316.309 214.937 cv
316.749 214.487 317.339 214.257 318.079 214.257 cv
318.919 214.257 319.569 214.587 320.009 215.227 cv
320.449 215.877 320.679 216.817 320.679 218.037 cv
320.679 219.197 320.399 220.107 319.859 220.787 cv
319.309 221.467 318.579 221.807 317.659 221.807 cv
317.409 221.807 317.159 221.777 316.909 221.737 cv
316.649 221.697 316.389 221.627 316.119 221.527 cv
318.079 218.437 mo
318.519 218.437 318.869 218.287 319.129 217.987 cv
319.389 217.687 319.519 217.267 319.519 216.737 cv
319.519 216.217 319.389 215.797 319.129 215.497 cv
318.869 215.197 318.519 215.037 318.079 215.037 cv
317.639 215.037 317.289 215.197 317.029 215.497 cv
316.769 215.797 316.639 216.217 316.639 216.737 cv
316.639 217.267 316.769 217.687 317.029 217.987 cv
317.289 218.287 317.639 218.437 318.079 218.437 cv
f
346.348 207.083 mo
346.348 210.583 li
f
346.348 207.083 mo
346.348 210.583 li
@
341.228 220.847 mo
342.838 220.847 li
342.838 215.287 li
341.088 215.637 li
341.088 214.737 li
342.828 214.387 li
343.818 214.387 li
343.818 220.847 li
345.428 220.847 li
345.428 221.677 li
341.228 221.677 li
341.228 220.847 li
f
349.528 215.037 mo
349.018 215.037 348.638 215.287 348.378 215.787 cv
348.118 216.287 347.998 217.037 347.998 218.037 cv
347.998 219.037 348.118 219.787 348.378 220.287 cv
348.638 220.787 349.018 221.037 349.528 221.037 cv
350.038 221.037 350.418 220.787 350.678 220.287 cv
350.928 219.787 351.058 219.037 351.058 218.037 cv
351.058 217.037 350.928 216.287 350.678 215.787 cv
350.418 215.287 350.038 215.037 349.528 215.037 cv
349.528 214.257 mo
350.338 214.257 350.958 214.587 351.398 215.227 cv
351.828 215.877 352.048 216.817 352.048 218.037 cv
352.048 219.267 351.828 220.207 351.398 220.847 cv
350.958 221.487 350.338 221.807 349.528 221.807 cv
348.708 221.807 348.078 221.487 347.648 220.847 cv
347.218 220.207 347.008 219.267 347.008 218.037 cv
347.008 216.817 347.218 215.877 347.648 215.227 cv
348.078 214.587 348.708 214.257 349.528 214.257 cv
f
374.497 207.083 mo
374.497 210.583 li
f
374.497 207.083 mo
374.497 210.583 li
@
369.378 220.847 mo
370.988 220.847 li
370.988 215.287 li
369.238 215.637 li
369.238 214.737 li
370.978 214.387 li
371.968 214.387 li
371.968 220.847 li
373.578 220.847 li
373.578 221.677 li
369.378 221.677 li
369.378 220.847 li
f
375.738 220.847 mo
377.348 220.847 li
377.348 215.287 li
375.598 215.637 li
375.598 214.737 li
377.338 214.387 li
378.328 214.387 li
378.328 220.847 li
379.938 220.847 li
379.938 221.677 li
375.738 221.677 li
375.738 220.847 li
f
189.898 227.965 mo
190.591 227.965 li
190.591 230.058 li
193.097 230.058 li
193.097 227.965 li
193.79 227.965 li
193.79 233.068 li
193.097 233.068 li
193.097 230.639 li
190.591 230.639 li
190.591 233.068 li
189.898 233.068 li
189.898 227.965 li
f
194.462 227.965 mo
198.774 227.965 li
198.774 228.546 li
196.961 228.546 li
196.961 233.068 li
196.268 233.068 li
196.268 228.546 li
194.462 228.546 li
194.462 227.965 li
f
198.739 227.965 mo
203.051 227.965 li
203.051 228.546 li
201.238 228.546 li
201.238 233.068 li
200.545 233.068 li
200.545 228.546 li
198.739 228.546 li
198.739 227.965 li
f
204.409 228.532 mo
204.409 230.45 li
205.277 230.45 li
205.599 230.45 205.844 230.373 206.019 230.205 cv
206.194 230.037 206.285 229.799 206.285 229.491 cv
206.285 229.183 206.194 228.952 206.019 228.784 cv
205.844 228.616 205.599 228.532 205.277 228.532 cv
204.409 228.532 li
203.716 227.965 mo
205.277 227.965 li
205.844 227.965 206.278 228.098 206.572 228.357 cv
206.866 228.616 207.013 228.994 207.013 229.491 cv
207.013 229.995 206.866 230.38 206.572 230.632 cv
206.278 230.891 205.844 231.017 205.277 231.017 cv
204.409 231.017 li
204.409 233.068 li
203.716 233.068 li
203.716 227.965 li
f
210.996 228.133 mo
210.996 228.805 li
210.73 228.679 210.485 228.588 210.254 228.525 cv
210.016 228.469 209.792 228.434 209.582 228.434 cv
209.204 228.434 208.91 228.511 208.707 228.651 cv
208.504 228.798 208.406 229.008 208.406 229.274 cv
208.406 229.498 208.469 229.673 208.609 229.785 cv
208.742 229.904 209.001 229.995 209.379 230.065 cv
209.799 230.149 li
210.31 230.247 210.688 230.422 210.933 230.667 cv
211.178 230.919 211.304 231.248 211.304 231.661 cv
211.304 232.158 211.136 232.529 210.807 232.781 cv
210.471 233.033 209.988 233.159 209.351 233.159 cv
209.106 233.159 208.847 233.131 208.574 233.082 cv
208.301 233.033 208.021 232.956 207.734 232.844 cv
207.734 232.13 li
208.014 232.291 208.287 232.41 208.553 232.487 cv
208.819 232.571 209.085 232.606 209.351 232.606 cv
209.743 232.606 210.044 232.529 210.261 232.375 cv
210.471 232.221 210.583 232.004 210.583 231.71 cv
210.583 231.458 210.506 231.262 210.352 231.122 cv
210.198 230.982 209.946 230.877 209.596 230.807 cv
209.176 230.723 li
208.658 230.625 208.287 230.464 208.056 230.24 cv
207.825 230.023 207.713 229.722 207.713 229.33 cv
207.713 228.882 207.867 228.525 208.189 228.266 cv
208.504 228.007 208.945 227.874 209.505 227.874 cv
209.743 227.874 209.981 227.895 210.233 227.937 cv
210.478 227.979 210.73 228.049 210.996 228.133 cv
f
217.023 229.351 mo
217.023 229.946 li
216.841 229.862 216.659 229.792 216.47 229.743 cv
216.274 229.701 216.078 229.673 215.875 229.673 cv
215.56 229.673 215.322 229.722 215.168 229.82 cv
215.014 229.918 214.937 230.058 214.937 230.247 cv
214.937 230.394 214.993 230.506 215.105 230.59 cv
215.217 230.674 215.441 230.758 215.777 230.828 cv
215.994 230.877 li
216.442 230.975 216.757 231.115 216.946 231.283 cv
217.128 231.458 217.226 231.703 217.226 232.011 cv
217.226 232.368 217.086 232.648 216.806 232.851 cv
216.526 233.061 216.134 233.159 215.644 233.159 cv
215.434 233.159 215.224 233.138 215 233.103 cv
214.776 233.068 214.545 233.012 214.3 232.928 cv
214.3 232.277 li
214.531 232.403 214.762 232.494 214.986 232.55 cv
215.21 232.613 215.434 232.641 215.658 232.641 cv
215.952 232.641 216.183 232.592 216.344 232.494 cv
216.498 232.396 216.582 232.249 216.582 232.06 cv
216.582 231.892 216.519 231.759 216.407 231.668 cv
216.295 231.577 216.043 231.486 215.651 231.402 cv
215.434 231.353 li
215.042 231.269 214.755 231.143 214.587 230.975 cv
214.412 230.807 214.328 230.576 214.328 230.275 cv
214.328 229.918 214.454 229.638 214.706 229.442 cv
214.958 229.246 215.322 229.148 215.798 229.148 cv
216.029 229.148 216.246 229.169 216.456 229.204 cv
216.659 229.239 216.848 229.288 217.023 229.351 cv
f
221.503 230.996 mo
221.503 231.304 li
218.612 231.304 li
218.64 231.738 218.766 232.074 219.004 232.298 cv
219.235 232.522 219.557 232.634 219.977 232.634 cv
220.215 232.634 220.453 232.606 220.677 232.55 cv
220.901 232.494 221.132 232.403 221.356 232.277 cv
221.356 232.872 li
221.132 232.97 220.901 233.047 220.663 233.089 cv
220.425 233.131 220.18 233.159 219.942 233.159 cv
219.326 233.159 218.843 232.984 218.486 232.634 cv
218.129 232.284 217.954 231.801 217.954 231.192 cv
217.954 230.569 218.122 230.072 218.458 229.701 cv
218.794 229.337 219.256 229.148 219.83 229.148 cv
220.348 229.148 220.754 229.316 221.055 229.645 cv
221.349 229.981 221.503 230.429 221.503 230.996 cv
220.873 230.814 mo
220.866 230.471 220.768 230.198 220.586 229.988 cv
220.397 229.785 220.145 229.68 219.837 229.68 cv
219.487 229.68 219.207 229.785 218.997 229.981 cv
218.787 230.177 218.661 230.457 218.633 230.814 cv
220.873 230.814 li
f
224.751 229.827 mo
224.681 229.785 224.604 229.757 224.52 229.736 cv
224.436 229.722 224.345 229.708 224.247 229.708 cv
223.89 229.708 223.617 229.827 223.428 230.058 cv
223.232 230.289 223.141 230.618 223.141 231.052 cv
223.141 233.068 li
222.511 233.068 li
222.511 229.239 li
223.141 229.239 li
223.141 229.834 li
223.267 229.603 223.442 229.428 223.652 229.316 cv
223.862 229.204 224.121 229.148 224.429 229.148 cv
224.471 229.148 224.52 229.155 224.576 229.155 cv
224.625 229.162 224.681 229.169 224.751 229.183 cv
224.751 229.827 li
f
224.961 229.239 mo
225.626 229.239 li
226.823 232.452 li
228.02 229.239 li
228.685 229.239 li
227.25 233.068 li
226.396 233.068 li
224.961 229.239 li
f
229.553 229.239 mo
230.183 229.239 li
230.183 233.068 li
229.553 233.068 li
229.553 229.239 li
229.553 227.748 mo
230.183 227.748 li
230.183 228.546 li
229.553 228.546 li
229.553 227.748 li
f
234.257 229.386 mo
234.257 229.974 li
234.075 229.876 233.9 229.806 233.718 229.757 cv
233.536 229.708 233.361 229.68 233.179 229.68 cv
232.773 229.68 232.451 229.813 232.227 230.072 cv
232.003 230.331 231.891 230.695 231.891 231.157 cv
231.891 231.626 232.003 231.99 232.227 232.249 cv
232.451 232.508 232.773 232.634 233.179 232.634 cv
233.361 232.634 233.536 232.613 233.718 232.564 cv
233.9 232.515 234.075 232.438 234.257 232.34 cv
234.257 232.921 li
234.075 233.005 233.893 233.068 233.711 233.103 cv
233.522 233.138 233.319 233.159 233.109 233.159 cv
232.535 233.159 232.073 232.984 231.737 232.62 cv
231.394 232.263 231.226 231.773 231.226 231.157 cv
231.226 230.534 231.394 230.044 231.737 229.687 cv
232.08 229.33 232.549 229.148 233.151 229.148 cv
233.347 229.148 233.536 229.169 233.718 229.211 cv
233.9 229.253 234.082 229.309 234.257 229.386 cv
f
238.625 230.996 mo
238.625 231.304 li
235.734 231.304 li
235.762 231.738 235.888 232.074 236.126 232.298 cv
236.357 232.522 236.679 232.634 237.099 232.634 cv
237.337 232.634 237.575 232.606 237.799 232.55 cv
238.023 232.494 238.254 232.403 238.478 232.277 cv
238.478 232.872 li
238.254 232.97 238.023 233.047 237.785 233.089 cv
237.547 233.131 237.302 233.159 237.064 233.159 cv
236.448 233.159 235.965 232.984 235.608 232.634 cv
235.251 232.284 235.076 231.801 235.076 231.192 cv
235.076 230.569 235.244 230.072 235.58 229.701 cv
235.916 229.337 236.378 229.148 236.952 229.148 cv
237.47 229.148 237.876 229.316 238.177 229.645 cv
238.471 229.981 238.625 230.429 238.625 230.996 cv
237.995 230.814 mo
237.988 230.471 237.89 230.198 237.708 229.988 cv
237.519 229.785 237.267 229.68 236.959 229.68 cv
236.609 229.68 236.329 229.785 236.119 229.981 cv
235.909 230.177 235.783 230.457 235.755 230.814 cv
237.995 230.814 li
f
242.097 229.351 mo
242.097 229.946 li
241.915 229.862 241.733 229.792 241.544 229.743 cv
241.348 229.701 241.152 229.673 240.949 229.673 cv
240.634 229.673 240.396 229.722 240.242 229.82 cv
240.088 229.918 240.011 230.058 240.011 230.247 cv
240.011 230.394 240.067 230.506 240.179 230.59 cv
240.291 230.674 240.515 230.758 240.851 230.828 cv
241.068 230.877 li
241.516 230.975 241.831 231.115 242.02 231.283 cv
242.202 231.458 242.3 231.703 242.3 232.011 cv
242.3 232.368 242.16 232.648 241.88 232.851 cv
241.6 233.061 241.208 233.159 240.718 233.159 cv
240.508 233.159 240.298 233.138 240.074 233.103 cv
239.85 233.068 239.619 233.012 239.374 232.928 cv
239.374 232.277 li
239.605 232.403 239.836 232.494 240.06 232.55 cv
240.284 232.613 240.508 232.641 240.732 232.641 cv
241.026 232.641 241.257 232.592 241.418 232.494 cv
241.572 232.396 241.656 232.249 241.656 232.06 cv
241.656 231.892 241.593 231.759 241.481 231.668 cv
241.369 231.577 241.117 231.486 240.725 231.402 cv
240.508 231.353 li
240.116 231.269 239.829 231.143 239.661 230.975 cv
239.486 230.807 239.402 230.576 239.402 230.275 cv
239.402 229.918 239.528 229.638 239.78 229.442 cv
240.032 229.246 240.396 229.148 240.872 229.148 cv
241.103 229.148 241.32 229.169 241.53 229.204 cv
241.733 229.239 241.922 229.288 242.097 229.351 cv
f
213.14 235.583 mo
212.832 236.115 212.608 236.633 212.461 237.144 cv
212.307 237.655 212.237 238.173 212.237 238.698 cv
212.237 239.23 212.307 239.748 212.461 240.259 cv
212.608 240.777 212.832 241.288 213.14 241.813 cv
212.594 241.813 li
212.251 241.274 211.992 240.756 211.824 240.238 cv
211.656 239.72 211.572 239.209 211.572 238.698 cv
211.572 238.194 211.656 237.683 211.824 237.165 cv
211.992 236.647 212.244 236.122 212.594 235.583 cv
213.14 235.583 li
f
217.109 238.985 mo
217.109 238.523 217.011 238.166 216.822 237.9 cv
216.626 237.634 216.367 237.501 216.038 237.501 cv
215.702 237.501 215.443 237.634 215.254 237.9 cv
215.058 238.166 214.967 238.523 214.967 238.985 cv
214.967 239.447 215.058 239.811 215.254 240.077 cv
215.443 240.343 215.702 240.469 216.038 240.469 cv
216.367 240.469 216.626 240.343 216.822 240.077 cv
217.011 239.811 217.109 239.447 217.109 238.985 cv
214.967 237.648 mo
215.093 237.424 215.261 237.256 215.464 237.144 cv
215.667 237.032 215.912 236.976 216.192 236.976 cv
216.654 236.976 217.032 237.165 217.326 237.529 cv
217.613 237.9 217.76 238.383 217.76 238.985 cv
217.76 239.587 217.613 240.077 217.326 240.441 cv
217.032 240.805 216.654 240.987 216.192 240.987 cv
215.912 240.987 215.667 240.931 215.464 240.826 cv
215.261 240.721 215.093 240.553 214.967 240.322 cv
214.967 240.896 li
214.337 240.896 li
214.337 235.576 li
214.967 235.576 li
214.967 237.648 li
f
218.705 235.583 mo
219.251 235.583 li
219.587 236.122 219.846 236.647 220.014 237.165 cv
220.182 237.683 220.273 238.194 220.273 238.698 cv
220.273 239.209 220.182 239.72 220.014 240.238 cv
219.846 240.756 219.587 241.274 219.251 241.813 cv
218.705 241.813 li
219.006 241.288 219.23 240.777 219.384 240.259 cv
219.531 239.748 219.608 239.23 219.608 238.698 cv
219.608 238.173 219.531 237.655 219.384 237.144 cv
219.23 236.633 219.006 236.115 218.705 235.583 cv
f
37.3629 207.083 mo
33.8629 207.083 li
f
37.3629 207.083 mo
33.8629 207.083 li
@
17.6367 204.24 mo
17.1267 204.24 16.7467 204.49 16.4867 204.99 cv
16.2267 205.49 16.1067 206.24 16.1067 207.24 cv
16.1067 208.24 16.2267 208.99 16.4867 209.49 cv
16.7467 209.99 17.1267 210.24 17.6367 210.24 cv
18.1467 210.24 18.5267 209.99 18.7867 209.49 cv
19.0367 208.99 19.1667 208.24 19.1667 207.24 cv
19.1667 206.24 19.0367 205.49 18.7867 204.99 cv
18.5267 204.49 18.1467 204.24 17.6367 204.24 cv
17.6367 203.46 mo
18.4467 203.46 19.0667 203.79 19.5067 204.43 cv
19.9367 205.08 20.1567 206.02 20.1567 207.24 cv
20.1567 208.47 19.9367 209.41 19.5067 210.05 cv
19.0667 210.69 18.4467 211.01 17.6367 211.01 cv
16.8167 211.01 16.1867 210.69 15.7567 210.05 cv
15.3267 209.41 15.1167 208.47 15.1167 207.24 cv
15.1167 206.02 15.3267 205.08 15.7567 204.43 cv
16.1867 203.79 16.8167 203.46 17.6367 203.46 cv
f
21.8867 209.64 mo
22.9167 209.64 li
22.9167 210.88 li
21.8867 210.88 li
21.8867 209.64 li
f
27.1767 204.24 mo
26.6667 204.24 26.2867 204.49 26.0267 204.99 cv
25.7667 205.49 25.6467 206.24 25.6467 207.24 cv
25.6467 208.24 25.7667 208.99 26.0267 209.49 cv
26.2867 209.99 26.6667 210.24 27.1767 210.24 cv
27.6867 210.24 28.0667 209.99 28.3267 209.49 cv
28.5767 208.99 28.7067 208.24 28.7067 207.24 cv
28.7067 206.24 28.5767 205.49 28.3267 204.99 cv
28.0667 204.49 27.6867 204.24 27.1767 204.24 cv
27.1767 203.46 mo
27.9867 203.46 28.6067 203.79 29.0467 204.43 cv
29.4767 205.08 29.6967 206.02 29.6967 207.24 cv
29.6967 208.47 29.4767 209.41 29.0467 210.05 cv
28.6067 210.69 27.9867 211.01 27.1767 211.01 cv
26.3567 211.01 25.7267 210.69 25.2967 210.05 cv
24.8667 209.41 24.6567 208.47 24.6567 207.24 cv
24.6567 206.02 24.8667 205.08 25.2967 204.43 cv
25.7267 203.79 26.3567 203.46 27.1767 203.46 cv
f
37.3629 168.278 mo
33.8629 168.278 li
f
37.3629 168.278 mo
33.8629 168.278 li
@
17.6367 165.435 mo
17.1267 165.435 16.7467 165.685 16.4867 166.185 cv
16.2267 166.685 16.1067 167.435 16.1067 168.435 cv
16.1067 169.435 16.2267 170.185 16.4867 170.685 cv
16.7467 171.185 17.1267 171.435 17.6367 171.435 cv
18.1467 171.435 18.5267 171.185 18.7867 170.685 cv
19.0367 170.185 19.1667 169.435 19.1667 168.435 cv
19.1667 167.435 19.0367 166.685 18.7867 166.185 cv
18.5267 165.685 18.1467 165.435 17.6367 165.435 cv
17.6367 164.655 mo
18.4467 164.655 19.0667 164.985 19.5067 165.625 cv
19.9367 166.275 20.1567 167.215 20.1567 168.435 cv
20.1567 169.665 19.9367 170.605 19.5067 171.245 cv
19.0667 171.885 18.4467 172.205 17.6367 172.205 cv
16.8167 172.205 16.1867 171.885 15.7567 171.245 cv
15.3267 170.605 15.1167 169.665 15.1167 168.435 cv
15.1167 167.215 15.3267 166.275 15.7567 165.625 cv
16.1867 164.985 16.8167 164.655 17.6367 164.655 cv
f
21.8867 170.835 mo
22.9167 170.835 li
22.9167 172.075 li
21.8867 172.075 li
21.8867 170.835 li
f
25.0767 164.785 mo
28.9467 164.785 li
28.9467 165.615 li
25.9767 165.615 li
25.9767 167.405 li
26.1167 167.355 26.2667 167.315 26.4067 167.295 cv
26.5467 167.275 26.6967 167.255 26.8367 167.255 cv
27.6467 167.255 28.2867 167.485 28.7667 167.925 cv
29.2467 168.375 29.4867 168.975 29.4867 169.735 cv
29.4867 170.525 29.2367 171.135 28.7467 171.565 cv
28.2567 171.995 27.5667 172.205 26.6867 172.205 cv
26.3767 172.205 26.0667 172.175 25.7467 172.135 cv
25.4267 172.085 25.1067 172.015 24.7667 171.905 cv
24.7667 170.915 li
25.0567 171.075 25.3567 171.195 25.6767 171.275 cv
25.9867 171.355 26.3167 171.385 26.6667 171.385 cv
27.2267 171.385 27.6767 171.245 28.0067 170.945 cv
28.3267 170.645 28.4967 170.245 28.4967 169.735 cv
28.4967 169.235 28.3267 168.835 28.0067 168.535 cv
27.6767 168.235 27.2267 168.085 26.6667 168.085 cv
26.4067 168.085 26.1367 168.115 25.8767 168.175 cv
25.6167 168.235 25.3467 168.325 25.0767 168.445 cv
25.0767 164.785 li
f
37.3629 129.474 mo
33.8629 129.474 li
f
37.3629 129.474 mo
33.8629 129.474 li
@
15.6967 132.441 mo
17.3067 132.441 li
17.3067 126.881 li
15.5567 127.231 li
15.5567 126.331 li
17.2967 125.981 li
18.2867 125.981 li
18.2867 132.441 li
19.8967 132.441 li
19.8967 133.271 li
15.6967 133.271 li
15.6967 132.441 li
f
21.8867 132.031 mo
22.9167 132.031 li
22.9167 133.271 li
21.8867 133.271 li
21.8867 132.031 li
f
27.1767 126.631 mo
26.6667 126.631 26.2867 126.881 26.0267 127.381 cv
25.7667 127.881 25.6467 128.631 25.6467 129.631 cv
25.6467 130.631 25.7667 131.381 26.0267 131.881 cv
26.2867 132.381 26.6667 132.631 27.1767 132.631 cv
27.6867 132.631 28.0667 132.381 28.3267 131.881 cv
28.5767 131.381 28.7067 130.631 28.7067 129.631 cv
28.7067 128.631 28.5767 127.881 28.3267 127.381 cv
28.0667 126.881 27.6867 126.631 27.1767 126.631 cv
27.1767 125.851 mo
27.9867 125.851 28.6067 126.181 29.0467 126.821 cv
29.4767 127.471 29.6967 128.411 29.6967 129.631 cv
29.6967 130.861 29.4767 131.801 29.0467 132.441 cv
28.6067 133.081 27.9867 133.401 27.1767 133.401 cv
26.3567 133.401 25.7267 133.081 25.2967 132.441 cv
24.8667 131.801 24.6567 130.861 24.6567 129.631 cv
24.6567 128.411 24.8667 127.471 25.2967 126.821 cv
25.7267 126.181 26.3567 125.851 27.1767 125.851 cv
f
6.60956 174.05 mo
6.66556 173.903 6.77056 173.756 6.93156 173.616 cv
7.09956 173.476 7.32356 173.336 7.61056 173.196 cv
9.00356 172.496 li
9.00356 173.238 li
7.69456 173.889 li
7.35856 174.057 7.12756 174.225 7.01556 174.379 cv
6.90356 174.54 6.84756 174.757 6.84756 175.03 cv
6.84756 175.779 li
9.00356 175.779 li
9.00356 176.472 li
3.90056 176.472 li
3.90056 174.911 li
3.90056 174.33 4.02656 173.896 4.26456 173.609 cv
4.50956 173.322 4.88056 173.175 5.37056 173.175 cv
5.69256 173.175 5.96556 173.252 6.17556 173.399 cv
6.38556 173.553 6.53256 173.77 6.60956 174.05 cv
4.46756 175.779 mo
6.28056 175.779 li
6.28056 174.911 li
6.28056 174.582 6.20356 174.33 6.04956 174.162 cv
5.89556 173.994 5.67156 173.903 5.37056 173.903 cv
5.07656 173.903 4.85256 173.994 4.69856 174.162 cv
4.54456 174.33 4.46756 174.582 4.46756 174.911 cv
4.46756 175.779 li
f
6.93156 168.359 mo
7.23956 168.359 li
7.23956 171.25 li
7.67356 171.222 8.00956 171.096 8.23356 170.858 cv
8.45756 170.627 8.56956 170.305 8.56956 169.885 cv
8.56956 169.647 8.54156 169.409 8.48556 169.185 cv
8.42956 168.961 8.33856 168.73 8.21256 168.506 cv
8.80756 168.506 li
8.90556 168.73 8.98256 168.961 9.02456 169.199 cv
9.06656 169.437 9.09456 169.682 9.09456 169.92 cv
9.09456 170.536 8.91956 171.019 8.56956 171.376 cv
8.21956 171.733 7.73656 171.908 7.12756 171.908 cv
6.50456 171.908 6.00756 171.74 5.63656 171.404 cv
5.27256 171.068 5.08356 170.606 5.08356 170.032 cv
5.08356 169.514 5.25156 169.108 5.58056 168.807 cv
5.91656 168.513 6.36456 168.359 6.93156 168.359 cv
6.74956 168.989 mo
6.40656 168.996 6.13356 169.094 5.92356 169.276 cv
5.72056 169.465 5.61556 169.717 5.61556 170.025 cv
5.61556 170.375 5.72056 170.655 5.91656 170.865 cv
6.11256 171.075 6.39256 171.201 6.74956 171.229 cv
6.74956 168.989 li
f
5.32156 164.572 mo
5.90956 164.572 li
5.81156 164.754 5.74156 164.929 5.69256 165.111 cv
5.64356 165.293 5.61556 165.468 5.61556 165.65 cv
5.61556 166.056 5.74856 166.378 6.00756 166.602 cv
6.26656 166.826 6.63056 166.938 7.09256 166.938 cv
7.56156 166.938 7.92556 166.826 8.18456 166.602 cv
8.44356 166.378 8.56956 166.056 8.56956 165.65 cv
8.56956 165.468 8.54856 165.293 8.49956 165.111 cv
8.45056 164.929 8.37356 164.754 8.27556 164.572 cv
8.85656 164.572 li
8.94056 164.754 9.00356 164.936 9.03856 165.118 cv
9.07356 165.307 9.09456 165.51 9.09456 165.72 cv
9.09456 166.294 8.91956 166.756 8.55556 167.092 cv
8.19856 167.435 7.70856 167.603 7.09256 167.603 cv
6.46956 167.603 5.97956 167.435 5.62256 167.092 cv
5.26556 166.749 5.08356 166.28 5.08356 165.678 cv
5.08356 165.482 5.10456 165.293 5.14656 165.111 cv
5.18856 164.929 5.24456 164.747 5.32156 164.572 cv
f
7.07856 161.737 mo
7.07856 162.248 7.14156 162.598 7.25356 162.794 cv
7.37256 162.99 7.56856 163.088 7.84856 163.088 cv
8.07256 163.088 8.25456 163.018 8.38056 162.871 cv
8.51356 162.724 8.57656 162.521 8.57656 162.269 cv
8.57656 161.919 8.45756 161.639 8.20556 161.429 cv
7.96056 161.219 7.63156 161.114 7.21856 161.114 cv
7.07856 161.114 li
7.07856 161.737 li
6.81956 160.484 mo
9.00356 160.484 li
9.00356 161.114 li
8.42256 161.114 li
8.66056 161.261 8.82856 161.443 8.93356 161.653 cv
9.03856 161.863 9.09456 162.129 9.09456 162.437 cv
9.09456 162.829 8.98956 163.144 8.77256 163.375 cv
8.55556 163.606 8.26156 163.718 7.89056 163.718 cv
7.46356 163.718 7.14156 163.578 6.91756 163.284 cv
6.70056 162.997 6.58856 162.57 6.58856 161.996 cv
6.58856 161.114 li
6.52556 161.114 li
6.23856 161.114 6.01456 161.212 5.85356 161.401 cv
5.69956 161.59 5.61556 161.856 5.61556 162.199 cv
5.61556 162.423 5.64356 162.633 5.69956 162.843 cv
5.75556 163.053 5.83256 163.249 5.93056 163.438 cv
5.34956 163.438 li
5.26556 163.214 5.19556 162.99 5.15356 162.773 cv
5.11156 162.556 5.08356 162.346 5.08356 162.136 cv
5.08356 161.583 5.23056 161.17 5.51756 160.897 cv
5.80456 160.624 6.23856 160.484 6.81956 160.484 cv
f
3.68356 159.189 mo
3.68356 158.559 li
9.00356 158.559 li
9.00356 159.189 li
3.68356 159.189 li
f
3.68356 157.243 mo
3.68356 156.613 li
9.00356 156.613 li
9.00356 157.243 li
3.68356 157.243 li
f
2 lc
0 lj
37.3629 207.083 mo
37.3629 126.014 li
@
394.483 207.083 mo
394.483 126.014 li
@
37.3629 207.083 mo
394.483 207.083 li
@
37.3629 126.014 mo
394.483 126.014 li
@
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
53.5957 328.687 mo
61.1021 328.687 li
61.1021 252.567 li
53.5957 252.567 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
53.5957 328.687 mo
61.1021 328.687 li
61.1021 252.567 li
53.5957 252.567 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
81.7449 328.687 mo
89.2513 328.687 li
89.2513 253.808 li
81.7449 253.808 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
81.7449 328.687 mo
89.2513 328.687 li
89.2513 253.808 li
81.7449 253.808 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
109.894 328.687 mo
117.401 328.687 li
117.401 255.431 li
109.894 255.431 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
109.894 328.687 mo
117.401 328.687 li
117.401 255.431 li
109.894 255.431 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
138.043 328.687 mo
145.55 328.687 li
145.55 253.163 li
138.043 253.163 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
138.043 328.687 mo
145.55 328.687 li
145.55 253.163 li
138.043 253.163 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
166.193 328.687 mo
173.699 328.687 li
173.699 260.736 li
166.193 260.736 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
166.193 328.687 mo
173.699 328.687 li
173.699 260.736 li
166.193 260.736 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
194.342 328.687 mo
201.848 328.687 li
201.848 253.697 li
194.342 253.697 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
194.342 328.687 mo
201.848 328.687 li
201.848 253.697 li
194.342 253.697 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
222.491 328.687 mo
229.998 328.687 li
229.998 253.833 li
222.491 253.833 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
222.491 328.687 mo
229.998 328.687 li
229.998 253.833 li
222.491 253.833 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
250.64 328.687 mo
258.147 328.687 li
258.147 269.896 li
250.64 269.896 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
250.64 328.687 mo
258.147 328.687 li
258.147 269.896 li
250.64 269.896 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
278.79 328.687 mo
286.296 328.687 li
286.296 251.714 li
278.79 251.714 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
278.79 328.687 mo
286.296 328.687 li
286.296 251.714 li
278.79 251.714 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
306.939 328.687 mo
314.445 328.687 li
314.445 251.612 li
306.939 251.612 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
306.939 328.687 mo
314.445 328.687 li
314.445 251.612 li
306.939 251.612 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
335.088 328.687 mo
342.595 328.687 li
342.595 251.526 li
335.088 251.526 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
335.088 328.687 mo
342.595 328.687 li
342.595 251.526 li
335.088 251.526 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
363.237 328.687 mo
370.744 328.687 li
370.744 260.166 li
363.237 260.166 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
363.237 328.687 mo
370.744 328.687 li
370.744 260.166 li
363.237 260.166 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
61.1021 328.687 mo
68.6086 328.687 li
68.6086 253.616 li
61.1021 253.616 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
61.1021 328.687 mo
68.6086 328.687 li
68.6086 253.616 li
61.1021 253.616 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
89.2513 328.687 mo
96.7578 328.687 li
96.7578 252.084 li
89.2513 252.084 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
89.2513 328.687 mo
96.7578 328.687 li
96.7578 252.084 li
89.2513 252.084 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
117.401 328.687 mo
124.907 328.687 li
124.907 253.915 li
117.401 253.915 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
117.401 328.687 mo
124.907 328.687 li
124.907 253.915 li
117.401 253.915 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
145.55 328.687 mo
153.056 328.687 li
153.056 256.082 li
145.55 256.082 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
145.55 328.687 mo
153.056 328.687 li
153.056 256.082 li
145.55 256.082 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
173.699 328.687 mo
181.206 328.687 li
181.206 263.732 li
173.699 263.732 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
173.699 328.687 mo
181.206 328.687 li
181.206 263.732 li
173.699 263.732 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
201.848 328.687 mo
209.355 328.687 li
209.355 253.109 li
201.848 253.109 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
201.848 328.687 mo
209.355 328.687 li
209.355 253.109 li
201.848 253.109 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
229.998 328.687 mo
237.504 328.687 li
237.504 253.779 li
229.998 253.779 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
229.998 328.687 mo
237.504 328.687 li
237.504 253.779 li
229.998 253.779 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
258.147 328.687 mo
265.653 328.687 li
265.653 277.752 li
258.147 277.752 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.147 328.687 mo
265.653 328.687 li
265.653 277.752 li
258.147 277.752 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
286.296 328.687 mo
293.803 328.687 li
293.803 251.521 li
286.296 251.521 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
286.296 328.687 mo
293.803 328.687 li
293.803 251.521 li
286.296 251.521 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
314.445 328.687 mo
321.952 328.687 li
321.952 251.997 li
314.445 251.997 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
314.445 328.687 mo
321.952 328.687 li
321.952 251.997 li
314.445 251.997 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
342.595 328.687 mo
350.101 328.687 li
350.101 251.478 li
342.595 251.478 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
342.595 328.687 mo
350.101 328.687 li
350.101 251.478 li
342.595 251.478 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
37.3629 328.687 mo
394.483 328.687 li
394.483 247.618 li
37.3629 247.618 li
cp
clp
370.744 328.687 mo
378.25 328.687 li
378.25 260.425 li
370.744 260.425 li
cp
0 .618677 1 .000610361 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
370.744 328.687 mo
378.25 328.687 li
378.25 260.425 li
370.744 260.425 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
-20.2371 397.56 mo
440.563 397.56 li
440.563 -4.19952 li
-20.2371 -4.19952 li
cp
clp
64.8554 328.687 mo
64.8554 332.187 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.8554 328.687 mo
64.8554 332.187 li
@
64.8557 336.641 mo
64.3457 336.641 63.9657 336.891 63.7057 337.391 cv
63.4457 337.891 63.3257 338.641 63.3257 339.641 cv
63.3257 340.641 63.4457 341.391 63.7057 341.891 cv
63.9657 342.391 64.3457 342.641 64.8557 342.641 cv
65.3657 342.641 65.7457 342.391 66.0057 341.891 cv
66.2557 341.391 66.3857 340.641 66.3857 339.641 cv
66.3857 338.641 66.2557 337.891 66.0057 337.391 cv
65.7457 336.891 65.3657 336.641 64.8557 336.641 cv
64.8557 335.861 mo
65.6657 335.861 66.2857 336.191 66.7257 336.831 cv
67.1557 337.481 67.3757 338.421 67.3757 339.641 cv
67.3757 340.871 67.1557 341.811 66.7257 342.451 cv
66.2857 343.091 65.6657 343.411 64.8557 343.411 cv
64.0357 343.411 63.4057 343.091 62.9757 342.451 cv
62.5457 341.811 62.3357 340.871 62.3357 339.641 cv
62.3357 338.421 62.5457 337.481 62.9757 336.831 cv
63.4057 336.191 64.0357 335.861 64.8557 335.861 cv
f
93.0046 328.687 mo
93.0046 332.187 li
f
93.0046 328.687 mo
93.0046 332.187 li
@
91.0649 342.451 mo
92.6749 342.451 li
92.6749 336.891 li
90.9249 337.241 li
90.9249 336.341 li
92.6649 335.991 li
93.6549 335.991 li
93.6549 342.451 li
95.2649 342.451 li
95.2649 343.281 li
91.0649 343.281 li
91.0649 342.451 li
f
121.154 328.687 mo
121.154 332.187 li
f
121.154 328.687 mo
121.154 332.187 li
@
119.894 342.451 mo
123.334 342.451 li
123.334 343.281 li
118.704 343.281 li
118.704 342.451 li
119.074 342.071 119.584 341.551 120.234 340.891 cv
120.874 340.241 121.284 339.821 121.454 339.631 cv
121.774 339.281 121.994 338.981 122.114 338.731 cv
122.234 338.491 122.304 338.241 122.304 338.001 cv
122.304 337.621 122.164 337.301 121.894 337.061 cv
121.624 336.821 121.274 336.691 120.834 336.691 cv
120.524 336.691 120.194 336.751 119.854 336.851 cv
119.514 336.961 119.144 337.121 118.754 337.341 cv
118.754 336.341 li
119.154 336.181 119.524 336.061 119.864 335.981 cv
120.204 335.901 120.524 335.861 120.814 335.861 cv
121.564 335.861 122.164 336.051 122.614 336.431 cv
123.064 336.811 123.294 337.311 123.294 337.941 cv
123.294 338.241 123.234 338.531 123.124 338.791 cv
123.014 339.061 122.814 339.381 122.514 339.741 cv
122.434 339.841 122.174 340.111 121.734 340.561 cv
121.294 341.011 120.684 341.641 119.894 342.451 cv
f
149.303 328.687 mo
149.303 332.187 li
f
149.303 328.687 mo
149.303 332.187 li
@
150.183 339.351 mo
150.653 339.451 151.023 339.661 151.283 339.981 cv
151.543 340.301 151.683 340.701 151.683 341.161 cv
151.683 341.881 151.433 342.441 150.943 342.831 cv
150.443 343.221 149.743 343.411 148.833 343.411 cv
148.523 343.411 148.203 343.381 147.883 343.321 cv
147.563 343.271 147.223 343.181 146.883 343.061 cv
146.883 342.111 li
147.153 342.271 147.453 342.391 147.783 342.471 cv
148.103 342.551 148.443 342.591 148.803 342.591 cv
149.423 342.591 149.893 342.471 150.213 342.231 cv
150.533 341.991 150.703 341.631 150.703 341.161 cv
150.703 340.741 150.553 340.401 150.253 340.161 cv
149.953 339.921 149.533 339.791 148.993 339.791 cv
148.143 339.791 li
148.143 338.981 li
149.033 338.981 li
149.513 338.981 149.883 338.891 150.143 338.691 cv
150.403 338.501 150.533 338.221 150.533 337.851 cv
150.533 337.481 150.393 337.191 150.133 336.991 cv
149.863 336.791 149.483 336.691 148.993 336.691 cv
148.723 336.691 148.433 336.721 148.123 336.781 cv
147.813 336.841 147.473 336.931 147.103 337.051 cv
147.103 336.171 li
147.473 336.071 147.823 335.991 148.153 335.941 cv
148.473 335.891 148.783 335.861 149.083 335.861 cv
149.823 335.861 150.413 336.031 150.853 336.371 cv
151.293 336.711 151.513 337.171 151.513 337.751 cv
151.513 338.151 151.393 338.491 151.163 338.771 cv
150.933 339.051 150.603 339.251 150.183 339.351 cv
f
177.452 328.687 mo
177.452 332.187 li
f
177.452 328.687 mo
177.452 332.187 li
@
178.053 336.851 mo
175.563 340.741 li
178.053 340.741 li
178.053 336.851 li
177.793 335.991 mo
179.033 335.991 li
179.033 340.741 li
180.073 340.741 li
180.073 341.561 li
179.033 341.561 li
179.033 343.281 li
178.053 343.281 li
178.053 341.561 li
174.763 341.561 li
174.763 340.611 li
177.793 335.991 li
f
205.602 328.687 mo
205.602 332.187 li
f
205.602 328.687 mo
205.602 332.187 li
@
203.502 335.991 mo
207.372 335.991 li
207.372 336.821 li
204.402 336.821 li
204.402 338.611 li
204.542 338.561 204.692 338.521 204.832 338.501 cv
204.972 338.481 205.122 338.461 205.262 338.461 cv
206.072 338.461 206.712 338.691 207.192 339.131 cv
207.672 339.581 207.912 340.181 207.912 340.941 cv
207.912 341.731 207.662 342.341 207.172 342.771 cv
206.682 343.201 205.992 343.411 205.112 343.411 cv
204.802 343.411 204.492 343.381 204.172 343.341 cv
203.852 343.291 203.532 343.221 203.192 343.111 cv
203.192 342.121 li
203.482 342.281 203.782 342.401 204.102 342.481 cv
204.412 342.561 204.742 342.591 205.092 342.591 cv
205.652 342.591 206.102 342.451 206.432 342.151 cv
206.752 341.851 206.922 341.451 206.922 340.941 cv
206.922 340.441 206.752 340.041 206.432 339.741 cv
206.102 339.441 205.652 339.291 205.092 339.291 cv
204.832 339.291 204.562 339.321 204.302 339.381 cv
204.042 339.441 203.772 339.531 203.502 339.651 cv
203.502 335.991 li
f
233.751 328.687 mo
233.751 332.187 li
f
233.751 328.687 mo
233.751 332.187 li
@
233.871 339.241 mo
233.431 339.241 233.081 339.401 232.821 339.701 cv
232.561 340.001 232.431 340.421 232.431 340.941 cv
232.431 341.471 232.561 341.891 232.821 342.191 cv
233.081 342.491 233.431 342.641 233.871 342.641 cv
234.311 342.641 234.661 342.491 234.921 342.191 cv
235.181 341.891 235.311 341.471 235.311 340.941 cv
235.311 340.421 235.181 340.001 234.921 339.701 cv
234.661 339.401 234.311 339.241 233.871 339.241 cv
235.831 336.151 mo
235.831 337.051 li
235.581 336.931 235.331 336.841 235.081 336.781 cv
234.821 336.721 234.571 336.691 234.331 336.691 cv
233.671 336.691 233.171 336.911 232.831 337.351 cv
232.491 337.791 232.291 338.461 232.251 339.341 cv
232.441 339.061 232.681 338.841 232.971 338.691 cv
233.261 338.541 233.581 338.461 233.931 338.461 cv
234.661 338.461 235.241 338.691 235.661 339.131 cv
236.081 339.571 236.301 340.181 236.301 340.941 cv
236.301 341.691 236.071 342.291 235.631 342.741 cv
235.191 343.191 234.601 343.411 233.871 343.411 cv
233.031 343.411 232.381 343.091 231.941 342.451 cv
231.491 341.811 231.271 340.871 231.271 339.641 cv
231.271 338.491 231.541 337.571 232.091 336.891 cv
232.631 336.211 233.371 335.861 234.291 335.861 cv
234.531 335.861 234.781 335.891 235.041 335.931 cv
235.291 335.981 235.551 336.051 235.831 336.151 cv
f
261.9 328.687 mo
261.9 332.187 li
f
261.9 328.687 mo
261.9 332.187 li
@
259.54 335.991 mo
264.23 335.991 li
264.23 336.411 li
261.58 343.281 li
260.55 343.281 li
263.04 336.821 li
259.54 336.821 li
259.54 335.991 li
f
290.049 328.687 mo
290.049 332.187 li
f
290.049 328.687 mo
290.049 332.187 li
@
290.05 339.821 mo
289.58 339.821 289.21 339.951 288.94 340.201 cv
288.67 340.451 288.54 340.791 288.54 341.231 cv
288.54 341.671 288.67 342.021 288.94 342.271 cv
289.21 342.521 289.58 342.641 290.05 342.641 cv
290.51 342.641 290.88 342.521 291.15 342.261 cv
291.42 342.011 291.56 341.671 291.56 341.231 cv
291.56 340.791 291.42 340.451 291.16 340.201 cv
290.89 339.951 290.52 339.821 290.05 339.821 cv
289.06 339.401 mo
288.64 339.301 288.31 339.101 288.07 338.811 cv
287.83 338.521 287.72 338.171 287.72 337.751 cv
287.72 337.171 287.92 336.711 288.34 336.371 cv
288.75 336.031 289.32 335.861 290.05 335.861 cv
290.77 335.861 291.34 336.031 291.76 336.371 cv
292.17 336.711 292.38 337.171 292.38 337.751 cv
292.38 338.171 292.26 338.521 292.02 338.811 cv
291.78 339.101 291.46 339.301 291.04 339.401 cv
291.51 339.511 291.88 339.731 292.15 340.051 cv
292.41 340.371 292.55 340.771 292.55 341.231 cv
292.55 341.941 292.33 342.481 291.9 342.851 cv
291.46 343.231 290.85 343.411 290.05 343.411 cv
289.24 343.411 288.62 343.231 288.19 342.851 cv
287.76 342.481 287.55 341.941 287.55 341.231 cv
287.55 340.771 287.68 340.371 287.95 340.051 cv
288.21 339.731 288.58 339.511 289.06 339.401 cv
288.7 337.841 mo
288.7 338.221 288.81 338.521 289.05 338.731 cv
289.29 338.941 289.62 339.041 290.05 339.041 cv
290.47 339.041 290.8 338.941 291.04 338.731 cv
291.28 338.521 291.4 338.221 291.4 337.841 cv
291.4 337.461 291.28 337.171 291.04 336.961 cv
290.8 336.751 290.47 336.641 290.05 336.641 cv
289.62 336.641 289.29 336.751 289.05 336.961 cv
288.81 337.171 288.7 337.461 288.7 337.841 cv
f
318.199 328.687 mo
318.199 332.187 li
f
318.199 328.687 mo
318.199 332.187 li
@
316.119 343.131 mo
316.119 342.231 li
316.359 342.351 316.609 342.441 316.869 342.501 cv
317.119 342.561 317.369 342.591 317.619 342.591 cv
318.259 342.591 318.759 342.381 319.099 341.941 cv
319.439 341.501 319.639 340.841 319.699 339.941 cv
319.499 340.221 319.259 340.441 318.979 340.591 cv
318.689 340.741 318.369 340.811 318.019 340.811 cv
317.279 340.811 316.699 340.591 316.279 340.151 cv
315.859 339.711 315.649 339.111 315.649 338.341 cv
315.649 337.601 315.869 337.001 316.309 336.541 cv
316.749 336.091 317.339 335.861 318.079 335.861 cv
318.919 335.861 319.569 336.191 320.009 336.831 cv
320.449 337.481 320.679 338.421 320.679 339.641 cv
320.679 340.801 320.399 341.711 319.859 342.391 cv
319.309 343.071 318.579 343.411 317.659 343.411 cv
317.409 343.411 317.159 343.381 316.909 343.341 cv
316.649 343.301 316.389 343.231 316.119 343.131 cv
318.079 340.041 mo
318.519 340.041 318.869 339.891 319.129 339.591 cv
319.389 339.291 319.519 338.871 319.519 338.341 cv
319.519 337.821 319.389 337.401 319.129 337.101 cv
318.869 336.801 318.519 336.641 318.079 336.641 cv
317.639 336.641 317.289 336.801 317.029 337.101 cv
316.769 337.401 316.639 337.821 316.639 338.341 cv
316.639 338.871 316.769 339.291 317.029 339.591 cv
317.289 339.891 317.639 340.041 318.079 340.041 cv
f
346.348 328.687 mo
346.348 332.187 li
f
346.348 328.687 mo
346.348 332.187 li
@
341.228 342.451 mo
342.838 342.451 li
342.838 336.891 li
341.088 337.241 li
341.088 336.341 li
342.828 335.991 li
343.818 335.991 li
343.818 342.451 li
345.428 342.451 li
345.428 343.281 li
341.228 343.281 li
341.228 342.451 li
f
349.528 336.641 mo
349.018 336.641 348.638 336.891 348.378 337.391 cv
348.118 337.891 347.998 338.641 347.998 339.641 cv
347.998 340.641 348.118 341.391 348.378 341.891 cv
348.638 342.391 349.018 342.641 349.528 342.641 cv
350.038 342.641 350.418 342.391 350.678 341.891 cv
350.928 341.391 351.058 340.641 351.058 339.641 cv
351.058 338.641 350.928 337.891 350.678 337.391 cv
350.418 336.891 350.038 336.641 349.528 336.641 cv
349.528 335.861 mo
350.338 335.861 350.958 336.191 351.398 336.831 cv
351.828 337.481 352.048 338.421 352.048 339.641 cv
352.048 340.871 351.828 341.811 351.398 342.451 cv
350.958 343.091 350.338 343.411 349.528 343.411 cv
348.708 343.411 348.078 343.091 347.648 342.451 cv
347.218 341.811 347.008 340.871 347.008 339.641 cv
347.008 338.421 347.218 337.481 347.648 336.831 cv
348.078 336.191 348.708 335.861 349.528 335.861 cv
f
374.497 328.687 mo
374.497 332.187 li
f
374.497 328.687 mo
374.497 332.187 li
@
369.378 342.451 mo
370.988 342.451 li
370.988 336.891 li
369.238 337.241 li
369.238 336.341 li
370.978 335.991 li
371.968 335.991 li
371.968 342.451 li
373.578 342.451 li
373.578 343.281 li
369.378 343.281 li
369.378 342.451 li
f
375.738 342.451 mo
377.348 342.451 li
377.348 336.891 li
375.598 337.241 li
375.598 336.341 li
377.338 335.991 li
378.328 335.991 li
378.328 342.451 li
379.938 342.451 li
379.938 343.281 li
375.738 343.281 li
375.738 342.451 li
f
189.898 349.569 mo
190.591 349.569 li
190.591 351.662 li
193.097 351.662 li
193.097 349.569 li
193.79 349.569 li
193.79 354.672 li
193.097 354.672 li
193.097 352.243 li
190.591 352.243 li
190.591 354.672 li
189.898 354.672 li
189.898 349.569 li
f
194.462 349.569 mo
198.774 349.569 li
198.774 350.15 li
196.961 350.15 li
196.961 354.672 li
196.268 354.672 li
196.268 350.15 li
194.462 350.15 li
194.462 349.569 li
f
198.739 349.569 mo
203.051 349.569 li
203.051 350.15 li
201.238 350.15 li
201.238 354.672 li
200.545 354.672 li
200.545 350.15 li
198.739 350.15 li
198.739 349.569 li
f
204.409 350.136 mo
204.409 352.054 li
205.277 352.054 li
205.599 352.054 205.844 351.977 206.019 351.809 cv
206.194 351.641 206.285 351.403 206.285 351.095 cv
206.285 350.787 206.194 350.556 206.019 350.388 cv
205.844 350.22 205.599 350.136 205.277 350.136 cv
204.409 350.136 li
203.716 349.569 mo
205.277 349.569 li
205.844 349.569 206.278 349.702 206.572 349.961 cv
206.866 350.22 207.013 350.598 207.013 351.095 cv
207.013 351.599 206.866 351.984 206.572 352.236 cv
206.278 352.495 205.844 352.621 205.277 352.621 cv
204.409 352.621 li
204.409 354.672 li
203.716 354.672 li
203.716 349.569 li
f
210.996 349.737 mo
210.996 350.409 li
210.73 350.283 210.485 350.192 210.254 350.129 cv
210.016 350.073 209.792 350.038 209.582 350.038 cv
209.204 350.038 208.91 350.115 208.707 350.255 cv
208.504 350.402 208.406 350.612 208.406 350.878 cv
208.406 351.102 208.469 351.277 208.609 351.389 cv
208.742 351.508 209.001 351.599 209.379 351.669 cv
209.799 351.753 li
210.31 351.851 210.688 352.026 210.933 352.271 cv
211.178 352.523 211.304 352.852 211.304 353.265 cv
211.304 353.762 211.136 354.133 210.807 354.385 cv
210.471 354.637 209.988 354.763 209.351 354.763 cv
209.106 354.763 208.847 354.735 208.574 354.686 cv
208.301 354.637 208.021 354.56 207.734 354.448 cv
207.734 353.734 li
208.014 353.895 208.287 354.014 208.553 354.091 cv
208.819 354.175 209.085 354.21 209.351 354.21 cv
209.743 354.21 210.044 354.133 210.261 353.979 cv
210.471 353.825 210.583 353.608 210.583 353.314 cv
210.583 353.062 210.506 352.866 210.352 352.726 cv
210.198 352.586 209.946 352.481 209.596 352.411 cv
209.176 352.327 li
208.658 352.229 208.287 352.068 208.056 351.844 cv
207.825 351.627 207.713 351.326 207.713 350.934 cv
207.713 350.486 207.867 350.129 208.189 349.87 cv
208.504 349.611 208.945 349.478 209.505 349.478 cv
209.743 349.478 209.981 349.499 210.233 349.541 cv
210.478 349.583 210.73 349.653 210.996 349.737 cv
f
217.023 350.955 mo
217.023 351.55 li
216.841 351.466 216.659 351.396 216.47 351.347 cv
216.274 351.305 216.078 351.277 215.875 351.277 cv
215.56 351.277 215.322 351.326 215.168 351.424 cv
215.014 351.522 214.937 351.662 214.937 351.851 cv
214.937 351.998 214.993 352.11 215.105 352.194 cv
215.217 352.278 215.441 352.362 215.777 352.432 cv
215.994 352.481 li
216.442 352.579 216.757 352.719 216.946 352.887 cv
217.128 353.062 217.226 353.307 217.226 353.615 cv
217.226 353.972 217.086 354.252 216.806 354.455 cv
216.526 354.665 216.134 354.763 215.644 354.763 cv
215.434 354.763 215.224 354.742 215 354.707 cv
214.776 354.672 214.545 354.616 214.3 354.532 cv
214.3 353.881 li
214.531 354.007 214.762 354.098 214.986 354.154 cv
215.21 354.217 215.434 354.245 215.658 354.245 cv
215.952 354.245 216.183 354.196 216.344 354.098 cv
216.498 354 216.582 353.853 216.582 353.664 cv
216.582 353.496 216.519 353.363 216.407 353.272 cv
216.295 353.181 216.043 353.09 215.651 353.006 cv
215.434 352.957 li
215.042 352.873 214.755 352.747 214.587 352.579 cv
214.412 352.411 214.328 352.18 214.328 351.879 cv
214.328 351.522 214.454 351.242 214.706 351.046 cv
214.958 350.85 215.322 350.752 215.798 350.752 cv
216.029 350.752 216.246 350.773 216.456 350.808 cv
216.659 350.843 216.848 350.892 217.023 350.955 cv
f
221.503 352.6 mo
221.503 352.908 li
218.612 352.908 li
218.64 353.342 218.766 353.678 219.004 353.902 cv
219.235 354.126 219.557 354.238 219.977 354.238 cv
220.215 354.238 220.453 354.21 220.677 354.154 cv
220.901 354.098 221.132 354.007 221.356 353.881 cv
221.356 354.476 li
221.132 354.574 220.901 354.651 220.663 354.693 cv
220.425 354.735 220.18 354.763 219.942 354.763 cv
219.326 354.763 218.843 354.588 218.486 354.238 cv
218.129 353.888 217.954 353.405 217.954 352.796 cv
217.954 352.173 218.122 351.676 218.458 351.305 cv
218.794 350.941 219.256 350.752 219.83 350.752 cv
220.348 350.752 220.754 350.92 221.055 351.249 cv
221.349 351.585 221.503 352.033 221.503 352.6 cv
220.873 352.418 mo
220.866 352.075 220.768 351.802 220.586 351.592 cv
220.397 351.389 220.145 351.284 219.837 351.284 cv
219.487 351.284 219.207 351.389 218.997 351.585 cv
218.787 351.781 218.661 352.061 218.633 352.418 cv
220.873 352.418 li
f
224.751 351.431 mo
224.681 351.389 224.604 351.361 224.52 351.34 cv
224.436 351.326 224.345 351.312 224.247 351.312 cv
223.89 351.312 223.617 351.431 223.428 351.662 cv
223.232 351.893 223.141 352.222 223.141 352.656 cv
223.141 354.672 li
222.511 354.672 li
222.511 350.843 li
223.141 350.843 li
223.141 351.438 li
223.267 351.207 223.442 351.032 223.652 350.92 cv
223.862 350.808 224.121 350.752 224.429 350.752 cv
224.471 350.752 224.52 350.759 224.576 350.759 cv
224.625 350.766 224.681 350.773 224.751 350.787 cv
224.751 351.431 li
f
224.961 350.843 mo
225.626 350.843 li
226.823 354.056 li
228.02 350.843 li
228.685 350.843 li
227.25 354.672 li
226.396 354.672 li
224.961 350.843 li
f
229.553 350.843 mo
230.183 350.843 li
230.183 354.672 li
229.553 354.672 li
229.553 350.843 li
229.553 349.352 mo
230.183 349.352 li
230.183 350.15 li
229.553 350.15 li
229.553 349.352 li
f
234.257 350.99 mo
234.257 351.578 li
234.075 351.48 233.9 351.41 233.718 351.361 cv
233.536 351.312 233.361 351.284 233.179 351.284 cv
232.773 351.284 232.451 351.417 232.227 351.676 cv
232.003 351.935 231.891 352.299 231.891 352.761 cv
231.891 353.23 232.003 353.594 232.227 353.853 cv
232.451 354.112 232.773 354.238 233.179 354.238 cv
233.361 354.238 233.536 354.217 233.718 354.168 cv
233.9 354.119 234.075 354.042 234.257 353.944 cv
234.257 354.525 li
234.075 354.609 233.893 354.672 233.711 354.707 cv
233.522 354.742 233.319 354.763 233.109 354.763 cv
232.535 354.763 232.073 354.588 231.737 354.224 cv
231.394 353.867 231.226 353.377 231.226 352.761 cv
231.226 352.138 231.394 351.648 231.737 351.291 cv
232.08 350.934 232.549 350.752 233.151 350.752 cv
233.347 350.752 233.536 350.773 233.718 350.815 cv
233.9 350.857 234.082 350.913 234.257 350.99 cv
f
238.625 352.6 mo
238.625 352.908 li
235.734 352.908 li
235.762 353.342 235.888 353.678 236.126 353.902 cv
236.357 354.126 236.679 354.238 237.099 354.238 cv
237.337 354.238 237.575 354.21 237.799 354.154 cv
238.023 354.098 238.254 354.007 238.478 353.881 cv
238.478 354.476 li
238.254 354.574 238.023 354.651 237.785 354.693 cv
237.547 354.735 237.302 354.763 237.064 354.763 cv
236.448 354.763 235.965 354.588 235.608 354.238 cv
235.251 353.888 235.076 353.405 235.076 352.796 cv
235.076 352.173 235.244 351.676 235.58 351.305 cv
235.916 350.941 236.378 350.752 236.952 350.752 cv
237.47 350.752 237.876 350.92 238.177 351.249 cv
238.471 351.585 238.625 352.033 238.625 352.6 cv
237.995 352.418 mo
237.988 352.075 237.89 351.802 237.708 351.592 cv
237.519 351.389 237.267 351.284 236.959 351.284 cv
236.609 351.284 236.329 351.389 236.119 351.585 cv
235.909 351.781 235.783 352.061 235.755 352.418 cv
237.995 352.418 li
f
242.097 350.955 mo
242.097 351.55 li
241.915 351.466 241.733 351.396 241.544 351.347 cv
241.348 351.305 241.152 351.277 240.949 351.277 cv
240.634 351.277 240.396 351.326 240.242 351.424 cv
240.088 351.522 240.011 351.662 240.011 351.851 cv
240.011 351.998 240.067 352.11 240.179 352.194 cv
240.291 352.278 240.515 352.362 240.851 352.432 cv
241.068 352.481 li
241.516 352.579 241.831 352.719 242.02 352.887 cv
242.202 353.062 242.3 353.307 242.3 353.615 cv
242.3 353.972 242.16 354.252 241.88 354.455 cv
241.6 354.665 241.208 354.763 240.718 354.763 cv
240.508 354.763 240.298 354.742 240.074 354.707 cv
239.85 354.672 239.619 354.616 239.374 354.532 cv
239.374 353.881 li
239.605 354.007 239.836 354.098 240.06 354.154 cv
240.284 354.217 240.508 354.245 240.732 354.245 cv
241.026 354.245 241.257 354.196 241.418 354.098 cv
241.572 354 241.656 353.853 241.656 353.664 cv
241.656 353.496 241.593 353.363 241.481 353.272 cv
241.369 353.181 241.117 353.09 240.725 353.006 cv
240.508 352.957 li
240.116 352.873 239.829 352.747 239.661 352.579 cv
239.486 352.411 239.402 352.18 239.402 351.879 cv
239.402 351.522 239.528 351.242 239.78 351.046 cv
240.032 350.85 240.396 350.752 240.872 350.752 cv
241.103 350.752 241.32 350.773 241.53 350.808 cv
241.733 350.843 241.922 350.892 242.097 350.955 cv
f
213.437 357.187 mo
213.129 357.719 212.905 358.237 212.758 358.748 cv
212.604 359.259 212.534 359.777 212.534 360.302 cv
212.534 360.834 212.604 361.352 212.758 361.863 cv
212.905 362.381 213.129 362.892 213.437 363.417 cv
212.891 363.417 li
212.548 362.878 212.289 362.36 212.121 361.842 cv
211.953 361.324 211.869 360.813 211.869 360.302 cv
211.869 359.798 211.953 359.287 212.121 358.769 cv
212.289 358.251 212.541 357.726 212.891 357.187 cv
213.437 357.187 li
f
217.413 358.818 mo
217.413 359.406 li
217.231 359.308 217.056 359.238 216.874 359.189 cv
216.692 359.14 216.517 359.112 216.335 359.112 cv
215.929 359.112 215.607 359.245 215.383 359.504 cv
215.159 359.763 215.047 360.127 215.047 360.589 cv
215.047 361.058 215.159 361.422 215.383 361.681 cv
215.607 361.94 215.929 362.066 216.335 362.066 cv
216.517 362.066 216.692 362.045 216.874 361.996 cv
217.056 361.947 217.231 361.87 217.413 361.772 cv
217.413 362.353 li
217.231 362.437 217.049 362.5 216.867 362.535 cv
216.678 362.57 216.475 362.591 216.265 362.591 cv
215.691 362.591 215.229 362.416 214.893 362.052 cv
214.55 361.695 214.382 361.205 214.382 360.589 cv
214.382 359.966 214.55 359.476 214.893 359.119 cv
215.236 358.762 215.705 358.58 216.307 358.58 cv
216.503 358.58 216.692 358.601 216.874 358.643 cv
217.056 358.685 217.238 358.741 217.413 358.818 cv
f
218.407 357.187 mo
218.953 357.187 li
219.289 357.726 219.548 358.251 219.716 358.769 cv
219.884 359.287 219.975 359.798 219.975 360.302 cv
219.975 360.813 219.884 361.324 219.716 361.842 cv
219.548 362.36 219.289 362.878 218.953 363.417 cv
218.407 363.417 li
218.708 362.892 218.932 362.381 219.086 361.863 cv
219.233 361.352 219.31 360.834 219.31 360.302 cv
219.31 359.777 219.233 359.259 219.086 358.748 cv
218.932 358.237 218.708 357.719 218.407 357.187 cv
f
37.3629 328.687 mo
33.8629 328.687 li
f
37.3629 328.687 mo
33.8629 328.687 li
@
17.6367 325.844 mo
17.1267 325.844 16.7467 326.094 16.4867 326.594 cv
16.2267 327.094 16.1067 327.844 16.1067 328.844 cv
16.1067 329.844 16.2267 330.594 16.4867 331.094 cv
16.7467 331.594 17.1267 331.844 17.6367 331.844 cv
18.1467 331.844 18.5267 331.594 18.7867 331.094 cv
19.0367 330.594 19.1667 329.844 19.1667 328.844 cv
19.1667 327.844 19.0367 327.094 18.7867 326.594 cv
18.5267 326.094 18.1467 325.844 17.6367 325.844 cv
17.6367 325.064 mo
18.4467 325.064 19.0667 325.394 19.5067 326.034 cv
19.9367 326.684 20.1567 327.624 20.1567 328.844 cv
20.1567 330.074 19.9367 331.014 19.5067 331.654 cv
19.0667 332.294 18.4467 332.614 17.6367 332.614 cv
16.8167 332.614 16.1867 332.294 15.7567 331.654 cv
15.3267 331.014 15.1167 330.074 15.1167 328.844 cv
15.1167 327.624 15.3267 326.684 15.7567 326.034 cv
16.1867 325.394 16.8167 325.064 17.6367 325.064 cv
f
21.8867 331.244 mo
22.9167 331.244 li
22.9167 332.484 li
21.8867 332.484 li
21.8867 331.244 li
f
27.1767 325.844 mo
26.6667 325.844 26.2867 326.094 26.0267 326.594 cv
25.7667 327.094 25.6467 327.844 25.6467 328.844 cv
25.6467 329.844 25.7667 330.594 26.0267 331.094 cv
26.2867 331.594 26.6667 331.844 27.1767 331.844 cv
27.6867 331.844 28.0667 331.594 28.3267 331.094 cv
28.5767 330.594 28.7067 329.844 28.7067 328.844 cv
28.7067 327.844 28.5767 327.094 28.3267 326.594 cv
28.0667 326.094 27.6867 325.844 27.1767 325.844 cv
27.1767 325.064 mo
27.9867 325.064 28.6067 325.394 29.0467 326.034 cv
29.4767 326.684 29.6967 327.624 29.6967 328.844 cv
29.6967 330.074 29.4767 331.014 29.0467 331.654 cv
28.6067 332.294 27.9867 332.614 27.1767 332.614 cv
26.3567 332.614 25.7267 332.294 25.2967 331.654 cv
24.8667 331.014 24.6567 330.074 24.6567 328.844 cv
24.6567 327.624 24.8667 326.684 25.2967 326.034 cv
25.7267 325.394 26.3567 325.064 27.1767 325.064 cv
f
37.3629 289.77 mo
33.8629 289.77 li
f
37.3629 289.77 mo
33.8629 289.77 li
@
17.6367 286.927 mo
17.1267 286.927 16.7467 287.177 16.4867 287.677 cv
16.2267 288.177 16.1067 288.927 16.1067 289.927 cv
16.1067 290.927 16.2267 291.677 16.4867 292.177 cv
16.7467 292.677 17.1267 292.927 17.6367 292.927 cv
18.1467 292.927 18.5267 292.677 18.7867 292.177 cv
19.0367 291.677 19.1667 290.927 19.1667 289.927 cv
19.1667 288.927 19.0367 288.177 18.7867 287.677 cv
18.5267 287.177 18.1467 286.927 17.6367 286.927 cv
17.6367 286.147 mo
18.4467 286.147 19.0667 286.477 19.5067 287.117 cv
19.9367 287.767 20.1567 288.707 20.1567 289.927 cv
20.1567 291.157 19.9367 292.097 19.5067 292.737 cv
19.0667 293.377 18.4467 293.697 17.6367 293.697 cv
16.8167 293.697 16.1867 293.377 15.7567 292.737 cv
15.3267 292.097 15.1167 291.157 15.1167 289.927 cv
15.1167 288.707 15.3267 287.767 15.7567 287.117 cv
16.1867 286.477 16.8167 286.147 17.6367 286.147 cv
f
21.8867 292.327 mo
22.9167 292.327 li
22.9167 293.567 li
21.8867 293.567 li
21.8867 292.327 li
f
25.0767 286.277 mo
28.9467 286.277 li
28.9467 287.107 li
25.9767 287.107 li
25.9767 288.897 li
26.1167 288.847 26.2667 288.807 26.4067 288.787 cv
26.5467 288.767 26.6967 288.747 26.8367 288.747 cv
27.6467 288.747 28.2867 288.977 28.7667 289.417 cv
29.2467 289.867 29.4867 290.467 29.4867 291.227 cv
29.4867 292.017 29.2367 292.627 28.7467 293.057 cv
28.2567 293.487 27.5667 293.697 26.6867 293.697 cv
26.3767 293.697 26.0667 293.667 25.7467 293.627 cv
25.4267 293.577 25.1067 293.507 24.7667 293.397 cv
24.7667 292.407 li
25.0567 292.567 25.3567 292.687 25.6767 292.767 cv
25.9867 292.847 26.3167 292.877 26.6667 292.877 cv
27.2267 292.877 27.6767 292.737 28.0067 292.437 cv
28.3267 292.137 28.4967 291.737 28.4967 291.227 cv
28.4967 290.727 28.3267 290.327 28.0067 290.027 cv
27.6767 289.727 27.2267 289.577 26.6667 289.577 cv
26.4067 289.577 26.1367 289.607 25.8767 289.667 cv
25.6167 289.727 25.3467 289.817 25.0767 289.937 cv
25.0767 286.277 li
f
37.3629 250.853 mo
33.8629 250.853 li
f
37.3629 250.853 mo
33.8629 250.853 li
@
15.6967 253.819 mo
17.3067 253.819 li
17.3067 248.259 li
15.5567 248.609 li
15.5567 247.709 li
17.2967 247.359 li
18.2867 247.359 li
18.2867 253.819 li
19.8967 253.819 li
19.8967 254.649 li
15.6967 254.649 li
15.6967 253.819 li
f
21.8867 253.409 mo
22.9167 253.409 li
22.9167 254.649 li
21.8867 254.649 li
21.8867 253.409 li
f
27.1767 248.009 mo
26.6667 248.009 26.2867 248.259 26.0267 248.759 cv
25.7667 249.259 25.6467 250.009 25.6467 251.009 cv
25.6467 252.009 25.7667 252.759 26.0267 253.259 cv
26.2867 253.759 26.6667 254.009 27.1767 254.009 cv
27.6867 254.009 28.0667 253.759 28.3267 253.259 cv
28.5767 252.759 28.7067 252.009 28.7067 251.009 cv
28.7067 250.009 28.5767 249.259 28.3267 248.759 cv
28.0667 248.259 27.6867 248.009 27.1767 248.009 cv
27.1767 247.229 mo
27.9867 247.229 28.6067 247.559 29.0467 248.199 cv
29.4767 248.849 29.6967 249.789 29.6967 251.009 cv
29.6967 252.239 29.4767 253.179 29.0467 253.819 cv
28.6067 254.459 27.9867 254.779 27.1767 254.779 cv
26.3567 254.779 25.7267 254.459 25.2967 253.819 cv
24.8667 253.179 24.6567 252.239 24.6567 251.009 cv
24.6567 249.789 24.8667 248.849 25.2967 248.199 cv
25.7267 247.559 26.3567 247.229 27.1767 247.229 cv
f
3.90056 302.451 mo
3.90056 299.518 li
4.48156 299.518 li
4.48156 301.758 li
5.98656 301.758 li
5.98656 299.735 li
6.56756 299.735 li
6.56756 301.758 li
9.00356 301.758 li
9.00356 302.451 li
3.90056 302.451 li
f
8.42256 298.244 mo
8.42256 297.117 li
4.53056 297.117 li
4.77556 298.342 li
4.14556 298.342 li
3.90056 297.124 li
3.90056 296.431 li
8.42256 296.431 li
8.42256 295.304 li
9.00356 295.304 li
9.00356 298.244 li
8.42256 298.244 li
f
6.80556 294.317 mo
6.80556 292.476 li
7.36556 292.476 li
7.36556 294.317 li
6.80556 294.317 li
f
5.28656 289.032 mo
5.88156 289.032 li
5.79756 289.214 5.72756 289.396 5.67856 289.585 cv
5.63656 289.781 5.60856 289.977 5.60856 290.18 cv
5.60856 290.495 5.65756 290.733 5.75556 290.887 cv
5.85356 291.041 5.99356 291.118 6.18256 291.118 cv
6.32956 291.118 6.44156 291.062 6.52556 290.95 cv
6.60956 290.838 6.69356 290.614 6.76356 290.278 cv
6.81256 290.061 li
6.91056 289.613 7.05056 289.298 7.21856 289.109 cv
7.39356 288.927 7.63856 288.829 7.94656 288.829 cv
8.30356 288.829 8.58356 288.969 8.78656 289.249 cv
8.99656 289.529 9.09456 289.921 9.09456 290.411 cv
9.09456 290.621 9.07356 290.831 9.03856 291.055 cv
9.00356 291.279 8.94756 291.51 8.86356 291.755 cv
8.21256 291.755 li
8.33856 291.524 8.42956 291.293 8.48556 291.069 cv
8.54856 290.845 8.57656 290.621 8.57656 290.397 cv
8.57656 290.103 8.52756 289.872 8.42956 289.711 cv
8.33156 289.557 8.18456 289.473 7.99556 289.473 cv
7.82756 289.473 7.69456 289.536 7.60356 289.648 cv
7.51256 289.76 7.42156 290.012 7.33756 290.404 cv
7.28856 290.621 li
7.20456 291.013 7.07856 291.3 6.91056 291.468 cv
6.74256 291.643 6.51156 291.727 6.21056 291.727 cv
5.85356 291.727 5.57356 291.601 5.37756 291.349 cv
5.18156 291.097 5.08356 290.733 5.08356 290.257 cv
5.08356 290.026 5.10456 289.809 5.13956 289.599 cv
5.17456 289.396 5.22356 289.207 5.28656 289.032 cv
f
5.32156 285.07 mo
5.90956 285.07 li
5.81156 285.252 5.74156 285.427 5.69256 285.609 cv
5.64356 285.791 5.61556 285.966 5.61556 286.148 cv
5.61556 286.554 5.74856 286.876 6.00756 287.1 cv
6.26656 287.324 6.63056 287.436 7.09256 287.436 cv
7.56156 287.436 7.92556 287.324 8.18456 287.1 cv
8.44356 286.876 8.56956 286.554 8.56956 286.148 cv
8.56956 285.966 8.54856 285.791 8.49956 285.609 cv
8.45056 285.427 8.37356 285.252 8.27556 285.07 cv
8.85656 285.07 li
8.94056 285.252 9.00356 285.434 9.03856 285.616 cv
9.07356 285.805 9.09456 286.008 9.09456 286.218 cv
9.09456 286.792 8.91956 287.254 8.55556 287.59 cv
8.19856 287.933 7.70856 288.101 7.09256 288.101 cv
6.46956 288.101 5.97956 287.933 5.62256 287.59 cv
5.26556 287.247 5.08356 286.778 5.08356 286.176 cv
5.08356 285.98 5.10456 285.791 5.14656 285.609 cv
5.18856 285.427 5.24456 285.245 5.32156 285.07 cv
f
5.61556 282.494 mo
5.61556 282.83 5.74856 283.096 6.01456 283.292 cv
6.28056 283.488 6.63756 283.586 7.09256 283.586 cv
7.55456 283.586 7.91156 283.495 8.17756 283.299 cv
8.44356 283.103 8.56956 282.837 8.56956 282.494 cv
8.56956 282.158 8.44356 281.892 8.17756 281.696 cv
7.91156 281.5 7.55456 281.402 7.09256 281.402 cv
6.64456 281.402 6.28056 281.5 6.01456 281.696 cv
5.74856 281.892 5.61556 282.158 5.61556 282.494 cv
5.08356 282.494 mo
5.08356 281.948 5.26556 281.521 5.61556 281.206 cv
5.97256 280.898 6.46256 280.737 7.09256 280.737 cv
7.72256 280.737 8.21256 280.898 8.56256 281.206 cv
8.91956 281.521 9.09456 281.948 9.09456 282.494 cv
9.09456 283.047 8.91956 283.481 8.56256 283.789 cv
8.21256 284.097 7.72256 284.251 7.09256 284.251 cv
6.46256 284.251 5.97256 284.097 5.61556 283.789 cv
5.26556 283.481 5.08356 283.047 5.08356 282.494 cv
f
5.76256 277.475 mo
5.72056 277.545 5.69256 277.622 5.67156 277.706 cv
5.65756 277.79 5.64356 277.881 5.64356 277.979 cv
5.64356 278.336 5.76256 278.609 5.99356 278.798 cv
6.22456 278.994 6.55356 279.085 6.98756 279.085 cv
9.00356 279.085 li
9.00356 279.715 li
5.17456 279.715 li
5.17456 279.085 li
5.76956 279.085 li
5.53856 278.959 5.36356 278.784 5.25156 278.574 cv
5.13956 278.364 5.08356 278.105 5.08356 277.797 cv
5.08356 277.755 5.09056 277.706 5.09056 277.65 cv
5.09756 277.601 5.10456 277.545 5.11856 277.475 cv
5.76256 277.475 li
f
6.93156 273.541 mo
7.23956 273.541 li
7.23956 276.432 li
7.67356 276.404 8.00956 276.278 8.23356 276.04 cv
8.45756 275.809 8.56956 275.487 8.56956 275.067 cv
8.56956 274.829 8.54156 274.591 8.48556 274.367 cv
8.42956 274.143 8.33856 273.912 8.21256 273.688 cv
8.80756 273.688 li
8.90556 273.912 8.98256 274.143 9.02456 274.381 cv
9.06656 274.619 9.09456 274.864 9.09456 275.102 cv
9.09456 275.718 8.91956 276.201 8.56956 276.558 cv
8.21956 276.915 7.73656 277.09 7.12756 277.09 cv
6.50456 277.09 6.00756 276.922 5.63656 276.586 cv
5.27256 276.25 5.08356 275.788 5.08356 275.214 cv
5.08356 274.696 5.25156 274.29 5.58056 273.989 cv
5.91656 273.695 6.36456 273.541 6.93156 273.541 cv
6.74956 274.171 mo
6.40656 274.178 6.13356 274.276 5.92356 274.458 cv
5.72056 274.647 5.61556 274.899 5.61556 275.207 cv
5.61556 275.557 5.72056 275.837 5.91656 276.047 cv
6.11256 276.257 6.39256 276.383 6.74956 276.411 cv
6.74956 274.171 li
f
2 lc
0 lj
37.3629 328.687 mo
37.3629 247.618 li
@
394.483 328.687 mo
394.483 247.618 li
@
37.3629 328.687 mo
394.483 328.687 li
@
37.3629 247.618 mo
394.483 247.618 li
@
190.153 377.335 mo
204.153 377.335 li
204.153 372.435 li
190.153 372.435 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
190.153 377.335 mo
204.153 377.335 li
204.153 372.435 li
190.153 372.435 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
211.132 374.899 mo
211.132 376.768 li
212.238 376.768 li
212.609 376.768 212.882 376.691 213.064 376.537 cv
213.239 376.383 213.33 376.152 213.33 375.83 cv
213.33 375.515 213.239 375.284 213.064 375.13 cv
212.882 374.976 212.609 374.899 212.238 374.899 cv
211.132 374.899 li
211.132 372.799 mo
211.132 374.339 li
212.154 374.339 li
212.49 374.339 212.735 374.276 212.903 374.15 cv
213.071 374.024 213.155 373.835 213.155 373.569 cv
213.155 373.317 213.071 373.121 212.903 372.995 cv
212.735 372.869 212.49 372.799 212.154 372.799 cv
211.132 372.799 li
210.439 372.232 mo
212.203 372.232 li
212.728 372.232 213.134 372.344 213.421 372.561 cv
213.701 372.785 213.848 373.093 213.848 373.492 cv
213.848 373.807 213.771 374.059 213.624 374.241 cv
213.477 374.423 213.267 374.542 212.987 374.584 cv
213.323 374.661 213.589 374.815 213.778 375.046 cv
213.96 375.277 214.058 375.564 214.058 375.907 cv
214.058 376.369 213.897 376.719 213.589 376.964 cv
213.281 377.216 212.84 377.335 212.273 377.335 cv
210.439 377.335 li
210.439 372.232 li
.750179 .679652 .670192 .901488 cmyk
f
218.72 376.607 mo
218.72 375.235 li
217.593 375.235 li
217.593 374.668 li
219.406 374.668 li
219.406 376.859 li
219.14 377.055 218.846 377.195 218.524 377.286 cv
218.202 377.377 217.859 377.426 217.495 377.426 cv
216.697 377.426 216.067 377.195 215.619 376.733 cv
215.171 376.271 214.947 375.62 214.947 374.787 cv
214.947 373.961 215.171 373.31 215.619 372.841 cv
216.067 372.379 216.697 372.141 217.495 372.141 cv
217.824 372.141 218.139 372.183 218.44 372.267 cv
218.741 372.351 219.021 372.47 219.273 372.624 cv
219.273 373.359 li
219.014 373.149 218.741 372.988 218.454 372.876 cv
218.167 372.764 217.866 372.708 217.551 372.708 cv
216.921 372.708 216.452 372.883 216.144 373.233 cv
215.829 373.583 215.675 374.101 215.675 374.787 cv
215.675 375.48 215.829 375.998 216.144 376.348 cv
216.452 376.698 216.921 376.866 217.551 376.866 cv
217.789 376.866 218.006 376.845 218.202 376.803 cv
218.398 376.761 218.566 376.698 218.72 376.607 cv
f
223.088 374.941 mo
223.235 374.997 223.382 375.102 223.522 375.263 cv
223.662 375.431 223.802 375.655 223.942 375.942 cv
224.642 377.335 li
223.9 377.335 li
223.249 376.026 li
223.081 375.69 222.913 375.459 222.759 375.347 cv
222.598 375.235 222.381 375.179 222.108 375.179 cv
221.359 375.179 li
221.359 377.335 li
220.666 377.335 li
220.666 372.232 li
222.227 372.232 li
222.808 372.232 223.242 372.358 223.529 372.596 cv
223.816 372.841 223.963 373.212 223.963 373.702 cv
223.963 374.024 223.886 374.297 223.739 374.507 cv
223.585 374.717 223.368 374.864 223.088 374.941 cv
221.359 372.799 mo
221.359 374.612 li
222.227 374.612 li
222.556 374.612 222.808 374.535 222.976 374.381 cv
223.144 374.227 223.235 374.003 223.235 373.702 cv
223.235 373.408 223.144 373.184 222.976 373.03 cv
222.808 372.876 222.556 372.799 222.227 372.799 cv
221.359 372.799 li
f
225.454 372.232 mo
226.147 372.232 li
226.147 375.333 li
226.147 375.879 226.245 376.278 226.441 376.516 cv
226.637 376.754 226.959 376.873 227.407 376.873 cv
227.848 376.873 228.17 376.754 228.366 376.516 cv
228.562 376.278 228.667 375.879 228.667 375.333 cv
228.667 372.232 li
229.36 372.232 li
229.36 375.417 li
229.36 376.089 229.192 376.586 228.863 376.922 cv
228.534 377.258 228.051 377.426 227.407 377.426 cv
226.763 377.426 226.273 377.258 225.944 376.922 cv
225.615 376.586 225.454 376.089 225.454 375.417 cv
225.454 372.232 li
f
232.363 372.911 mo
231.425 375.452 li
233.301 375.452 li
232.363 372.911 li
231.971 372.232 mo
232.755 372.232 li
234.701 377.335 li
233.98 377.335 li
233.518 376.026 li
231.215 376.026 li
230.753 377.335 li
230.025 377.335 li
231.971 372.232 li
f
190.153 387.6 mo
204.153 387.6 li
204.153 382.7 li
190.153 382.7 li
cp
0 .618677 1 .000610361 cmyk
f
190.153 387.6 mo
204.153 387.6 li
204.153 382.7 li
190.153 382.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
214.261 382.889 mo
214.261 383.617 li
214.023 383.407 213.778 383.246 213.512 383.134 cv
213.246 383.029 212.973 382.973 212.679 382.973 cv
212.091 382.973 211.643 383.155 211.335 383.512 cv
211.027 383.869 210.873 384.38 210.873 385.052 cv
210.873 385.724 211.027 386.242 211.335 386.599 cv
211.643 386.956 212.091 387.131 212.679 387.131 cv
212.973 387.131 213.246 387.082 213.512 386.97 cv
213.778 386.865 214.023 386.704 214.261 386.487 cv
214.261 387.208 li
214.016 387.376 213.757 387.495 213.491 387.572 cv
213.225 387.649 212.938 387.691 212.637 387.691 cv
211.867 387.691 211.258 387.46 210.81 386.991 cv
210.362 386.522 210.145 385.878 210.145 385.052 cv
210.145 384.233 210.362 383.589 210.81 383.113 cv
211.258 382.644 211.867 382.406 212.637 382.406 cv
212.945 382.406 213.232 382.448 213.498 382.525 cv
213.764 382.609 214.023 382.728 214.261 382.889 cv
.750179 .679652 .670192 .901488 cmyk
f
215.325 382.497 mo
216.256 382.497 li
218.517 386.767 li
218.517 382.497 li
219.189 382.497 li
219.189 387.6 li
218.258 387.6 li
215.997 383.33 li
215.997 387.6 li
215.325 387.6 li
215.325 382.497 li
f
220.561 382.497 mo
221.492 382.497 li
223.753 386.767 li
223.753 382.497 li
224.425 382.497 li
224.425 387.6 li
223.494 387.6 li
221.233 383.33 li
221.233 387.6 li
220.561 387.6 li
220.561 382.497 li
f
225.454 385.402 mo
227.295 385.402 li
227.295 385.962 li
225.454 385.962 li
225.454 385.402 li
f
228.324 382.497 mo
229.017 382.497 li
229.017 387.019 li
231.502 387.019 li
231.502 387.6 li
228.324 387.6 li
228.324 382.497 li
f
235.282 382.665 mo
235.282 383.337 li
235.016 383.211 234.771 383.12 234.54 383.057 cv
234.302 383.001 234.078 382.966 233.868 382.966 cv
233.49 382.966 233.196 383.043 232.993 383.183 cv
232.79 383.33 232.692 383.54 232.692 383.806 cv
232.692 384.03 232.755 384.205 232.895 384.317 cv
233.028 384.436 233.287 384.527 233.665 384.597 cv
234.085 384.681 li
234.596 384.779 234.974 384.954 235.219 385.199 cv
235.464 385.451 235.59 385.78 235.59 386.193 cv
235.59 386.69 235.422 387.061 235.093 387.313 cv
234.757 387.565 234.274 387.691 233.637 387.691 cv
233.392 387.691 233.133 387.663 232.86 387.614 cv
232.587 387.565 232.307 387.488 232.02 387.376 cv
232.02 386.662 li
232.3 386.823 232.573 386.942 232.839 387.019 cv
233.105 387.103 233.371 387.138 233.637 387.138 cv
234.029 387.138 234.33 387.061 234.547 386.907 cv
234.757 386.753 234.869 386.536 234.869 386.242 cv
234.869 385.99 234.792 385.794 234.638 385.654 cv
234.484 385.514 234.232 385.409 233.882 385.339 cv
233.462 385.255 li
232.944 385.157 232.573 384.996 232.342 384.772 cv
232.111 384.555 231.999 384.254 231.999 383.862 cv
231.999 383.414 232.153 383.057 232.475 382.798 cv
232.79 382.539 233.231 382.406 233.791 382.406 cv
234.029 382.406 234.267 382.427 234.519 382.469 cv
234.764 382.511 235.016 382.581 235.282 382.665 cv
f
235.968 382.497 mo
240.28 382.497 li
240.28 383.078 li
238.467 383.078 li
238.467 387.6 li
237.774 387.6 li
237.774 383.078 li
235.968 383.078 li
235.968 382.497 li
f
240.945 382.497 mo
241.974 382.497 li
243.276 385.969 li
244.585 382.497 li
245.614 382.497 li
245.614 387.6 li
244.942 387.6 li
244.942 383.12 li
243.626 386.62 li
242.933 386.62 li
241.617 383.12 li
241.617 387.6 li
240.945 387.6 li
240.945 382.497 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
