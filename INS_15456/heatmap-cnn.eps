%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: heatmap-cnn.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: Lavender
%%CreationDate: 2020/2/17, 17:41:03
%%BoundingBox: 0 0 352 310
%%HiResBoundingBox: 0 0 351.6746 309.4212
%%CropBox: 0 0 351.6746 309.4212
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 636 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-02-17T08:55:09Z"
   xmp:CreatorTool="matplotlib 3.1.1, http://matplotlib.org"
   xmp:ModifyDate="2020-02-17T08:55:09Z"
   pdf:Producer="macOS 版本 10.14.1（版号 18B75） Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -309.421 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 309.421 li
351.675 309.421 li
351.675 0 li
cp
clp
-64.1406 314.565 mo
396.659 314.565 li
396.659 -31.0346 li
-64.1406 -31.0346 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
126.214 170.154 mo
305.706 170.154 li
305.706 10.4374 li
126.214 10.4374 li
cp
f
gsave
126.214 170.154 mo
305.706 170.154 li
305.706 10.4374 li
126.214 10.4374 li
cp
clp
126.214 3.17761 mo
141.171 3.17761 li
141.171 17.6972 li
126.214 17.6972 li
126.214 3.17761 li
1 .87512 .272587 .143648 cmyk
f
141.171 3.17761 mo
156.129 3.17761 li
156.129 17.6972 li
141.171 17.6972 li
141.171 3.17761 li
.0216678 .00573739 .000244144 0 cmyk
f
156.129 3.17761 mo
171.087 3.17761 li
171.087 17.6972 li
156.129 17.6972 li
156.129 3.17761 li
f
171.087 3.17761 mo
186.044 3.17761 li
186.044 17.6972 li
171.087 17.6972 li
171.087 3.17761 li
f
186.044 3.17761 mo
201.002 3.17761 li
201.002 17.6972 li
186.044 17.6972 li
186.044 3.17761 li
.0265202 .00753796 .000854505 0 cmyk
f
201.002 3.17761 mo
215.96 3.17761 li
215.96 17.6972 li
201.002 17.6972 li
201.002 3.17761 li
.0216678 .00573739 .000244144 0 cmyk
f
215.96 3.17761 mo
230.918 3.17761 li
230.918 17.6972 li
215.96 17.6972 li
215.96 3.17761 li
f
230.918 3.17761 mo
245.875 3.17761 li
245.875 17.6972 li
230.918 17.6972 li
230.918 3.17761 li
f
245.875 3.17761 mo
260.833 3.17761 li
260.833 17.6972 li
245.875 17.6972 li
245.875 3.17761 li
f
260.833 3.17761 mo
275.791 3.17761 li
275.791 17.6972 li
260.833 17.6972 li
260.833 3.17761 li
.0265202 .00753796 .000854505 0 cmyk
f
275.791 3.17761 mo
290.748 3.17761 li
290.748 17.6972 li
275.791 17.6972 li
275.791 3.17761 li
.0241398 .00671397 .000610361 0 cmyk
f
290.748 3.17761 mo
305.706 3.17761 li
305.706 17.6972 li
290.748 17.6972 li
290.748 3.17761 li
f
126.214 17.6972 mo
141.171 17.6972 li
141.171 32.2169 li
126.214 32.2169 li
126.214 17.6972 li
.0216678 .00573739 .000244144 0 cmyk
f
141.171 17.6972 mo
156.129 17.6972 li
156.129 32.2169 li
141.171 32.2169 li
141.171 17.6972 li
1 .877806 .279423 .152712 cmyk
f
156.129 17.6972 mo
171.087 17.6972 li
171.087 32.2169 li
156.129 32.2169 li
156.129 17.6972 li
.0216678 .00573739 .000244144 0 cmyk
f
171.087 17.6972 mo
186.044 17.6972 li
186.044 32.2169 li
171.087 32.2169 li
171.087 17.6972 li
.0241398 .00671397 .000610361 0 cmyk
f
186.044 17.6972 mo
201.002 17.6972 li
201.002 32.2169 li
186.044 32.2169 li
186.044 17.6972 li
.0216678 .00573739 .000244144 0 cmyk
f
201.002 17.6972 mo
215.96 17.6972 li
215.96 32.2169 li
201.002 32.2169 li
201.002 17.6972 li
.0241398 .00671397 .000610361 0 cmyk
f
215.96 17.6972 mo
230.918 17.6972 li
230.918 32.2169 li
215.96 32.2169 li
215.96 17.6972 li
f
230.918 17.6972 mo
245.875 17.6972 li
245.875 32.2169 li
230.918 32.2169 li
230.918 17.6972 li
.0216678 .00573739 .000244144 0 cmyk
f
245.875 17.6972 mo
260.833 17.6972 li
260.833 32.2169 li
245.875 32.2169 li
245.875 17.6972 li
f
260.833 17.6972 mo
275.791 17.6972 li
275.791 32.2169 li
260.833 32.2169 li
260.833 17.6972 li
f
275.791 17.6972 mo
290.748 17.6972 li
290.748 32.2169 li
275.791 32.2169 li
275.791 17.6972 li
f
290.748 17.6972 mo
305.706 17.6972 li
305.706 32.2169 li
290.748 32.2169 li
290.748 17.6972 li
.0241398 .00671397 .000610361 0 cmyk
f
126.214 32.2169 mo
141.171 32.2169 li
141.171 46.7366 li
126.214 46.7366 li
126.214 32.2169 li
.0216678 .00573739 .000244144 0 cmyk
f
141.171 32.2169 mo
156.129 32.2169 li
156.129 46.7366 li
141.171 46.7366 li
141.171 32.2169 li
.0241398 .00671397 .000610361 0 cmyk
f
156.129 32.2169 mo
171.087 32.2169 li
171.087 46.7366 li
156.129 46.7366 li
156.129 32.2169 li
1 .877806 .279423 .152712 cmyk
f
171.087 32.2169 mo
186.044 32.2169 li
186.044 46.7366 li
171.087 46.7366 li
171.087 32.2169 li
.0216678 .00573739 .000244144 0 cmyk
f
186.044 32.2169 mo
201.002 32.2169 li
201.002 46.7366 li
186.044 46.7366 li
186.044 32.2169 li
f
201.002 32.2169 mo
215.96 32.2169 li
215.96 46.7366 li
201.002 46.7366 li
201.002 32.2169 li
.0332952 .00967422 .00122072 0 cmyk
f
215.96 32.2169 mo
230.918 32.2169 li
230.918 46.7366 li
215.96 46.7366 li
215.96 32.2169 li
.0216678 .00573739 .000244144 0 cmyk
f
230.918 32.2169 mo
245.875 32.2169 li
245.875 46.7366 li
230.918 46.7366 li
230.918 32.2169 li
f
245.875 32.2169 mo
260.833 32.2169 li
260.833 46.7366 li
245.875 46.7366 li
245.875 32.2169 li
f
260.833 32.2169 mo
275.791 32.2169 li
275.791 46.7366 li
260.833 46.7366 li
260.833 32.2169 li
f
275.791 32.2169 mo
290.748 32.2169 li
290.748 46.7366 li
275.791 46.7366 li
275.791 32.2169 li
f
290.748 32.2169 mo
305.706 32.2169 li
305.706 46.7366 li
290.748 46.7366 li
290.748 32.2169 li
f
126.214 46.7366 mo
141.171 46.7366 li
141.171 61.2563 li
126.214 61.2563 li
126.214 46.7366 li
.0265202 .00753796 .000854505 0 cmyk
f
141.171 46.7366 mo
156.129 46.7366 li
156.129 61.2563 li
141.171 61.2563 li
141.171 46.7366 li
.0216678 .00573739 .000244144 0 cmyk
f
156.129 46.7366 mo
171.087 46.7366 li
171.087 61.2563 li
156.129 61.2563 li
156.129 46.7366 li
f
171.087 46.7366 mo
186.044 46.7366 li
186.044 61.2563 li
171.087 61.2563 li
171.087 46.7366 li
1 .826993 .18436 .051667 cmyk
f
186.044 46.7366 mo
201.002 46.7366 li
201.002 61.2563 li
186.044 61.2563 li
186.044 46.7366 li
.0216678 .00573739 .000244144 0 cmyk
f
201.002 46.7366 mo
215.96 46.7366 li
215.96 61.2563 li
201.002 61.2563 li
201.002 46.7366 li
f
215.96 46.7366 mo
230.918 46.7366 li
230.918 61.2563 li
215.96 61.2563 li
215.96 46.7366 li
.0241398 .00671397 .000610361 0 cmyk
f
230.918 46.7366 mo
245.875 46.7366 li
245.875 61.2563 li
230.918 61.2563 li
230.918 46.7366 li
.0530404 .0162051 .00283818 0 cmyk
f
245.875 46.7366 mo
260.833 46.7366 li
260.833 61.2563 li
245.875 61.2563 li
245.875 46.7366 li
.0216678 .00573739 .000244144 0 cmyk
f
260.833 46.7366 mo
275.791 46.7366 li
275.791 61.2563 li
260.833 61.2563 li
260.833 46.7366 li
f
275.791 46.7366 mo
290.748 46.7366 li
290.748 61.2563 li
275.791 61.2563 li
275.791 46.7366 li
f
290.748 46.7366 mo
305.706 46.7366 li
305.706 61.2563 li
290.748 61.2563 li
290.748 46.7366 li
.0265202 .00753796 .000854505 0 cmyk
f
126.214 61.2563 mo
141.171 61.2563 li
141.171 75.776 li
126.214 75.776 li
126.214 61.2563 li
.0498665 .0152895 .00265507 0 cmyk
f
141.171 61.2563 mo
156.129 61.2563 li
156.129 75.776 li
141.171 75.776 li
141.171 61.2563 li
.028809 .00823987 .0010071 0 cmyk
f
156.129 61.2563 mo
171.087 61.2563 li
171.087 75.776 li
156.129 75.776 li
156.129 61.2563 li
.0216678 .00573739 .000244144 0 cmyk
f
171.087 61.2563 mo
186.044 61.2563 li
186.044 75.776 li
171.087 75.776 li
171.087 61.2563 li
.028809 .00823987 .0010071 0 cmyk
f
186.044 61.2563 mo
201.002 61.2563 li
201.002 75.776 li
186.044 75.776 li
186.044 61.2563 li
1 .813169 .166629 .0375982 cmyk
f
201.002 61.2563 mo
215.96 61.2563 li
215.96 75.776 li
201.002 75.776 li
201.002 61.2563 li
.028809 .00823987 .0010071 0 cmyk
f
215.96 61.2563 mo
230.918 61.2563 li
230.918 75.776 li
215.96 75.776 li
215.96 61.2563 li
.0216678 .00573739 .000244144 0 cmyk
f
230.918 61.2563 mo
245.875 61.2563 li
245.875 75.776 li
230.918 75.776 li
230.918 61.2563 li
f
245.875 61.2563 mo
260.833 61.2563 li
260.833 75.776 li
245.875 75.776 li
245.875 61.2563 li
f
260.833 61.2563 mo
275.791 61.2563 li
275.791 75.776 li
260.833 75.776 li
260.833 61.2563 li
f
275.791 61.2563 mo
290.748 61.2563 li
290.748 75.776 li
275.791 75.776 li
275.791 61.2563 li
f
290.748 61.2563 mo
305.706 61.2563 li
305.706 75.776 li
290.748 75.776 li
290.748 61.2563 li
f
126.214 75.776 mo
141.171 75.776 li
141.171 90.2957 li
126.214 90.2957 li
126.214 75.776 li
f
141.171 75.776 mo
156.129 75.776 li
156.129 90.2957 li
141.171 90.2957 li
141.171 75.776 li
.0241398 .00671397 .000610361 0 cmyk
f
156.129 75.776 mo
171.087 75.776 li
171.087 90.2957 li
156.129 90.2957 li
156.129 75.776 li
.0216678 .00573739 .000244144 0 cmyk
f
171.087 75.776 mo
186.044 75.776 li
186.044 90.2957 li
171.087 90.2957 li
171.087 75.776 li
f
186.044 75.776 mo
201.002 75.776 li
201.002 90.2957 li
186.044 90.2957 li
186.044 75.776 li
f
201.002 75.776 mo
215.96 75.776 li
215.96 90.2957 li
201.002 90.2957 li
201.002 75.776 li
1 .877806 .279423 .152712 cmyk
f
215.96 75.776 mo
230.918 75.776 li
230.918 90.2957 li
215.96 90.2957 li
215.96 75.776 li
.0332952 .00967422 .00122072 0 cmyk
f
230.918 75.776 mo
245.875 75.776 li
245.875 90.2957 li
230.918 90.2957 li
230.918 75.776 li
.0216678 .00573739 .000244144 0 cmyk
f
245.875 75.776 mo
260.833 75.776 li
260.833 90.2957 li
245.875 90.2957 li
245.875 75.776 li
f
260.833 75.776 mo
275.791 75.776 li
275.791 90.2957 li
260.833 90.2957 li
260.833 75.776 li
f
275.791 75.776 mo
290.748 75.776 li
290.748 90.2957 li
275.791 90.2957 li
275.791 75.776 li
f
290.748 75.776 mo
305.706 75.776 li
305.706 90.2957 li
290.748 90.2957 li
290.748 75.776 li
f
126.214 90.2957 mo
141.171 90.2957 li
141.171 104.815 li
126.214 104.815 li
126.214 90.2957 li
f
141.171 90.2957 mo
156.129 90.2957 li
156.129 104.815 li
141.171 104.815 li
141.171 90.2957 li
f
156.129 90.2957 mo
171.087 90.2957 li
171.087 104.815 li
156.129 104.815 li
156.129 90.2957 li
.0241398 .00671397 .000610361 0 cmyk
f
171.087 90.2957 mo
186.044 90.2957 li
186.044 104.815 li
171.087 104.815 li
171.087 90.2957 li
f
186.044 90.2957 mo
201.002 90.2957 li
201.002 104.815 li
186.044 104.815 li
186.044 90.2957 li
.0216678 .00573739 .000244144 0 cmyk
f
201.002 90.2957 mo
215.96 90.2957 li
215.96 104.815 li
201.002 104.815 li
201.002 90.2957 li
f
215.96 90.2957 mo
230.918 90.2957 li
230.918 104.815 li
215.96 104.815 li
215.96 90.2957 li
1 .852964 .227604 .0950637 cmyk
f
230.918 90.2957 mo
245.875 90.2957 li
245.875 104.815 li
230.918 104.815 li
230.918 90.2957 li
.0406195 .0123903 .00189212 0 cmyk
f
245.875 90.2957 mo
260.833 90.2957 li
260.833 104.815 li
245.875 104.815 li
245.875 90.2957 li
.0216678 .00573739 .000244144 0 cmyk
f
260.833 90.2957 mo
275.791 90.2957 li
275.791 104.815 li
260.833 104.815 li
260.833 90.2957 li
f
275.791 90.2957 mo
290.748 90.2957 li
290.748 104.815 li
275.791 104.815 li
275.791 90.2957 li
f
290.748 90.2957 mo
305.706 90.2957 li
305.706 104.815 li
290.748 104.815 li
290.748 90.2957 li
.0241398 .00671397 .000610361 0 cmyk
f
126.214 104.815 mo
141.171 104.815 li
141.171 119.335 li
126.214 119.335 li
126.214 104.815 li
f
141.171 104.815 mo
156.129 104.815 li
156.129 119.335 li
141.171 119.335 li
141.171 104.815 li
.0216678 .00573739 .000244144 0 cmyk
f
156.129 104.815 mo
171.087 104.815 li
171.087 119.335 li
156.129 119.335 li
156.129 104.815 li
f
171.087 104.815 mo
186.044 104.815 li
186.044 119.335 li
171.087 119.335 li
171.087 104.815 li
.0719921 .0213321 .00314336 0 cmyk
f
186.044 104.815 mo
201.002 104.815 li
201.002 119.335 li
186.044 119.335 li
186.044 104.815 li
.0241398 .00671397 .000610361 0 cmyk
f
201.002 104.815 mo
215.96 104.815 li
215.96 119.335 li
201.002 119.335 li
201.002 104.815 li
.0216678 .00573739 .000244144 0 cmyk
f
215.96 104.815 mo
230.918 104.815 li
230.918 119.335 li
215.96 119.335 li
215.96 104.815 li
.0498665 .0152895 .00265507 0 cmyk
f
230.918 104.815 mo
245.875 104.815 li
245.875 119.335 li
230.918 119.335 li
230.918 104.815 li
.804593 .43711 .0413825 .00015259 cmyk
f
245.875 104.815 mo
260.833 104.815 li
260.833 119.335 li
245.875 119.335 li
245.875 104.815 li
.0216678 .00573739 .000244144 0 cmyk
f
260.833 104.815 mo
275.791 104.815 li
275.791 119.335 li
260.833 119.335 li
260.833 104.815 li
.0241398 .00671397 .000610361 0 cmyk
f
275.791 104.815 mo
290.748 104.815 li
290.748 119.335 li
275.791 119.335 li
275.791 104.815 li
.0216678 .00573739 .000244144 0 cmyk
f
290.748 104.815 mo
305.706 104.815 li
305.706 119.335 li
290.748 119.335 li
290.748 104.815 li
.152865 .0485847 .00640879 0 cmyk
f
126.214 119.335 mo
141.171 119.335 li
141.171 133.855 li
126.214 133.855 li
126.214 119.335 li
.0216678 .00573739 .000244144 0 cmyk
f
141.171 119.335 mo
156.129 119.335 li
156.129 133.855 li
141.171 133.855 li
141.171 119.335 li
f
156.129 119.335 mo
171.087 119.335 li
171.087 133.855 li
156.129 133.855 li
156.129 119.335 li
f
171.087 119.335 mo
186.044 119.335 li
186.044 133.855 li
171.087 133.855 li
171.087 119.335 li
.0241398 .00671397 .000610361 0 cmyk
f
186.044 119.335 mo
201.002 119.335 li
201.002 133.855 li
186.044 133.855 li
186.044 119.335 li
.0216678 .00573739 .000244144 0 cmyk
f
201.002 119.335 mo
215.96 119.335 li
215.96 133.855 li
201.002 133.855 li
201.002 119.335 li
f
215.96 119.335 mo
230.918 119.335 li
230.918 133.855 li
215.96 133.855 li
215.96 119.335 li
f
230.918 119.335 mo
245.875 119.335 li
245.875 133.855 li
230.918 133.855 li
230.918 119.335 li
f
245.875 119.335 mo
260.833 119.335 li
260.833 133.855 li
245.875 133.855 li
245.875 119.335 li
1 .884916 .298192 .192264 cmyk
f
260.833 119.335 mo
275.791 119.335 li
275.791 133.855 li
260.833 133.855 li
260.833 119.335 li
.0216678 .00573739 .000244144 0 cmyk
f
275.791 119.335 mo
290.748 119.335 li
290.748 133.855 li
275.791 133.855 li
275.791 119.335 li
f
290.748 119.335 mo
305.706 119.335 li
305.706 133.855 li
290.748 133.855 li
290.748 119.335 li
f
126.214 133.855 mo
141.171 133.855 li
141.171 148.374 li
126.214 148.374 li
126.214 133.855 li
f
141.171 133.855 mo
156.129 133.855 li
156.129 148.374 li
141.171 148.374 li
141.171 133.855 li
f
156.129 133.855 mo
171.087 133.855 li
171.087 148.374 li
156.129 148.374 li
156.129 133.855 li
f
171.087 133.855 mo
186.044 133.855 li
186.044 148.374 li
171.087 148.374 li
171.087 133.855 li
f
186.044 133.855 mo
201.002 133.855 li
201.002 148.374 li
186.044 148.374 li
186.044 133.855 li
f
201.002 133.855 mo
215.96 133.855 li
215.96 148.374 li
201.002 148.374 li
201.002 133.855 li
f
215.96 133.855 mo
230.918 133.855 li
230.918 148.374 li
215.96 148.374 li
215.96 133.855 li
f
230.918 133.855 mo
245.875 133.855 li
245.875 148.374 li
230.918 148.374 li
230.918 133.855 li
f
245.875 133.855 mo
260.833 133.855 li
260.833 148.374 li
245.875 148.374 li
245.875 133.855 li
f
260.833 133.855 mo
275.791 133.855 li
275.791 148.374 li
260.833 148.374 li
260.833 133.855 li
1 .885771 .300633 .203677 cmyk
f
275.791 133.855 mo
290.748 133.855 li
290.748 148.374 li
275.791 148.374 li
275.791 133.855 li
.0216678 .00573739 .000244144 0 cmyk
f
290.748 133.855 mo
305.706 133.855 li
305.706 148.374 li
290.748 148.374 li
290.748 133.855 li
f
126.214 148.374 mo
141.171 148.374 li
141.171 162.894 li
126.214 162.894 li
126.214 148.374 li
f
141.171 148.374 mo
156.129 148.374 li
156.129 162.894 li
141.171 162.894 li
141.171 148.374 li
f
156.129 148.374 mo
171.087 148.374 li
171.087 162.894 li
156.129 162.894 li
156.129 148.374 li
f
171.087 148.374 mo
186.044 148.374 li
186.044 162.894 li
171.087 162.894 li
171.087 148.374 li
f
186.044 148.374 mo
201.002 148.374 li
201.002 162.894 li
186.044 162.894 li
186.044 148.374 li
f
201.002 148.374 mo
215.96 148.374 li
215.96 162.894 li
201.002 162.894 li
201.002 148.374 li
f
215.96 148.374 mo
230.918 148.374 li
230.918 162.894 li
215.96 162.894 li
215.96 148.374 li
f
230.918 148.374 mo
245.875 148.374 li
245.875 162.894 li
230.918 162.894 li
230.918 148.374 li
f
245.875 148.374 mo
260.833 148.374 li
260.833 162.894 li
245.875 162.894 li
245.875 148.374 li
f
260.833 148.374 mo
275.791 148.374 li
275.791 162.894 li
260.833 162.894 li
260.833 148.374 li
f
275.791 148.374 mo
290.748 148.374 li
290.748 162.894 li
275.791 162.894 li
275.791 148.374 li
1 .885771 .300633 .203677 cmyk
f
290.748 148.374 mo
305.706 148.374 li
305.706 162.894 li
290.748 162.894 li
290.748 148.374 li
.0216678 .00573739 .000244144 0 cmyk
f
126.214 162.894 mo
141.171 162.894 li
141.171 177.414 li
126.214 177.414 li
126.214 162.894 li
.028809 .00823987 .0010071 0 cmyk
f
141.171 162.894 mo
156.129 162.894 li
156.129 177.414 li
141.171 177.414 li
141.171 162.894 li
.0216678 .00573739 .000244144 0 cmyk
f
156.129 162.894 mo
171.087 162.894 li
171.087 177.414 li
156.129 177.414 li
156.129 162.894 li
f
171.087 162.894 mo
186.044 162.894 li
186.044 177.414 li
171.087 177.414 li
171.087 162.894 li
.0332952 .00967422 .00122072 0 cmyk
f
186.044 162.894 mo
201.002 162.894 li
201.002 177.414 li
186.044 177.414 li
186.044 162.894 li
.0216678 .00573739 .000244144 0 cmyk
f
201.002 162.894 mo
215.96 162.894 li
215.96 177.414 li
201.002 177.414 li
201.002 162.894 li
f
215.96 162.894 mo
230.918 162.894 li
230.918 177.414 li
215.96 177.414 li
215.96 162.894 li
.0241398 .00671397 .000610361 0 cmyk
f
230.918 162.894 mo
245.875 162.894 li
245.875 177.414 li
230.918 177.414 li
230.918 162.894 li
.0406195 .0123903 .00189212 0 cmyk
f
245.875 162.894 mo
260.833 162.894 li
260.833 177.414 li
245.875 177.414 li
245.875 162.894 li
.0216678 .00573739 .000244144 0 cmyk
f
260.833 162.894 mo
275.791 162.894 li
275.791 177.414 li
260.833 177.414 li
260.833 162.894 li
f
275.791 162.894 mo
290.748 162.894 li
290.748 177.414 li
275.791 177.414 li
275.791 162.894 li
f
290.748 162.894 mo
305.706 162.894 li
305.706 177.414 li
290.748 177.414 li
290.748 162.894 li
1 .830686 .190341 .0580148 cmyk
f
grestore
gsave
-64.1406 314.565 mo
396.659 314.565 li
396.659 -31.0346 li
-64.1406 -31.0346 li
cp
clp
133.692 170.154 mo
133.692 173.654 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
133.692 170.154 mo
133.692 173.654 li
@
133.71 273.649 mo
133.71 274.671 133.836 275.371 134.06 275.763 cv
134.298 276.155 134.69 276.351 135.25 276.351 cv
135.698 276.351 136.062 276.211 136.314 275.917 cv
136.58 275.623 136.706 275.217 136.706 274.713 cv
136.706 274.013 136.468 273.453 135.964 273.033 cv
135.474 272.613 134.816 272.403 133.99 272.403 cv
133.71 272.403 li
133.71 273.649 li
133.192 271.143 mo
137.56 271.143 li
137.56 272.403 li
136.398 272.403 li
136.874 272.697 137.21 273.061 137.42 273.481 cv
137.63 273.901 137.742 274.433 137.742 275.049 cv
137.742 275.833 137.532 276.463 137.098 276.925 cv
136.664 277.387 136.076 277.611 135.334 277.611 cv
134.48 277.611 133.836 277.331 133.388 276.743 cv
132.954 276.169 132.73 275.315 132.73 274.167 cv
132.73 272.403 li
132.604 272.403 li
132.03 272.403 131.582 272.599 131.26 272.977 cv
130.952 273.355 130.784 273.887 130.784 274.573 cv
130.784 275.021 130.84 275.441 130.952 275.861 cv
131.064 276.281 131.218 276.673 131.414 277.051 cv
130.252 277.051 li
130.084 276.603 129.944 276.155 129.86 275.721 cv
129.776 275.287 129.72 274.867 129.72 274.447 cv
129.72 273.341 130.014 272.515 130.588 271.969 cv
131.162 271.423 132.03 271.143 133.192 271.143 cv
f
136.412 267.335 mo
140.458 267.335 li
140.458 268.595 li
129.902 268.595 li
129.902 267.335 li
131.064 267.335 li
130.616 267.083 130.28 266.747 130.056 266.341 cv
129.832 265.935 129.72 265.445 129.72 264.885 cv
129.72 263.961 130.098 263.205 130.826 262.617 cv
131.568 262.043 132.534 261.749 133.738 261.749 cv
134.942 261.749 135.922 262.043 136.65 262.617 cv
137.378 263.205 137.742 263.961 137.742 264.885 cv
137.742 265.445 137.63 265.935 137.42 266.341 cv
137.21 266.747 136.874 267.083 136.412 267.335 cv
133.738 263.051 mo
132.814 263.051 132.1 263.247 131.568 263.625 cv
131.036 264.017 130.77 264.535 130.77 265.193 cv
130.77 265.865 131.036 266.383 131.568 266.761 cv
132.1 267.153 132.814 267.335 133.738 267.335 cv
134.662 267.335 135.39 267.153 135.922 266.761 cv
136.454 266.383 136.706 265.865 136.706 265.193 cv
136.706 264.535 136.454 264.017 135.922 263.625 cv
135.39 263.247 134.662 263.051 133.738 263.051 cv
f
129.902 259.663 mo
129.902 258.403 li
137.56 258.403 li
137.56 259.663 li
129.902 259.663 li
126.92 259.663 mo
126.92 258.403 li
128.516 258.403 li
128.516 259.663 li
126.92 259.663 li
f
135.824 255.589 mo
135.824 254.147 li
137.56 254.147 li
137.56 255.589 li
135.824 255.589 li
f
133.738 245.817 mo
132.814 245.817 132.1 246.013 131.568 246.391 cv
131.036 246.783 130.77 247.301 130.77 247.959 cv
130.77 248.631 131.036 249.149 131.568 249.527 cv
132.1 249.919 132.814 250.101 133.738 250.101 cv
134.662 250.101 135.39 249.919 135.922 249.527 cv
136.454 249.149 136.706 248.631 136.706 247.959 cv
136.706 247.301 136.454 246.783 135.922 246.391 cv
135.39 246.013 134.662 245.817 133.738 245.817 cv
131.064 250.101 mo
130.616 249.849 130.28 249.513 130.056 249.107 cv
129.832 248.701 129.72 248.211 129.72 247.651 cv
129.72 246.727 130.098 245.971 130.826 245.383 cv
131.568 244.809 132.534 244.515 133.738 244.515 cv
134.942 244.515 135.922 244.809 136.65 245.383 cv
137.378 245.971 137.742 246.727 137.742 247.651 cv
137.742 248.211 137.63 248.701 137.42 249.107 cv
137.21 249.513 136.874 249.849 136.412 250.101 cv
137.56 250.101 li
137.56 251.361 li
126.92 251.361 li
126.92 250.101 li
131.064 250.101 li
f
129.902 242.429 mo
129.902 241.169 li
137.56 241.169 li
137.56 242.429 li
129.902 242.429 li
126.92 242.429 mo
126.92 241.169 li
128.516 241.169 li
128.516 242.429 li
126.92 242.429 li
f
126.92 238.537 mo
126.92 237.277 li
137.56 237.277 li
137.56 238.537 li
126.92 238.537 li
f
129.902 234.645 mo
129.902 233.385 li
137.56 233.385 li
137.56 234.645 li
129.902 234.645 li
126.92 234.645 mo
126.92 233.385 li
128.516 233.385 li
128.516 234.645 li
126.92 234.645 li
f
133.738 225.251 mo
132.814 225.251 132.1 225.447 131.568 225.825 cv
131.036 226.217 130.77 226.735 130.77 227.393 cv
130.77 228.065 131.036 228.583 131.568 228.961 cv
132.1 229.353 132.814 229.535 133.738 229.535 cv
134.662 229.535 135.39 229.353 135.922 228.961 cv
136.454 228.583 136.706 228.065 136.706 227.393 cv
136.706 226.735 136.454 226.217 135.922 225.825 cv
135.39 225.447 134.662 225.251 133.738 225.251 cv
131.064 229.535 mo
130.616 229.283 130.28 228.947 130.056 228.541 cv
129.832 228.135 129.72 227.645 129.72 227.085 cv
129.72 226.161 130.098 225.405 130.826 224.817 cv
131.568 224.243 132.534 223.949 133.738 223.949 cv
134.942 223.949 135.922 224.243 136.65 224.817 cv
137.378 225.405 137.742 226.161 137.742 227.085 cv
137.742 227.645 137.63 228.135 137.42 228.541 cv
137.21 228.947 136.874 229.283 136.412 229.535 cv
137.56 229.535 li
137.56 230.795 li
126.92 230.795 li
126.92 229.535 li
131.064 229.535 li
f
129.902 221.863 mo
129.902 220.603 li
137.56 220.603 li
137.56 221.863 li
129.902 221.863 li
126.92 221.863 mo
126.92 220.603 li
128.516 220.603 li
128.516 221.863 li
126.92 221.863 li
f
126.92 217.971 mo
126.92 216.711 li
137.56 216.711 li
137.56 217.971 li
126.92 217.971 li
f
129.902 214.079 mo
129.902 212.819 li
137.56 212.819 li
137.56 214.079 li
129.902 214.079 li
126.92 214.079 mo
126.92 212.819 li
128.516 212.819 li
128.516 214.079 li
126.92 214.079 li
f
135.824 210.005 mo
135.824 208.563 li
137.56 208.563 li
137.56 210.005 li
135.824 210.005 li
f
130.196 200.219 mo
131.372 200.219 li
131.176 200.583 131.036 200.933 130.938 201.297 cv
130.84 201.661 130.784 202.011 130.784 202.375 cv
130.784 203.187 131.05 203.831 131.568 204.279 cv
132.086 204.727 132.814 204.951 133.738 204.951 cv
134.676 204.951 135.404 204.727 135.922 204.279 cv
136.44 203.831 136.692 203.187 136.692 202.375 cv
136.692 202.011 136.65 201.661 136.552 201.297 cv
136.454 200.933 136.3 200.583 136.104 200.219 cv
137.266 200.219 li
137.434 200.583 137.56 200.947 137.63 201.311 cv
137.7 201.689 137.742 202.095 137.742 202.515 cv
137.742 203.663 137.392 204.587 136.664 205.259 cv
135.95 205.945 134.97 206.281 133.738 206.281 cv
132.492 206.281 131.512 205.945 130.798 205.259 cv
130.084 204.573 129.72 203.635 129.72 202.431 cv
129.72 202.039 129.762 201.661 129.846 201.297 cv
129.93 200.933 130.042 200.569 130.196 200.219 cv
f
130.784 195.067 mo
130.784 195.739 131.05 196.271 131.582 196.663 cv
132.114 197.055 132.828 197.251 133.738 197.251 cv
134.662 197.251 135.376 197.069 135.908 196.677 cv
136.44 196.285 136.692 195.753 136.692 195.067 cv
136.692 194.395 136.44 193.863 135.908 193.471 cv
135.376 193.079 134.662 192.883 133.738 192.883 cv
132.842 192.883 132.114 193.079 131.582 193.471 cv
131.05 193.863 130.784 194.395 130.784 195.067 cv
129.72 195.067 mo
129.72 193.975 130.084 193.121 130.784 192.491 cv
131.498 191.875 132.478 191.553 133.738 191.553 cv
134.998 191.553 135.978 191.875 136.678 192.491 cv
137.392 193.121 137.742 193.975 137.742 195.067 cv
137.742 196.173 137.392 197.041 136.678 197.657 cv
135.978 198.273 134.998 198.581 133.738 198.581 cv
132.478 198.581 131.498 198.273 130.784 197.657 cv
130.084 197.041 129.72 196.173 129.72 195.067 cv
f
131.372 183.503 mo
130.812 183.195 130.406 182.817 130.126 182.383 cv
129.86 181.949 129.72 181.431 129.72 180.829 cv
129.72 180.045 130 179.429 130.56 178.995 cv
131.12 178.561 131.918 178.337 132.94 178.337 cv
137.56 178.337 li
137.56 179.597 li
132.982 179.597 li
132.254 179.597 131.708 179.737 131.344 179.989 cv
130.994 180.255 130.812 180.647 130.812 181.179 cv
130.812 181.837 131.036 182.355 131.47 182.733 cv
131.904 183.111 132.492 183.293 133.234 183.293 cv
137.56 183.293 li
137.56 184.553 li
132.982 184.553 li
132.254 184.553 131.708 184.693 131.344 184.945 cv
130.994 185.211 130.812 185.617 130.812 186.149 cv
130.812 186.793 131.036 187.311 131.47 187.689 cv
131.904 188.067 132.492 188.249 133.234 188.249 cv
137.56 188.249 li
137.56 189.509 li
129.902 189.509 li
129.902 188.249 li
131.092 188.249 li
130.63 187.969 130.28 187.619 130.056 187.213 cv
129.832 186.821 129.72 186.345 129.72 185.785 cv
129.72 185.225 129.86 184.763 130.14 184.371 cv
130.42 183.979 130.84 183.699 131.372 183.503 cv
f
148.65 170.154 mo
148.65 173.654 li
f
148.65 170.154 mo
148.65 173.654 li
@
148.667 260.602 mo
148.667 261.624 148.793 262.324 149.017 262.716 cv
149.255 263.108 149.647 263.304 150.207 263.304 cv
150.655 263.304 151.019 263.164 151.271 262.87 cv
151.537 262.576 151.663 262.17 151.663 261.666 cv
151.663 260.966 151.425 260.406 150.921 259.986 cv
150.431 259.566 149.773 259.356 148.947 259.356 cv
148.667 259.356 li
148.667 260.602 li
148.149 258.096 mo
152.517 258.096 li
152.517 259.356 li
151.355 259.356 li
151.831 259.65 152.167 260.014 152.377 260.434 cv
152.587 260.854 152.699 261.386 152.699 262.002 cv
152.699 262.786 152.489 263.416 152.055 263.878 cv
151.621 264.34 151.033 264.564 150.291 264.564 cv
149.437 264.564 148.793 264.284 148.345 263.696 cv
147.911 263.122 147.687 262.268 147.687 261.12 cv
147.687 259.356 li
147.561 259.356 li
146.987 259.356 146.539 259.552 146.217 259.93 cv
145.909 260.308 145.741 260.84 145.741 261.526 cv
145.741 261.974 145.797 262.394 145.909 262.814 cv
146.021 263.234 146.175 263.626 146.371 264.004 cv
145.209 264.004 li
145.041 263.556 144.901 263.108 144.817 262.674 cv
144.733 262.24 144.677 261.82 144.677 261.4 cv
144.677 260.294 144.971 259.468 145.545 258.922 cv
146.119 258.376 146.987 258.096 148.149 258.096 cv
f
151.369 254.288 mo
155.415 254.288 li
155.415 255.548 li
144.859 255.548 li
144.859 254.288 li
146.021 254.288 li
145.573 254.036 145.237 253.7 145.013 253.294 cv
144.789 252.888 144.677 252.398 144.677 251.838 cv
144.677 250.914 145.055 250.158 145.783 249.57 cv
146.525 248.996 147.491 248.702 148.695 248.702 cv
149.899 248.702 150.879 248.996 151.607 249.57 cv
152.335 250.158 152.699 250.914 152.699 251.838 cv
152.699 252.398 152.587 252.888 152.377 253.294 cv
152.167 253.7 151.831 254.036 151.369 254.288 cv
148.695 250.004 mo
147.771 250.004 147.057 250.2 146.525 250.578 cv
145.993 250.97 145.727 251.488 145.727 252.146 cv
145.727 252.818 145.993 253.336 146.525 253.714 cv
147.057 254.106 147.771 254.288 148.695 254.288 cv
149.619 254.288 150.347 254.106 150.879 253.714 cv
151.411 253.336 151.663 252.818 151.663 252.146 cv
151.663 251.488 151.411 250.97 150.879 250.578 cv
150.347 250.2 149.619 250.004 148.695 250.004 cv
f
144.859 246.616 mo
144.859 245.356 li
152.517 245.356 li
152.517 246.616 li
144.859 246.616 li
141.877 246.616 mo
141.877 245.356 li
143.473 245.356 li
143.473 246.616 li
141.877 246.616 li
f
150.781 242.542 mo
150.781 241.1 li
152.517 241.1 li
152.517 242.542 li
150.781 242.542 li
f
144.859 239 mo
144.859 237.74 li
150.837 236.172 li
144.859 234.604 li
144.859 233.12 li
150.837 231.552 li
144.859 229.984 li
144.859 228.724 li
152.517 230.726 li
152.517 232.21 li
146.245 233.862 li
152.517 235.514 li
152.517 236.998 li
144.859 239 li
f
148.373 220.268 mo
148.989 220.268 li
148.989 226.05 li
149.857 225.994 150.529 225.742 150.977 225.266 cv
151.425 224.804 151.649 224.16 151.649 223.32 cv
151.649 222.844 151.593 222.368 151.481 221.92 cv
151.369 221.472 151.187 221.01 150.935 220.562 cv
152.125 220.562 li
152.321 221.01 152.475 221.472 152.559 221.948 cv
152.643 222.424 152.699 222.914 152.699 223.39 cv
152.699 224.622 152.349 225.588 151.649 226.302 cv
150.949 227.016 149.983 227.366 148.765 227.366 cv
147.519 227.366 146.525 227.03 145.783 226.358 cv
145.055 225.686 144.677 224.762 144.677 223.614 cv
144.677 222.578 145.013 221.766 145.671 221.164 cv
146.343 220.576 147.239 220.268 148.373 220.268 cv
148.009 221.528 mo
147.323 221.542 146.777 221.738 146.357 222.102 cv
145.951 222.48 145.741 222.984 145.741 223.6 cv
145.741 224.3 145.951 224.86 146.343 225.28 cv
146.735 225.7 147.295 225.952 148.009 226.008 cv
148.009 221.528 li
f
144.859 218.21 mo
144.859 216.95 li
152.517 216.95 li
152.517 218.21 li
144.859 218.21 li
141.877 218.21 mo
141.877 216.95 li
143.473 216.95 li
143.473 218.21 li
141.877 218.21 li
f
148.695 208.816 mo
147.771 208.816 147.057 209.012 146.525 209.39 cv
145.993 209.782 145.727 210.3 145.727 210.958 cv
145.727 211.63 145.993 212.148 146.525 212.526 cv
147.057 212.918 147.771 213.1 148.695 213.1 cv
149.619 213.1 150.347 212.918 150.879 212.526 cv
151.411 212.148 151.663 211.63 151.663 210.958 cv
151.663 210.3 151.411 209.782 150.879 209.39 cv
150.347 209.012 149.619 208.816 148.695 208.816 cv
146.021 213.1 mo
145.573 212.848 145.237 212.512 145.013 212.106 cv
144.789 211.7 144.677 211.21 144.677 210.65 cv
144.677 209.726 145.055 208.97 145.783 208.382 cv
146.525 207.808 147.491 207.514 148.695 207.514 cv
149.899 207.514 150.879 207.808 151.607 208.382 cv
152.335 208.97 152.699 209.726 152.699 210.65 cv
152.699 211.21 152.587 211.7 152.377 212.106 cv
152.167 212.512 151.831 212.848 151.369 213.1 cv
152.517 213.1 li
152.517 214.36 li
141.877 214.36 li
141.877 213.1 li
146.021 213.1 li
f
145.741 202.46 mo
145.741 203.132 146.007 203.664 146.539 204.056 cv
147.071 204.448 147.785 204.644 148.695 204.644 cv
149.619 204.644 150.333 204.462 150.865 204.07 cv
151.397 203.678 151.649 203.146 151.649 202.46 cv
151.649 201.788 151.397 201.256 150.865 200.864 cv
150.333 200.472 149.619 200.276 148.695 200.276 cv
147.799 200.276 147.071 200.472 146.539 200.864 cv
146.007 201.256 145.741 201.788 145.741 202.46 cv
144.677 202.46 mo
144.677 201.368 145.041 200.514 145.741 199.884 cv
146.455 199.268 147.435 198.946 148.695 198.946 cv
149.955 198.946 150.935 199.268 151.635 199.884 cv
152.349 200.514 152.699 201.368 152.699 202.46 cv
152.699 203.566 152.349 204.434 151.635 205.05 cv
150.935 205.666 149.955 205.974 148.695 205.974 cv
147.435 205.974 146.455 205.666 145.741 205.05 cv
145.041 204.434 144.677 203.566 144.677 202.46 cv
f
150.781 196.678 mo
150.781 195.236 li
152.517 195.236 li
152.517 196.678 li
150.781 196.678 li
f
145.153 186.892 mo
146.329 186.892 li
146.133 187.256 145.993 187.606 145.895 187.97 cv
145.797 188.334 145.741 188.684 145.741 189.048 cv
145.741 189.86 146.007 190.504 146.525 190.952 cv
147.043 191.4 147.771 191.624 148.695 191.624 cv
149.633 191.624 150.361 191.4 150.879 190.952 cv
151.397 190.504 151.649 189.86 151.649 189.048 cv
151.649 188.684 151.607 188.334 151.509 187.97 cv
151.411 187.606 151.257 187.256 151.061 186.892 cv
152.223 186.892 li
152.391 187.256 152.517 187.62 152.587 187.984 cv
152.657 188.362 152.699 188.768 152.699 189.188 cv
152.699 190.336 152.349 191.26 151.621 191.932 cv
150.907 192.618 149.927 192.954 148.695 192.954 cv
147.449 192.954 146.469 192.618 145.755 191.932 cv
145.041 191.246 144.677 190.308 144.677 189.104 cv
144.677 188.712 144.719 188.334 144.803 187.97 cv
144.887 187.606 144.999 187.242 145.153 186.892 cv
f
147.897 178.338 mo
152.517 178.338 li
152.517 179.598 li
147.939 179.598 li
147.211 179.598 146.679 179.752 146.315 180.032 cv
145.951 180.312 145.769 180.732 145.769 181.292 cv
145.769 181.978 145.993 182.51 146.427 182.902 cv
146.861 183.294 147.449 183.49 148.191 183.49 cv
152.517 183.49 li
152.517 184.75 li
144.859 184.75 li
144.859 183.49 li
146.049 183.49 li
145.601 183.196 145.251 182.846 145.027 182.426 cv
144.803 182.02 144.677 181.544 144.677 181.012 cv
144.677 180.144 144.957 179.472 145.503 179.024 cv
146.049 178.576 146.847 178.338 147.897 178.338 cv
f
163.608 170.154 mo
163.608 173.654 li
f
163.608 170.154 mo
163.608 173.654 li
@
160.111 256.259 mo
161.287 256.259 li
161.091 256.623 160.951 256.973 160.853 257.337 cv
160.755 257.701 160.699 258.051 160.699 258.415 cv
160.699 259.227 160.965 259.871 161.483 260.319 cv
162.001 260.767 162.729 260.991 163.653 260.991 cv
164.591 260.991 165.319 260.767 165.837 260.319 cv
166.355 259.871 166.607 259.227 166.607 258.415 cv
166.607 258.051 166.565 257.701 166.467 257.337 cv
166.369 256.973 166.215 256.623 166.019 256.259 cv
167.181 256.259 li
167.349 256.623 167.475 256.987 167.545 257.351 cv
167.615 257.729 167.657 258.135 167.657 258.555 cv
167.657 259.703 167.307 260.627 166.579 261.299 cv
165.865 261.985 164.885 262.321 163.653 262.321 cv
162.407 262.321 161.427 261.985 160.713 261.299 cv
159.999 260.613 159.635 259.675 159.635 258.471 cv
159.635 258.079 159.677 257.701 159.761 257.337 cv
159.845 256.973 159.957 256.609 160.111 256.259 cv
f
162.855 247.705 mo
167.475 247.705 li
167.475 248.965 li
162.897 248.965 li
162.169 248.965 161.637 249.119 161.273 249.399 cv
160.909 249.679 160.727 250.099 160.727 250.659 cv
160.727 251.345 160.951 251.877 161.385 252.269 cv
161.819 252.661 162.407 252.857 163.149 252.857 cv
167.475 252.857 li
167.475 254.117 li
159.817 254.117 li
159.817 252.857 li
161.007 252.857 li
160.559 252.563 160.209 252.213 159.985 251.793 cv
159.761 251.387 159.635 250.911 159.635 250.379 cv
159.635 249.511 159.915 248.839 160.461 248.391 cv
161.007 247.943 161.805 247.705 162.855 247.705 cv
f
165.739 245.017 mo
165.739 243.575 li
167.475 243.575 li
167.475 245.017 li
165.739 245.017 li
f
163.653 235.245 mo
162.729 235.245 162.015 235.441 161.483 235.819 cv
160.951 236.211 160.685 236.729 160.685 237.387 cv
160.685 238.059 160.951 238.577 161.483 238.955 cv
162.015 239.347 162.729 239.529 163.653 239.529 cv
164.577 239.529 165.305 239.347 165.837 238.955 cv
166.369 238.577 166.621 238.059 166.621 237.387 cv
166.621 236.729 166.369 236.211 165.837 235.819 cv
165.305 235.441 164.577 235.245 163.653 235.245 cv
160.979 239.529 mo
160.531 239.277 160.195 238.941 159.971 238.535 cv
159.747 238.129 159.635 237.639 159.635 237.079 cv
159.635 236.155 160.013 235.399 160.741 234.811 cv
161.483 234.237 162.449 233.943 163.653 233.943 cv
164.857 233.943 165.837 234.237 166.565 234.811 cv
167.293 235.399 167.657 236.155 167.657 237.079 cv
167.657 237.639 167.545 238.129 167.335 238.535 cv
167.125 238.941 166.789 239.277 166.327 239.529 cv
167.475 239.529 li
167.475 240.789 li
156.835 240.789 li
156.835 239.529 li
160.979 239.529 li
f
159.817 231.857 mo
159.817 230.597 li
167.475 230.597 li
167.475 231.857 li
159.817 231.857 li
156.835 231.857 mo
156.835 230.597 li
158.431 230.597 li
158.431 231.857 li
156.835 231.857 li
f
162.855 221.595 mo
167.475 221.595 li
167.475 222.855 li
162.897 222.855 li
162.169 222.855 161.637 223.009 161.273 223.289 cv
160.909 223.569 160.727 223.989 160.727 224.549 cv
160.727 225.235 160.951 225.767 161.385 226.159 cv
161.819 226.551 162.407 226.747 163.149 226.747 cv
167.475 226.747 li
167.475 228.007 li
159.817 228.007 li
159.817 226.747 li
161.007 226.747 li
160.559 226.453 160.209 226.103 159.985 225.683 cv
159.761 225.277 159.635 224.801 159.635 224.269 cv
159.635 223.401 159.915 222.729 160.461 222.281 cv
161.007 221.833 161.805 221.595 162.855 221.595 cv
f
163.555 214.049 mo
162.659 214.049 161.945 214.245 161.441 214.609 cv
160.937 214.987 160.685 215.519 160.685 216.191 cv
160.685 216.863 160.937 217.395 161.441 217.773 cv
161.945 218.151 162.659 218.333 163.555 218.333 cv
164.465 218.333 165.165 218.151 165.669 217.773 cv
166.173 217.395 166.425 216.863 166.425 216.191 cv
166.425 215.519 166.173 214.987 165.669 214.609 cv
165.165 214.245 164.465 214.049 163.555 214.049 cv
166.523 212.789 mo
167.811 212.789 168.777 213.083 169.421 213.658 cv
170.051 214.245 170.373 215.127 170.373 216.317 cv
170.373 216.765 170.331 217.171 170.275 217.563 cv
170.205 217.955 170.107 218.347 169.967 218.711 cv
168.749 218.711 li
168.945 218.347 169.085 217.983 169.183 217.619 cv
169.281 217.255 169.337 216.891 169.337 216.513 cv
169.337 215.701 169.113 215.085 168.693 214.665 cv
168.259 214.259 167.615 214.049 166.747 214.049 cv
166.131 214.049 li
166.579 214.315 166.915 214.651 167.139 215.057 cv
167.363 215.463 167.475 215.939 167.475 216.499 cv
167.475 217.451 167.125 218.207 166.411 218.781 cv
165.697 219.355 164.745 219.635 163.555 219.635 cv
162.379 219.635 161.427 219.355 160.713 218.781 cv
159.999 218.207 159.635 217.451 159.635 216.499 cv
159.635 215.939 159.747 215.463 159.971 215.057 cv
160.195 214.651 160.531 214.315 160.979 214.049 cv
159.817 214.049 li
159.817 212.789 li
166.523 212.789 li
f
165.739 210.018 mo
165.739 208.576 li
167.475 208.576 li
167.475 210.018 li
165.739 210.018 li
f
160.111 200.232 mo
161.287 200.232 li
161.091 200.595 160.951 200.945 160.853 201.31 cv
160.755 201.673 160.699 202.023 160.699 202.387 cv
160.699 203.199 160.965 203.844 161.483 204.292 cv
162.001 204.74 162.729 204.964 163.653 204.964 cv
164.591 204.964 165.319 204.74 165.837 204.292 cv
166.355 203.844 166.607 203.199 166.607 202.387 cv
166.607 202.023 166.565 201.673 166.467 201.31 cv
166.369 200.945 166.215 200.595 166.019 200.232 cv
167.181 200.232 li
167.349 200.595 167.475 200.96 167.545 201.324 cv
167.615 201.702 167.657 202.107 167.657 202.527 cv
167.657 203.676 167.307 204.6 166.579 205.271 cv
165.865 205.957 164.885 206.294 163.653 206.294 cv
162.407 206.294 161.427 205.957 160.713 205.271 cv
159.999 204.586 159.635 203.647 159.635 202.443 cv
159.635 202.051 159.677 201.673 159.761 201.31 cv
159.845 200.945 159.957 200.581 160.111 200.232 cv
f
160.699 195.079 mo
160.699 195.751 160.965 196.284 161.497 196.676 cv
162.029 197.068 162.743 197.263 163.653 197.263 cv
164.577 197.263 165.291 197.081 165.823 196.689 cv
166.355 196.298 166.607 195.766 166.607 195.079 cv
166.607 194.408 166.355 193.875 165.823 193.483 cv
165.291 193.091 164.577 192.896 163.653 192.896 cv
162.757 192.896 162.029 193.091 161.497 193.483 cv
160.965 193.875 160.699 194.408 160.699 195.079 cv
159.635 195.079 mo
159.635 193.987 159.999 193.133 160.699 192.504 cv
161.413 191.887 162.393 191.565 163.653 191.565 cv
164.913 191.565 165.893 191.887 166.593 192.504 cv
167.307 193.133 167.657 193.987 167.657 195.079 cv
167.657 196.186 167.307 197.053 166.593 197.669 cv
165.893 198.285 164.913 198.594 163.653 198.594 cv
162.393 198.594 161.413 198.285 160.699 197.669 cv
159.999 197.053 159.635 196.186 159.635 195.079 cv
f
161.287 183.516 mo
160.727 183.208 160.321 182.829 160.041 182.395 cv
159.775 181.962 159.635 181.443 159.635 180.841 cv
159.635 180.057 159.915 179.441 160.475 179.007 cv
161.035 178.574 161.833 178.35 162.855 178.35 cv
167.475 178.35 li
167.475 179.609 li
162.897 179.609 li
162.169 179.609 161.623 179.749 161.259 180.001 cv
160.909 180.268 160.727 180.66 160.727 181.191 cv
160.727 181.85 160.951 182.367 161.385 182.745 cv
161.819 183.124 162.407 183.305 163.149 183.305 cv
167.475 183.305 li
167.475 184.566 li
162.897 184.566 li
162.169 184.566 161.623 184.706 161.259 184.958 cv
160.909 185.223 160.727 185.63 160.727 186.161 cv
160.727 186.805 160.951 187.324 161.385 187.702 cv
161.819 188.079 162.407 188.262 163.149 188.262 cv
167.475 188.262 li
167.475 189.521 li
159.817 189.521 li
159.817 188.262 li
161.007 188.262 li
160.545 187.982 160.195 187.632 159.971 187.225 cv
159.747 186.833 159.635 186.357 159.635 185.798 cv
159.635 185.238 159.775 184.775 160.055 184.383 cv
160.335 183.992 160.755 183.712 161.287 183.516 cv
f
178.566 170.154 mo
178.566 173.654 li
f
178.566 170.154 mo
178.566 173.654 li
@
177.813 269.921 mo
182.433 269.921 li
182.433 271.181 li
177.855 271.181 li
177.127 271.181 176.595 271.335 176.231 271.615 cv
175.867 271.895 175.685 272.315 175.685 272.875 cv
175.685 273.561 175.909 274.093 176.343 274.485 cv
176.777 274.877 177.365 275.073 178.107 275.073 cv
182.433 275.073 li
182.433 276.333 li
171.793 276.333 li
171.793 275.073 li
175.965 275.073 li
175.517 274.779 175.167 274.429 174.943 274.009 cv
174.719 273.603 174.593 273.127 174.593 272.595 cv
174.593 271.727 174.873 271.055 175.419 270.607 cv
175.965 270.159 176.763 269.921 177.813 269.921 cv
f
176.245 261.451 mo
175.685 261.143 175.279 260.765 174.999 260.331 cv
174.733 259.897 174.593 259.379 174.593 258.777 cv
174.593 257.993 174.873 257.377 175.433 256.943 cv
175.993 256.509 176.791 256.285 177.813 256.285 cv
182.433 256.285 li
182.433 257.545 li
177.855 257.545 li
177.127 257.545 176.581 257.685 176.217 257.937 cv
175.867 258.203 175.685 258.595 175.685 259.127 cv
175.685 259.785 175.909 260.303 176.343 260.681 cv
176.777 261.059 177.365 261.241 178.107 261.241 cv
182.433 261.241 li
182.433 262.501 li
177.855 262.501 li
177.127 262.501 176.581 262.641 176.217 262.893 cv
175.867 263.159 175.685 263.565 175.685 264.097 cv
175.685 264.741 175.909 265.259 176.343 265.637 cv
176.777 266.015 177.365 266.197 178.107 266.197 cv
182.433 266.197 li
182.433 267.457 li
174.775 267.457 li
174.775 266.197 li
175.965 266.197 li
175.503 265.917 175.153 265.567 174.929 265.161 cv
174.705 264.769 174.593 264.293 174.593 263.733 cv
174.593 263.173 174.733 262.711 175.013 262.319 cv
175.293 261.927 175.713 261.647 176.245 261.451 cv
f
180.697 253.597 mo
180.697 252.155 li
182.433 252.155 li
182.433 253.597 li
180.697 253.597 li
f
178.611 243.825 mo
177.687 243.825 176.973 244.021 176.441 244.399 cv
175.909 244.791 175.643 245.309 175.643 245.967 cv
175.643 246.639 175.909 247.157 176.441 247.535 cv
176.973 247.927 177.687 248.109 178.611 248.109 cv
179.535 248.109 180.263 247.927 180.795 247.535 cv
181.327 247.157 181.579 246.639 181.579 245.967 cv
181.579 245.309 181.327 244.791 180.795 244.399 cv
180.263 244.021 179.535 243.825 178.611 243.825 cv
175.937 248.109 mo
175.489 247.857 175.153 247.521 174.929 247.115 cv
174.705 246.709 174.593 246.219 174.593 245.659 cv
174.593 244.735 174.971 243.979 175.699 243.391 cv
176.441 242.817 177.407 242.523 178.611 242.523 cv
179.815 242.523 180.795 242.817 181.523 243.391 cv
182.251 243.979 182.615 244.735 182.615 245.659 cv
182.615 246.219 182.503 246.709 182.293 247.115 cv
182.083 247.521 181.747 247.857 181.285 248.109 cv
182.433 248.109 li
182.433 249.369 li
171.793 249.369 li
171.793 248.109 li
175.937 248.109 li
f
178.583 236.951 mo
178.583 237.973 178.709 238.673 178.933 239.065 cv
179.171 239.457 179.563 239.653 180.123 239.653 cv
180.571 239.653 180.935 239.513 181.187 239.219 cv
181.453 238.925 181.579 238.519 181.579 238.015 cv
181.579 237.315 181.341 236.755 180.837 236.335 cv
180.347 235.915 179.689 235.705 178.863 235.705 cv
178.583 235.705 li
178.583 236.951 li
178.065 234.445 mo
182.433 234.445 li
182.433 235.705 li
181.271 235.705 li
181.747 235.999 182.083 236.363 182.293 236.783 cv
182.503 237.203 182.615 237.735 182.615 238.351 cv
182.615 239.135 182.405 239.765 181.971 240.227 cv
181.537 240.689 180.949 240.913 180.207 240.913 cv
179.353 240.913 178.709 240.633 178.261 240.045 cv
177.827 239.471 177.603 238.617 177.603 237.469 cv
177.603 235.705 li
177.477 235.705 li
176.903 235.705 176.455 235.901 176.133 236.279 cv
175.825 236.657 175.657 237.189 175.657 237.875 cv
175.657 238.323 175.713 238.743 175.825 239.163 cv
175.937 239.583 176.091 239.975 176.287 240.353 cv
175.125 240.353 li
174.957 239.905 174.817 239.457 174.733 239.023 cv
174.649 238.589 174.593 238.169 174.593 237.749 cv
174.593 236.643 174.887 235.817 175.461 235.271 cv
176.035 234.725 176.903 234.445 178.065 234.445 cv
f
174.775 231.855 mo
174.775 230.595 li
182.433 230.595 li
182.433 231.855 li
174.775 231.855 li
171.793 231.855 mo
171.793 230.595 li
173.389 230.595 li
173.389 231.855 li
171.793 231.855 li
f
175.937 222.923 mo
171.793 222.923 li
171.793 221.663 li
182.433 221.663 li
182.433 222.923 li
181.285 222.923 li
181.747 223.189 182.083 223.525 182.293 223.931 cv
182.503 224.337 182.615 224.813 182.615 225.373 cv
182.615 226.297 182.251 227.053 181.523 227.641 cv
180.795 228.229 179.815 228.509 178.611 228.509 cv
177.407 228.509 176.441 228.229 175.699 227.641 cv
174.971 227.053 174.593 226.297 174.593 225.373 cv
174.593 224.813 174.705 224.337 174.929 223.931 cv
175.153 223.525 175.489 223.189 175.937 222.923 cv
178.611 227.207 mo
179.535 227.207 180.263 227.025 180.795 226.647 cv
181.327 226.269 181.579 225.737 181.579 225.065 cv
181.579 224.407 181.327 223.889 180.795 223.497 cv
180.263 223.119 179.535 222.923 178.611 222.923 cv
177.687 222.923 176.973 223.119 176.441 223.497 cv
175.909 223.889 175.643 224.407 175.643 225.065 cv
175.643 225.737 175.909 226.269 176.441 226.647 cv
176.973 227.025 177.687 227.207 178.611 227.207 cv
f
179.409 219.199 mo
174.775 219.199 li
174.775 217.939 li
179.367 217.939 li
180.095 217.939 180.627 217.799 180.991 217.519 cv
181.355 217.239 181.537 216.819 181.537 216.245 cv
181.537 215.573 181.327 215.027 180.893 214.635 cv
180.459 214.243 179.871 214.047 179.115 214.047 cv
174.775 214.047 li
174.775 212.787 li
182.433 212.787 li
182.433 214.047 li
181.257 214.047 li
181.733 214.355 182.069 214.719 182.293 215.111 cv
182.503 215.517 182.615 215.979 182.615 216.511 cv
182.615 217.393 182.349 218.065 181.803 218.513 cv
181.271 218.975 180.473 219.199 179.409 219.199 cv
174.593 216.035 mo
174.593 216.035 li
f
180.697 210.015 mo
180.697 208.573 li
182.433 208.573 li
182.433 210.015 li
180.697 210.015 li
f
175.069 200.229 mo
176.245 200.229 li
176.049 200.593 175.909 200.943 175.811 201.307 cv
175.713 201.671 175.657 202.021 175.657 202.385 cv
175.657 203.197 175.923 203.841 176.441 204.289 cv
176.959 204.737 177.687 204.961 178.611 204.961 cv
179.549 204.961 180.277 204.737 180.795 204.289 cv
181.313 203.841 181.565 203.197 181.565 202.385 cv
181.565 202.021 181.523 201.671 181.425 201.307 cv
181.327 200.943 181.173 200.593 180.977 200.229 cv
182.139 200.229 li
182.307 200.593 182.433 200.957 182.503 201.321 cv
182.573 201.699 182.615 202.105 182.615 202.525 cv
182.615 203.673 182.265 204.597 181.537 205.269 cv
180.823 205.955 179.843 206.291 178.611 206.291 cv
177.365 206.291 176.385 205.955 175.671 205.269 cv
174.957 204.583 174.593 203.645 174.593 202.441 cv
174.593 202.049 174.635 201.671 174.719 201.307 cv
174.803 200.943 174.915 200.579 175.069 200.229 cv
f
175.657 195.077 mo
175.657 195.749 175.923 196.281 176.455 196.673 cv
176.987 197.065 177.701 197.261 178.611 197.261 cv
179.535 197.261 180.249 197.079 180.781 196.687 cv
181.313 196.295 181.565 195.763 181.565 195.077 cv
181.565 194.405 181.313 193.873 180.781 193.481 cv
180.249 193.089 179.535 192.893 178.611 192.893 cv
177.715 192.893 176.987 193.089 176.455 193.481 cv
175.923 193.873 175.657 194.405 175.657 195.077 cv
174.593 195.077 mo
174.593 193.985 174.957 193.131 175.657 192.501 cv
176.371 191.885 177.351 191.563 178.611 191.563 cv
179.871 191.563 180.851 191.885 181.551 192.501 cv
182.265 193.131 182.615 193.985 182.615 195.077 cv
182.615 196.183 182.265 197.051 181.551 197.667 cv
180.851 198.283 179.871 198.591 178.611 198.591 cv
177.351 198.591 176.371 198.283 175.657 197.667 cv
174.957 197.051 174.593 196.183 174.593 195.077 cv
f
176.245 183.513 mo
175.685 183.205 175.279 182.827 174.999 182.393 cv
174.733 181.959 174.593 181.441 174.593 180.839 cv
174.593 180.055 174.873 179.439 175.433 179.005 cv
175.993 178.571 176.791 178.347 177.813 178.347 cv
182.433 178.347 li
182.433 179.607 li
177.855 179.607 li
177.127 179.607 176.581 179.747 176.217 179.999 cv
175.867 180.265 175.685 180.657 175.685 181.189 cv
175.685 181.847 175.909 182.365 176.343 182.743 cv
176.777 183.121 177.365 183.303 178.107 183.303 cv
182.433 183.303 li
182.433 184.563 li
177.855 184.563 li
177.127 184.563 176.581 184.703 176.217 184.955 cv
175.867 185.221 175.685 185.627 175.685 186.159 cv
175.685 186.803 175.909 187.321 176.343 187.699 cv
176.777 188.077 177.365 188.259 178.107 188.259 cv
182.433 188.259 li
182.433 189.519 li
174.775 189.519 li
174.775 188.259 li
175.965 188.259 li
175.503 187.979 175.153 187.629 174.929 187.223 cv
174.705 186.831 174.593 186.355 174.593 185.795 cv
174.593 185.235 174.733 184.773 175.013 184.381 cv
175.293 183.989 175.713 183.709 176.245 183.513 cv
f
193.523 170.154 mo
193.523 173.654 li
f
193.523 170.154 mo
193.523 173.654 li
@
191.203 287.374 mo
190.643 287.066 190.237 286.688 189.957 286.254 cv
189.691 285.82 189.551 285.302 189.551 284.7 cv
189.551 283.916 189.831 283.3 190.391 282.866 cv
190.951 282.432 191.749 282.208 192.771 282.208 cv
197.391 282.208 li
197.391 283.468 li
192.813 283.468 li
192.085 283.468 191.539 283.608 191.175 283.86 cv
190.825 284.126 190.643 284.518 190.643 285.05 cv
190.643 285.708 190.867 286.226 191.301 286.604 cv
191.735 286.982 192.323 287.164 193.065 287.164 cv
197.391 287.164 li
197.391 288.424 li
192.813 288.424 li
192.085 288.424 191.539 288.564 191.175 288.816 cv
190.825 289.082 190.643 289.488 190.643 290.02 cv
190.643 290.664 190.867 291.182 191.301 291.56 cv
191.735 291.938 192.323 292.12 193.065 292.12 cv
197.391 292.12 li
197.391 293.38 li
189.733 293.38 li
189.733 292.12 li
190.923 292.12 li
190.461 291.84 190.111 291.49 189.887 291.084 cv
189.663 290.692 189.551 290.216 189.551 289.656 cv
189.551 289.096 189.691 288.634 189.971 288.242 cv
190.251 287.85 190.671 287.57 191.203 287.374 cv
f
190.615 276.734 mo
190.615 277.406 190.881 277.938 191.413 278.33 cv
191.945 278.722 192.659 278.918 193.569 278.918 cv
194.493 278.918 195.207 278.736 195.739 278.344 cv
196.271 277.952 196.523 277.42 196.523 276.734 cv
196.523 276.062 196.271 275.53 195.739 275.138 cv
195.207 274.746 194.493 274.55 193.569 274.55 cv
192.673 274.55 191.945 274.746 191.413 275.138 cv
190.881 275.53 190.615 276.062 190.615 276.734 cv
189.551 276.734 mo
189.551 275.642 189.915 274.788 190.615 274.158 cv
191.329 273.542 192.309 273.22 193.569 273.22 cv
194.829 273.22 195.809 273.542 196.509 274.158 cv
197.223 274.788 197.573 275.642 197.573 276.734 cv
197.573 277.84 197.223 278.708 196.509 279.324 cv
195.809 279.94 194.829 280.248 193.569 280.248 cv
192.309 280.248 191.329 279.94 190.615 279.324 cv
189.915 278.708 189.551 277.84 189.551 276.734 cv
f
193.569 265.632 mo
192.645 265.632 191.931 265.828 191.399 266.206 cv
190.867 266.598 190.601 267.116 190.601 267.774 cv
190.601 268.446 190.867 268.964 191.399 269.342 cv
191.931 269.734 192.645 269.916 193.569 269.916 cv
194.493 269.916 195.221 269.734 195.753 269.342 cv
196.285 268.964 196.537 268.446 196.537 267.774 cv
196.537 267.116 196.285 266.598 195.753 266.206 cv
195.221 265.828 194.493 265.632 193.569 265.632 cv
190.895 269.916 mo
190.447 269.664 190.111 269.328 189.887 268.922 cv
189.663 268.516 189.551 268.026 189.551 267.466 cv
189.551 266.542 189.929 265.786 190.657 265.198 cv
191.399 264.624 192.365 264.33 193.569 264.33 cv
194.773 264.33 195.753 264.624 196.481 265.198 cv
197.209 265.786 197.573 266.542 197.573 267.466 cv
197.573 268.026 197.461 268.516 197.251 268.922 cv
197.041 269.328 196.705 269.664 196.243 269.916 cv
197.391 269.916 li
197.391 271.176 li
186.751 271.176 li
186.751 269.916 li
190.895 269.916 li
f
189.733 262.244 mo
189.733 260.984 li
197.391 260.984 li
197.391 262.244 li
189.733 262.244 li
186.751 262.244 mo
186.751 260.984 li
188.347 260.984 li
188.347 262.244 li
186.751 262.244 li
f
186.751 258.352 mo
186.751 257.092 li
197.391 257.092 li
197.391 258.352 li
186.751 258.352 li
f
193.247 247.908 mo
193.863 247.908 li
193.863 253.69 li
194.731 253.634 195.403 253.382 195.851 252.906 cv
196.299 252.444 196.523 251.8 196.523 250.96 cv
196.523 250.484 196.467 250.008 196.355 249.56 cv
196.243 249.112 196.061 248.65 195.809 248.202 cv
196.999 248.202 li
197.195 248.65 197.349 249.112 197.433 249.588 cv
197.517 250.064 197.573 250.554 197.573 251.03 cv
197.573 252.262 197.223 253.228 196.523 253.942 cv
195.823 254.656 194.857 255.006 193.639 255.006 cv
192.393 255.006 191.399 254.67 190.657 253.998 cv
189.929 253.326 189.551 252.402 189.551 251.254 cv
189.551 250.218 189.887 249.406 190.545 248.804 cv
191.217 248.216 192.113 247.908 193.247 247.908 cv
192.883 249.168 mo
192.197 249.182 191.651 249.378 191.231 249.742 cv
190.825 250.12 190.615 250.624 190.615 251.24 cv
190.615 251.94 190.825 252.5 191.217 252.92 cv
191.609 253.34 192.169 253.592 192.883 253.648 cv
192.883 249.168 li
f
195.655 245.668 mo
195.655 244.226 li
197.391 244.226 li
197.391 245.668 li
195.655 245.668 li
f
196.229 240.978 mo
196.229 238.724 li
188.445 238.724 li
188.935 241.174 li
187.675 241.174 li
187.185 238.738 li
187.185 237.352 li
196.229 237.352 li
196.229 235.098 li
197.391 235.098 li
197.391 240.978 li
196.229 240.978 li
f
196.229 231.122 mo
196.229 226.306 li
197.391 226.306 li
197.391 232.788 li
196.229 232.788 li
195.697 232.27 194.969 231.556 194.045 230.646 cv
193.135 229.75 192.547 229.176 192.281 228.938 cv
191.791 228.49 191.371 228.182 191.021 228.014 cv
190.685 227.846 190.335 227.748 189.999 227.748 cv
189.467 227.748 189.019 227.944 188.683 228.322 cv
188.347 228.7 188.165 229.19 188.165 229.806 cv
188.165 230.24 188.249 230.702 188.389 231.178 cv
188.543 231.654 188.767 232.172 189.075 232.718 cv
187.675 232.718 li
187.451 232.158 187.283 231.64 187.171 231.164 cv
187.059 230.688 187.003 230.24 187.003 229.834 cv
187.003 228.784 187.269 227.944 187.801 227.314 cv
188.333 226.684 189.033 226.362 189.915 226.362 cv
190.335 226.362 190.741 226.446 191.105 226.6 cv
191.483 226.754 191.931 227.034 192.435 227.454 cv
192.575 227.566 192.953 227.93 193.583 228.546 cv
194.213 229.162 195.095 230.016 196.229 231.122 cv
f
191.889 219.222 mo
192.029 218.564 192.323 218.046 192.771 217.682 cv
193.219 217.318 193.779 217.122 194.423 217.122 cv
195.431 217.122 196.215 217.472 196.761 218.158 cv
197.307 218.858 197.573 219.838 197.573 221.112 cv
197.573 221.546 197.531 221.994 197.447 222.442 cv
197.377 222.89 197.251 223.366 197.083 223.842 cv
195.753 223.842 li
195.977 223.464 196.145 223.044 196.257 222.582 cv
196.369 222.134 196.425 221.658 196.425 221.154 cv
196.425 220.286 196.257 219.628 195.921 219.18 cv
195.585 218.732 195.081 218.494 194.423 218.494 cv
193.835 218.494 193.359 218.704 193.023 219.124 cv
192.687 219.544 192.505 220.132 192.505 220.888 cv
192.505 222.078 li
191.371 222.078 li
191.371 220.832 li
191.371 220.16 191.245 219.642 190.965 219.278 cv
190.699 218.914 190.307 218.732 189.789 218.732 cv
189.271 218.732 188.865 218.928 188.585 219.292 cv
188.305 219.67 188.165 220.202 188.165 220.888 cv
188.165 221.266 188.207 221.672 188.291 222.106 cv
188.375 222.54 188.501 223.016 188.669 223.534 cv
187.437 223.534 li
187.297 223.016 187.185 222.526 187.115 222.064 cv
187.045 221.616 187.003 221.182 187.003 220.762 cv
187.003 219.726 187.241 218.9 187.717 218.284 cv
188.193 217.668 188.837 217.36 189.649 217.36 cv
190.209 217.36 190.685 217.528 191.077 217.85 cv
191.469 218.172 191.749 218.634 191.889 219.222 cv
f
188.095 211.55 mo
188.095 212.264 188.445 212.796 189.145 213.16 cv
189.845 213.524 190.895 213.692 192.295 213.692 cv
193.695 213.692 194.745 213.524 195.445 213.16 cv
196.145 212.796 196.495 212.264 196.495 211.55 cv
196.495 210.836 196.145 210.304 195.445 209.94 cv
194.745 209.59 193.695 209.408 192.295 209.408 cv
190.895 209.408 189.845 209.59 189.145 209.94 cv
188.445 210.304 188.095 210.836 188.095 211.55 cv
187.003 211.55 mo
187.003 210.416 187.465 209.548 188.361 208.932 cv
189.271 208.33 190.587 208.022 192.295 208.022 cv
194.017 208.022 195.333 208.33 196.229 208.932 cv
197.125 209.548 197.573 210.416 197.573 211.55 cv
197.573 212.698 197.125 213.58 196.229 214.182 cv
195.333 214.784 194.017 215.078 192.295 215.078 cv
190.587 215.078 189.271 214.784 188.361 214.182 cv
187.465 213.58 187.003 212.698 187.003 211.55 cv
f
191.735 202.478 mo
191.735 203.094 191.959 203.584 192.379 203.948 cv
192.799 204.312 193.387 204.494 194.115 204.494 cv
194.857 204.494 195.445 204.312 195.865 203.948 cv
196.285 203.584 196.495 203.094 196.495 202.478 cv
196.495 201.862 196.285 201.372 195.865 201.008 cv
195.445 200.644 194.857 200.462 194.115 200.462 cv
193.387 200.462 192.799 200.644 192.379 201.008 cv
191.959 201.372 191.735 201.862 191.735 202.478 cv
187.409 199.734 mo
188.669 199.734 li
188.501 200.084 188.375 200.434 188.291 200.784 cv
188.207 201.148 188.165 201.498 188.165 201.834 cv
188.165 202.758 188.473 203.458 189.089 203.934 cv
189.705 204.41 190.643 204.69 191.875 204.746 cv
191.483 204.48 191.175 204.144 190.965 203.738 cv
190.755 203.332 190.643 202.884 190.643 202.394 cv
190.643 201.372 190.965 200.56 191.581 199.972 cv
192.197 199.384 193.051 199.076 194.115 199.076 cv
195.165 199.076 196.005 199.398 196.635 200.014 cv
197.265 200.63 197.573 201.456 197.573 202.478 cv
197.573 203.654 197.125 204.564 196.229 205.18 cv
195.333 205.81 194.017 206.118 192.295 206.118 cv
190.685 206.118 189.397 205.74 188.445 204.97 cv
187.493 204.214 187.003 203.178 187.003 201.89 cv
187.003 201.554 187.045 201.204 187.101 200.84 cv
187.171 200.49 187.269 200.126 187.409 199.734 cv
f
195.655 196.696 mo
195.655 195.254 li
197.391 195.254 li
197.391 196.696 li
195.655 196.696 li
f
190.027 186.91 mo
191.203 186.91 li
191.007 187.274 190.867 187.624 190.769 187.988 cv
190.671 188.352 190.615 188.702 190.615 189.066 cv
190.615 189.878 190.881 190.522 191.399 190.97 cv
191.917 191.418 192.645 191.642 193.569 191.642 cv
194.507 191.642 195.235 191.418 195.753 190.97 cv
196.271 190.522 196.523 189.878 196.523 189.066 cv
196.523 188.702 196.481 188.352 196.383 187.988 cv
196.285 187.624 196.131 187.274 195.935 186.91 cv
197.097 186.91 li
197.265 187.274 197.391 187.638 197.461 188.002 cv
197.531 188.38 197.573 188.786 197.573 189.206 cv
197.573 190.354 197.223 191.278 196.495 191.95 cv
195.781 192.636 194.801 192.972 193.569 192.972 cv
192.323 192.972 191.343 192.636 190.629 191.95 cv
189.915 191.264 189.551 190.326 189.551 189.122 cv
189.551 188.73 189.593 188.352 189.677 187.988 cv
189.761 187.624 189.873 187.26 190.027 186.91 cv
f
192.771 178.356 mo
197.391 178.356 li
197.391 179.616 li
192.813 179.616 li
192.085 179.616 191.553 179.77 191.189 180.05 cv
190.825 180.33 190.643 180.75 190.643 181.31 cv
190.643 181.996 190.867 182.528 191.301 182.92 cv
191.735 183.312 192.323 183.508 193.065 183.508 cv
197.391 183.508 li
197.391 184.768 li
189.733 184.768 li
189.733 183.508 li
190.923 183.508 li
190.475 183.214 190.125 182.864 189.901 182.444 cv
189.677 182.038 189.551 181.562 189.551 181.03 cv
189.551 180.162 189.831 179.49 190.377 179.042 cv
190.923 178.594 191.721 178.356 192.771 178.356 cv
f
208.481 170.154 mo
208.481 173.654 li
f
208.481 170.154 mo
208.481 173.654 li
@
206.16 276.811 mo
205.6 276.503 205.194 276.125 204.914 275.691 cv
204.648 275.257 204.508 274.739 204.508 274.137 cv
204.508 273.353 204.788 272.737 205.348 272.303 cv
205.908 271.869 206.706 271.645 207.728 271.645 cv
212.348 271.645 li
212.348 272.905 li
207.77 272.905 li
207.042 272.905 206.496 273.045 206.132 273.297 cv
205.782 273.563 205.6 273.955 205.6 274.487 cv
205.6 275.145 205.824 275.663 206.258 276.041 cv
206.692 276.419 207.28 276.601 208.022 276.601 cv
212.348 276.601 li
212.348 277.861 li
207.77 277.861 li
207.042 277.861 206.496 278.001 206.132 278.253 cv
205.782 278.519 205.6 278.925 205.6 279.457 cv
205.6 280.101 205.824 280.619 206.258 280.997 cv
206.692 281.375 207.28 281.557 208.022 281.557 cv
212.348 281.557 li
212.348 282.817 li
204.69 282.817 li
204.69 281.557 li
205.88 281.557 li
205.418 281.277 205.068 280.927 204.844 280.521 cv
204.62 280.129 204.508 279.653 204.508 279.093 cv
204.508 278.533 204.648 278.071 204.928 277.679 cv
205.208 277.287 205.628 277.007 206.16 276.811 cv
f
209.324 269.265 mo
204.69 269.265 li
204.69 268.005 li
209.282 268.005 li
210.01 268.005 210.542 267.865 210.906 267.585 cv
211.27 267.305 211.452 266.885 211.452 266.311 cv
211.452 265.639 211.242 265.093 210.808 264.701 cv
210.374 264.309 209.786 264.113 209.03 264.113 cv
204.69 264.113 li
204.69 262.853 li
212.348 262.853 li
212.348 264.113 li
211.172 264.113 li
211.648 264.421 211.984 264.785 212.208 265.177 cv
212.418 265.583 212.53 266.045 212.53 266.577 cv
212.53 267.459 212.264 268.131 211.718 268.579 cv
211.186 269.041 210.388 269.265 209.324 269.265 cv
204.508 266.101 mo
204.508 266.101 li
f
204.914 255.377 mo
206.104 255.377 li
205.936 255.741 205.796 256.105 205.698 256.483 cv
205.614 256.875 205.558 257.267 205.558 257.673 cv
205.558 258.303 205.656 258.779 205.852 259.087 cv
206.048 259.395 206.328 259.549 206.706 259.549 cv
207 259.549 207.224 259.437 207.392 259.213 cv
207.56 258.989 207.728 258.541 207.868 257.869 cv
207.966 257.435 li
208.162 256.539 208.442 255.909 208.778 255.531 cv
209.128 255.167 209.618 254.971 210.234 254.971 cv
210.948 254.971 211.508 255.251 211.914 255.811 cv
212.334 256.371 212.53 257.155 212.53 258.135 cv
212.53 258.555 212.488 258.975 212.418 259.423 cv
212.348 259.871 212.236 260.333 212.068 260.823 cv
210.766 260.823 li
211.018 260.361 211.2 259.899 211.312 259.451 cv
211.438 259.003 211.494 258.555 211.494 258.107 cv
211.494 257.519 211.396 257.057 211.2 256.735 cv
211.004 256.427 210.71 256.259 210.332 256.259 cv
209.996 256.259 209.73 256.385 209.548 256.609 cv
209.366 256.833 209.184 257.337 209.016 258.121 cv
208.918 258.555 li
208.75 259.339 208.498 259.913 208.162 260.249 cv
207.826 260.599 207.364 260.767 206.762 260.767 cv
206.048 260.767 205.488 260.515 205.096 260.011 cv
204.704 259.507 204.508 258.779 204.508 257.827 cv
204.508 257.365 204.55 256.931 204.62 256.511 cv
204.69 256.105 204.788 255.727 204.914 255.377 cv
f
204.69 252.969 mo
204.69 251.709 li
212.348 251.709 li
212.348 252.969 li
204.69 252.969 li
201.708 252.969 mo
201.708 251.709 li
203.304 251.709 li
203.304 252.969 li
201.708 252.969 li
f
204.984 243.561 mo
206.16 243.561 li
205.964 243.925 205.824 244.275 205.726 244.639 cv
205.628 245.003 205.572 245.353 205.572 245.717 cv
205.572 246.529 205.838 247.173 206.356 247.621 cv
206.874 248.069 207.602 248.293 208.526 248.293 cv
209.464 248.293 210.192 248.069 210.71 247.621 cv
211.228 247.173 211.48 246.529 211.48 245.717 cv
211.48 245.353 211.438 245.003 211.34 244.639 cv
211.242 244.275 211.088 243.925 210.892 243.561 cv
212.054 243.561 li
212.222 243.925 212.348 244.289 212.418 244.653 cv
212.488 245.031 212.53 245.437 212.53 245.857 cv
212.53 247.005 212.18 247.929 211.452 248.601 cv
210.738 249.287 209.758 249.623 208.526 249.623 cv
207.28 249.623 206.3 249.287 205.586 248.601 cv
204.872 247.915 204.508 246.977 204.508 245.773 cv
204.508 245.381 204.55 245.003 204.634 244.639 cv
204.718 244.275 204.83 243.911 204.984 243.561 cv
f
210.612 241.195 mo
210.612 239.753 li
212.348 239.753 li
212.348 241.195 li
210.612 241.195 li
f
211.186 236.505 mo
211.186 234.251 li
203.402 234.251 li
203.892 236.701 li
202.632 236.701 li
202.142 234.265 li
202.142 232.879 li
211.186 232.879 li
211.186 230.625 li
212.348 230.625 li
212.348 236.505 li
211.186 236.505 li
f
206.692 224.717 mo
206.692 225.333 206.916 225.823 207.336 226.187 cv
207.756 226.551 208.344 226.733 209.072 226.733 cv
209.814 226.733 210.402 226.551 210.822 226.187 cv
211.242 225.823 211.452 225.333 211.452 224.717 cv
211.452 224.101 211.242 223.611 210.822 223.247 cv
210.402 222.883 209.814 222.701 209.072 222.701 cv
208.344 222.701 207.756 222.883 207.336 223.247 cv
206.916 223.611 206.692 224.101 206.692 224.717 cv
202.366 221.973 mo
203.626 221.973 li
203.458 222.323 203.332 222.673 203.248 223.023 cv
203.164 223.387 203.122 223.737 203.122 224.073 cv
203.122 224.997 203.43 225.697 204.046 226.173 cv
204.662 226.649 205.6 226.929 206.832 226.985 cv
206.44 226.719 206.132 226.383 205.922 225.977 cv
205.712 225.571 205.6 225.123 205.6 224.633 cv
205.6 223.611 205.922 222.799 206.538 222.211 cv
207.154 221.623 208.008 221.315 209.072 221.315 cv
210.122 221.315 210.962 221.637 211.592 222.253 cv
212.222 222.869 212.53 223.695 212.53 224.717 cv
212.53 225.893 212.082 226.803 211.186 227.419 cv
210.29 228.049 208.974 228.357 207.252 228.357 cv
205.642 228.357 204.354 227.979 203.402 227.209 cv
202.45 226.453 201.96 225.417 201.96 224.129 cv
201.96 223.793 202.002 223.443 202.058 223.079 cv
202.128 222.729 202.226 222.365 202.366 221.973 cv
f
206.846 214.749 mo
206.986 214.091 207.28 213.574 207.728 213.21 cv
208.176 212.845 208.736 212.65 209.38 212.65 cv
210.388 212.65 211.172 212.999 211.718 213.686 cv
212.264 214.385 212.53 215.365 212.53 216.639 cv
212.53 217.073 212.488 217.521 212.404 217.969 cv
212.334 218.417 212.208 218.893 212.04 219.369 cv
210.71 219.369 li
210.934 218.991 211.102 218.571 211.214 218.109 cv
211.326 217.661 211.382 217.185 211.382 216.681 cv
211.382 215.813 211.214 215.155 210.878 214.707 cv
210.542 214.259 210.038 214.021 209.38 214.021 cv
208.792 214.021 208.316 214.232 207.98 214.651 cv
207.644 215.071 207.462 215.659 207.462 216.415 cv
207.462 217.605 li
206.328 217.605 li
206.328 216.359 li
206.328 215.687 206.202 215.169 205.922 214.805 cv
205.656 214.441 205.264 214.259 204.746 214.259 cv
204.228 214.259 203.822 214.456 203.542 214.819 cv
203.262 215.197 203.122 215.729 203.122 216.415 cv
203.122 216.793 203.164 217.199 203.248 217.633 cv
203.332 218.067 203.458 218.543 203.626 219.061 cv
202.394 219.061 li
202.254 218.543 202.142 218.053 202.072 217.591 cv
202.002 217.143 201.96 216.709 201.96 216.289 cv
201.96 215.253 202.198 214.427 202.674 213.811 cv
203.15 213.195 203.794 212.887 204.606 212.887 cv
205.166 212.887 205.642 213.055 206.034 213.378 cv
206.426 213.699 206.706 214.161 206.846 214.749 cv
f
210.612 210.031 mo
210.612 208.59 li
212.348 208.59 li
212.348 210.031 li
210.612 210.031 li
f
204.984 200.245 mo
206.16 200.245 li
205.964 200.609 205.824 200.96 205.726 201.324 cv
205.628 201.688 205.572 202.038 205.572 202.401 cv
205.572 203.214 205.838 203.857 206.356 204.305 cv
206.874 204.754 207.602 204.978 208.526 204.978 cv
209.464 204.978 210.192 204.754 210.71 204.305 cv
211.228 203.857 211.48 203.214 211.48 202.401 cv
211.48 202.038 211.438 201.688 211.34 201.324 cv
211.242 200.96 211.088 200.609 210.892 200.245 cv
212.054 200.245 li
212.222 200.609 212.348 200.973 212.418 201.337 cv
212.488 201.715 212.53 202.121 212.53 202.542 cv
212.53 203.689 212.18 204.613 211.452 205.285 cv
210.738 205.971 209.758 206.307 208.526 206.307 cv
207.28 206.307 206.3 205.971 205.586 205.285 cv
204.872 204.6 204.508 203.661 204.508 202.457 cv
204.508 202.065 204.55 201.688 204.634 201.324 cv
204.718 200.96 204.83 200.595 204.984 200.245 cv
f
205.572 195.094 mo
205.572 195.766 205.838 196.298 206.37 196.689 cv
206.902 197.081 207.616 197.277 208.526 197.277 cv
209.45 197.277 210.164 197.095 210.696 196.703 cv
211.228 196.311 211.48 195.78 211.48 195.094 cv
211.48 194.422 211.228 193.889 210.696 193.497 cv
210.164 193.105 209.45 192.91 208.526 192.91 cv
207.63 192.91 206.902 193.105 206.37 193.497 cv
205.838 193.889 205.572 194.422 205.572 195.094 cv
204.508 195.094 mo
204.508 194.001 204.872 193.147 205.572 192.518 cv
206.286 191.901 207.266 191.579 208.526 191.579 cv
209.786 191.579 210.766 191.901 211.466 192.518 cv
212.18 193.147 212.53 194.001 212.53 195.094 cv
212.53 196.199 212.18 197.068 211.466 197.684 cv
210.766 198.299 209.786 198.607 208.526 198.607 cv
207.266 198.607 206.286 198.299 205.572 197.684 cv
204.872 197.068 204.508 196.199 204.508 195.094 cv
f
206.16 183.529 mo
205.6 183.221 205.194 182.844 204.914 182.41 cv
204.648 181.975 204.508 181.458 204.508 180.855 cv
204.508 180.072 204.788 179.456 205.348 179.021 cv
205.908 178.587 206.706 178.363 207.728 178.363 cv
212.348 178.363 li
212.348 179.624 li
207.77 179.624 li
207.042 179.624 206.496 179.764 206.132 180.016 cv
205.782 180.281 205.6 180.673 205.6 181.206 cv
205.6 181.863 205.824 182.382 206.258 182.76 cv
206.692 183.137 207.28 183.32 208.022 183.32 cv
212.348 183.32 li
212.348 184.579 li
207.77 184.579 li
207.042 184.579 206.496 184.719 206.132 184.971 cv
205.782 185.238 205.6 185.643 205.6 186.176 cv
205.6 186.819 205.824 187.337 206.258 187.715 cv
206.692 188.094 207.28 188.275 208.022 188.275 cv
212.348 188.275 li
212.348 189.535 li
204.69 189.535 li
204.69 188.275 li
205.88 188.275 li
205.418 187.995 205.068 187.646 204.844 187.24 cv
204.62 186.848 204.508 186.372 204.508 185.811 cv
204.508 185.251 204.648 184.79 204.928 184.398 cv
205.208 184.005 205.628 183.725 206.16 183.529 cv
f
223.439 170.154 mo
223.439 173.654 li
f
223.439 170.154 mo
223.439 173.654 li
@
226.158 278.901 mo
230.204 278.901 li
230.204 280.161 li
219.648 280.161 li
219.648 278.901 li
220.81 278.901 li
220.362 278.649 220.026 278.313 219.802 277.907 cv
219.578 277.501 219.466 277.011 219.466 276.451 cv
219.466 275.527 219.844 274.771 220.572 274.183 cv
221.314 273.609 222.28 273.315 223.484 273.315 cv
224.688 273.315 225.668 273.609 226.396 274.183 cv
227.124 274.771 227.488 275.527 227.488 276.451 cv
227.488 277.011 227.376 277.501 227.166 277.907 cv
226.956 278.313 226.62 278.649 226.158 278.901 cv
223.484 274.617 mo
222.56 274.617 221.846 274.813 221.314 275.191 cv
220.782 275.583 220.516 276.101 220.516 276.759 cv
220.516 277.431 220.782 277.949 221.314 278.327 cv
221.846 278.719 222.56 278.901 223.484 278.901 cv
224.408 278.901 225.136 278.719 225.668 278.327 cv
226.2 277.949 226.452 277.431 226.452 276.759 cv
226.452 276.101 226.2 275.583 225.668 275.191 cv
225.136 274.813 224.408 274.617 223.484 274.617 cv
f
223.456 267.743 mo
223.456 268.765 223.582 269.465 223.806 269.857 cv
224.044 270.249 224.436 270.445 224.996 270.445 cv
225.444 270.445 225.808 270.305 226.06 270.011 cv
226.326 269.717 226.452 269.311 226.452 268.807 cv
226.452 268.107 226.214 267.547 225.71 267.127 cv
225.22 266.707 224.562 266.497 223.736 266.497 cv
223.456 266.497 li
223.456 267.743 li
222.938 265.237 mo
227.306 265.237 li
227.306 266.497 li
226.144 266.497 li
226.62 266.791 226.956 267.155 227.166 267.575 cv
227.376 267.995 227.488 268.527 227.488 269.143 cv
227.488 269.927 227.278 270.557 226.844 271.019 cv
226.41 271.481 225.822 271.705 225.08 271.705 cv
224.226 271.705 223.582 271.425 223.134 270.837 cv
222.7 270.263 222.476 269.409 222.476 268.261 cv
222.476 266.497 li
222.35 266.497 li
221.776 266.497 221.328 266.693 221.006 267.071 cv
220.698 267.449 220.53 267.981 220.53 268.667 cv
220.53 269.115 220.586 269.535 220.698 269.955 cv
220.81 270.375 220.964 270.767 221.16 271.145 cv
219.998 271.145 li
219.83 270.697 219.69 270.249 219.606 269.815 cv
219.522 269.381 219.466 268.961 219.466 268.541 cv
219.466 267.435 219.76 266.609 220.334 266.063 cv
220.908 265.517 221.776 265.237 222.938 265.237 cv
f
222.686 256.277 mo
227.306 256.277 li
227.306 257.537 li
222.728 257.537 li
222 257.537 221.468 257.691 221.104 257.971 cv
220.74 258.251 220.558 258.671 220.558 259.231 cv
220.558 259.917 220.782 260.449 221.216 260.841 cv
221.65 261.233 222.238 261.429 222.98 261.429 cv
227.306 261.429 li
227.306 262.689 li
219.648 262.689 li
219.648 261.429 li
220.838 261.429 li
220.39 261.135 220.04 260.785 219.816 260.365 cv
219.592 259.959 219.466 259.483 219.466 258.951 cv
219.466 258.083 219.746 257.411 220.292 256.963 cv
220.838 256.515 221.636 256.277 222.686 256.277 cv
f
225.57 253.589 mo
225.57 252.147 li
227.306 252.147 li
227.306 253.589 li
225.57 253.589 li
f
223.484 243.817 mo
222.56 243.817 221.846 244.013 221.314 244.391 cv
220.782 244.783 220.516 245.301 220.516 245.959 cv
220.516 246.631 220.782 247.149 221.314 247.527 cv
221.846 247.919 222.56 248.101 223.484 248.101 cv
224.408 248.101 225.136 247.919 225.668 247.527 cv
226.2 247.149 226.452 246.631 226.452 245.959 cv
226.452 245.301 226.2 244.783 225.668 244.391 cv
225.136 244.013 224.408 243.817 223.484 243.817 cv
220.81 248.101 mo
220.362 247.849 220.026 247.513 219.802 247.107 cv
219.578 246.701 219.466 246.211 219.466 245.651 cv
219.466 244.727 219.844 243.971 220.572 243.383 cv
221.314 242.809 222.28 242.515 223.484 242.515 cv
224.688 242.515 225.668 242.809 226.396 243.383 cv
227.124 243.971 227.488 244.727 227.488 245.651 cv
227.488 246.211 227.376 246.701 227.166 247.107 cv
226.956 247.513 226.62 247.849 226.158 248.101 cv
227.306 248.101 li
227.306 249.361 li
216.666 249.361 li
216.666 248.101 li
220.81 248.101 li
f
223.456 236.943 mo
223.456 237.965 223.582 238.665 223.806 239.057 cv
224.044 239.449 224.436 239.645 224.996 239.645 cv
225.444 239.645 225.808 239.505 226.06 239.211 cv
226.326 238.917 226.452 238.511 226.452 238.007 cv
226.452 237.307 226.214 236.747 225.71 236.327 cv
225.22 235.907 224.562 235.697 223.736 235.697 cv
223.456 235.697 li
223.456 236.943 li
222.938 234.437 mo
227.306 234.437 li
227.306 235.697 li
226.144 235.697 li
226.62 235.991 226.956 236.355 227.166 236.775 cv
227.376 237.195 227.488 237.727 227.488 238.343 cv
227.488 239.127 227.278 239.757 226.844 240.219 cv
226.41 240.681 225.822 240.905 225.08 240.905 cv
224.226 240.905 223.582 240.625 223.134 240.037 cv
222.7 239.463 222.476 238.609 222.476 237.461 cv
222.476 235.697 li
222.35 235.697 li
221.776 235.697 221.328 235.893 221.006 236.271 cv
220.698 236.649 220.53 237.181 220.53 237.867 cv
220.53 238.315 220.586 238.735 220.698 239.155 cv
220.81 239.575 220.964 239.967 221.16 240.345 cv
219.998 240.345 li
219.83 239.897 219.69 239.449 219.606 239.015 cv
219.522 238.581 219.466 238.161 219.466 237.741 cv
219.466 236.635 219.76 235.809 220.334 235.263 cv
220.908 234.717 221.776 234.437 222.938 234.437 cv
f
219.648 231.847 mo
219.648 230.587 li
227.306 230.587 li
227.306 231.847 li
219.648 231.847 li
216.666 231.847 mo
216.666 230.587 li
218.262 230.587 li
218.262 231.847 li
216.666 231.847 li
f
220.81 222.915 mo
216.666 222.915 li
216.666 221.655 li
227.306 221.655 li
227.306 222.915 li
226.158 222.915 li
226.62 223.181 226.956 223.517 227.166 223.923 cv
227.376 224.329 227.488 224.805 227.488 225.365 cv
227.488 226.289 227.124 227.045 226.396 227.633 cv
225.668 228.221 224.688 228.501 223.484 228.501 cv
222.28 228.501 221.314 228.221 220.572 227.633 cv
219.844 227.045 219.466 226.289 219.466 225.365 cv
219.466 224.805 219.578 224.329 219.802 223.923 cv
220.026 223.517 220.362 223.181 220.81 222.915 cv
223.484 227.199 mo
224.408 227.199 225.136 227.017 225.668 226.639 cv
226.2 226.261 226.452 225.729 226.452 225.057 cv
226.452 224.399 226.2 223.881 225.668 223.489 cv
225.136 223.111 224.408 222.915 223.484 222.915 cv
222.56 222.915 221.846 223.111 221.314 223.489 cv
220.782 223.881 220.516 224.399 220.516 225.057 cv
220.516 225.729 220.782 226.261 221.314 226.639 cv
221.846 227.017 222.56 227.199 223.484 227.199 cv
f
224.282 219.191 mo
219.648 219.191 li
219.648 217.931 li
224.24 217.931 li
224.968 217.931 225.5 217.791 225.864 217.511 cv
226.228 217.231 226.41 216.811 226.41 216.237 cv
226.41 215.565 226.2 215.019 225.766 214.627 cv
225.332 214.235 224.744 214.039 223.988 214.039 cv
219.648 214.039 li
219.648 212.779 li
227.306 212.779 li
227.306 214.039 li
226.13 214.039 li
226.606 214.347 226.942 214.711 227.166 215.103 cv
227.376 215.509 227.488 215.971 227.488 216.503 cv
227.488 217.385 227.222 218.057 226.676 218.505 cv
226.144 218.967 225.346 219.191 224.282 219.191 cv
219.466 216.027 mo
219.466 216.027 li
f
225.57 210.007 mo
225.57 208.565 li
227.306 208.565 li
227.306 210.007 li
225.57 210.007 li
f
219.942 200.221 mo
221.118 200.221 li
220.922 200.585 220.782 200.935 220.684 201.299 cv
220.586 201.663 220.53 202.013 220.53 202.377 cv
220.53 203.189 220.796 203.833 221.314 204.281 cv
221.832 204.729 222.56 204.953 223.484 204.953 cv
224.422 204.953 225.15 204.729 225.668 204.281 cv
226.186 203.833 226.438 203.189 226.438 202.377 cv
226.438 202.013 226.396 201.663 226.298 201.299 cv
226.2 200.935 226.046 200.585 225.85 200.221 cv
227.012 200.221 li
227.18 200.585 227.306 200.949 227.376 201.313 cv
227.446 201.691 227.488 202.097 227.488 202.517 cv
227.488 203.665 227.138 204.589 226.41 205.261 cv
225.696 205.947 224.716 206.283 223.484 206.283 cv
222.238 206.283 221.258 205.947 220.544 205.261 cv
219.83 204.575 219.466 203.637 219.466 202.433 cv
219.466 202.041 219.508 201.663 219.592 201.299 cv
219.676 200.935 219.788 200.571 219.942 200.221 cv
f
220.53 195.069 mo
220.53 195.741 220.796 196.273 221.328 196.665 cv
221.86 197.057 222.574 197.253 223.484 197.253 cv
224.408 197.253 225.122 197.071 225.654 196.679 cv
226.186 196.287 226.438 195.755 226.438 195.069 cv
226.438 194.397 226.186 193.865 225.654 193.473 cv
225.122 193.081 224.408 192.885 223.484 192.885 cv
222.588 192.885 221.86 193.081 221.328 193.473 cv
220.796 193.865 220.53 194.397 220.53 195.069 cv
219.466 195.069 mo
219.466 193.977 219.83 193.123 220.53 192.493 cv
221.244 191.877 222.224 191.555 223.484 191.555 cv
224.744 191.555 225.724 191.877 226.424 192.493 cv
227.138 193.123 227.488 193.977 227.488 195.069 cv
227.488 196.175 227.138 197.043 226.424 197.659 cv
225.724 198.275 224.744 198.583 223.484 198.583 cv
222.224 198.583 221.244 198.275 220.53 197.659 cv
219.83 197.043 219.466 196.175 219.466 195.069 cv
f
221.118 183.505 mo
220.558 183.197 220.152 182.819 219.872 182.385 cv
219.606 181.951 219.466 181.433 219.466 180.831 cv
219.466 180.047 219.746 179.431 220.306 178.997 cv
220.866 178.563 221.664 178.339 222.686 178.339 cv
227.306 178.339 li
227.306 179.599 li
222.728 179.599 li
222 179.599 221.454 179.739 221.09 179.991 cv
220.74 180.257 220.558 180.649 220.558 181.181 cv
220.558 181.839 220.782 182.357 221.216 182.735 cv
221.65 183.113 222.238 183.295 222.98 183.295 cv
227.306 183.295 li
227.306 184.555 li
222.728 184.555 li
222 184.555 221.454 184.695 221.09 184.947 cv
220.74 185.213 220.558 185.619 220.558 186.151 cv
220.558 186.795 220.782 187.313 221.216 187.691 cv
221.65 188.069 222.238 188.251 222.98 188.251 cv
227.306 188.251 li
227.306 189.511 li
219.648 189.511 li
219.648 188.251 li
220.838 188.251 li
220.376 187.971 220.026 187.621 219.802 187.215 cv
219.578 186.823 219.466 186.347 219.466 185.787 cv
219.466 185.227 219.606 184.765 219.886 184.373 cv
220.166 183.981 220.586 183.701 221.118 183.505 cv
f
238.396 170.154 mo
238.396 173.654 li
f
238.396 170.154 mo
238.396 173.654 li
@
241.116 277.307 mo
245.162 277.307 li
245.162 278.567 li
234.606 278.567 li
234.606 277.307 li
235.768 277.307 li
235.32 277.055 234.984 276.719 234.76 276.313 cv
234.536 275.907 234.424 275.417 234.424 274.857 cv
234.424 273.933 234.802 273.177 235.53 272.589 cv
236.272 272.015 237.238 271.721 238.442 271.721 cv
239.646 271.721 240.626 272.015 241.354 272.589 cv
242.082 273.177 242.446 273.933 242.446 274.857 cv
242.446 275.417 242.334 275.907 242.124 276.313 cv
241.914 276.719 241.578 277.055 241.116 277.307 cv
238.442 273.023 mo
237.518 273.023 236.804 273.219 236.272 273.597 cv
235.74 273.989 235.474 274.507 235.474 275.165 cv
235.474 275.837 235.74 276.355 236.272 276.733 cv
236.804 277.125 237.518 277.307 238.442 277.307 cv
239.366 277.307 240.094 277.125 240.626 276.733 cv
241.158 276.355 241.41 275.837 241.41 275.165 cv
241.41 274.507 241.158 273.989 240.626 273.597 cv
240.094 273.219 239.366 273.023 238.442 273.023 cv
f
235.488 266.667 mo
235.488 267.339 235.754 267.871 236.286 268.263 cv
236.818 268.655 237.532 268.851 238.442 268.851 cv
239.366 268.851 240.08 268.669 240.612 268.277 cv
241.144 267.885 241.396 267.353 241.396 266.667 cv
241.396 265.995 241.144 265.463 240.612 265.071 cv
240.08 264.679 239.366 264.483 238.442 264.483 cv
237.546 264.483 236.818 264.679 236.286 265.071 cv
235.754 265.463 235.488 265.995 235.488 266.667 cv
234.424 266.667 mo
234.424 265.575 234.788 264.721 235.488 264.091 cv
236.202 263.475 237.182 263.153 238.442 263.153 cv
239.702 263.153 240.682 263.475 241.382 264.091 cv
242.096 264.721 242.446 265.575 242.446 266.667 cv
242.446 267.773 242.096 268.641 241.382 269.257 cv
240.682 269.873 239.702 270.181 238.442 270.181 cv
237.182 270.181 236.202 269.873 235.488 269.257 cv
234.788 268.641 234.424 267.773 234.424 266.667 cv
f
234.83 256.181 mo
236.02 256.181 li
235.852 256.545 235.712 256.909 235.614 257.287 cv
235.53 257.679 235.474 258.071 235.474 258.477 cv
235.474 259.107 235.572 259.583 235.768 259.891 cv
235.964 260.199 236.244 260.353 236.622 260.353 cv
236.916 260.353 237.14 260.241 237.308 260.017 cv
237.476 259.793 237.644 259.345 237.784 258.673 cv
237.882 258.239 li
238.078 257.343 238.358 256.713 238.694 256.335 cv
239.044 255.971 239.534 255.775 240.15 255.775 cv
240.864 255.775 241.424 256.055 241.83 256.615 cv
242.25 257.175 242.446 257.959 242.446 258.939 cv
242.446 259.359 242.404 259.779 242.334 260.227 cv
242.264 260.675 242.152 261.137 241.984 261.627 cv
240.682 261.627 li
240.934 261.165 241.116 260.703 241.228 260.255 cv
241.354 259.807 241.41 259.359 241.41 258.911 cv
241.41 258.323 241.312 257.861 241.116 257.539 cv
240.92 257.231 240.626 257.063 240.248 257.063 cv
239.912 257.063 239.646 257.189 239.464 257.413 cv
239.282 257.637 239.1 258.141 238.932 258.925 cv
238.834 259.359 li
238.666 260.143 238.414 260.717 238.078 261.053 cv
237.742 261.403 237.28 261.571 236.678 261.571 cv
235.964 261.571 235.404 261.319 235.012 260.815 cv
234.62 260.311 234.424 259.583 234.424 258.631 cv
234.424 258.169 234.466 257.735 234.536 257.315 cv
234.606 256.909 234.704 256.531 234.83 256.181 cv
f
240.528 253.591 mo
240.528 252.149 li
242.264 252.149 li
242.264 253.591 li
240.528 253.591 li
f
238.442 243.819 mo
237.518 243.819 236.804 244.015 236.272 244.393 cv
235.74 244.785 235.474 245.303 235.474 245.961 cv
235.474 246.633 235.74 247.151 236.272 247.529 cv
236.804 247.921 237.518 248.103 238.442 248.103 cv
239.366 248.103 240.094 247.921 240.626 247.529 cv
241.158 247.151 241.41 246.633 241.41 245.961 cv
241.41 245.303 241.158 244.785 240.626 244.393 cv
240.094 244.015 239.366 243.819 238.442 243.819 cv
235.768 248.103 mo
235.32 247.851 234.984 247.515 234.76 247.109 cv
234.536 246.703 234.424 246.213 234.424 245.653 cv
234.424 244.729 234.802 243.973 235.53 243.385 cv
236.272 242.811 237.238 242.517 238.442 242.517 cv
239.646 242.517 240.626 242.811 241.354 243.385 cv
242.082 243.973 242.446 244.729 242.446 245.653 cv
242.446 246.213 242.334 246.703 242.124 247.109 cv
241.914 247.515 241.578 247.851 241.116 248.103 cv
242.264 248.103 li
242.264 249.363 li
231.624 249.363 li
231.624 248.103 li
235.768 248.103 li
f
238.414 236.945 mo
238.414 237.967 238.54 238.667 238.764 239.059 cv
239.002 239.451 239.394 239.647 239.954 239.647 cv
240.402 239.647 240.766 239.507 241.018 239.213 cv
241.284 238.919 241.41 238.513 241.41 238.009 cv
241.41 237.309 241.172 236.749 240.668 236.329 cv
240.178 235.909 239.52 235.699 238.694 235.699 cv
238.414 235.699 li
238.414 236.945 li
237.896 234.439 mo
242.264 234.439 li
242.264 235.699 li
241.102 235.699 li
241.578 235.993 241.914 236.357 242.124 236.777 cv
242.334 237.197 242.446 237.729 242.446 238.345 cv
242.446 239.129 242.236 239.759 241.802 240.221 cv
241.368 240.683 240.78 240.907 240.038 240.907 cv
239.184 240.907 238.54 240.627 238.092 240.039 cv
237.658 239.465 237.434 238.611 237.434 237.463 cv
237.434 235.699 li
237.308 235.699 li
236.734 235.699 236.286 235.895 235.964 236.273 cv
235.656 236.651 235.488 237.183 235.488 237.869 cv
235.488 238.317 235.544 238.737 235.656 239.157 cv
235.768 239.577 235.922 239.969 236.118 240.347 cv
234.956 240.347 li
234.788 239.899 234.648 239.451 234.564 239.017 cv
234.48 238.583 234.424 238.163 234.424 237.743 cv
234.424 236.637 234.718 235.811 235.292 235.265 cv
235.866 234.719 236.734 234.439 237.896 234.439 cv
f
234.606 231.849 mo
234.606 230.589 li
242.264 230.589 li
242.264 231.849 li
234.606 231.849 li
231.624 231.849 mo
231.624 230.589 li
233.22 230.589 li
233.22 231.849 li
231.624 231.849 li
f
235.768 222.917 mo
231.624 222.917 li
231.624 221.657 li
242.264 221.657 li
242.264 222.917 li
241.116 222.917 li
241.578 223.183 241.914 223.519 242.124 223.925 cv
242.334 224.331 242.446 224.807 242.446 225.367 cv
242.446 226.291 242.082 227.047 241.354 227.635 cv
240.626 228.223 239.646 228.503 238.442 228.503 cv
237.238 228.503 236.272 228.223 235.53 227.635 cv
234.802 227.047 234.424 226.291 234.424 225.367 cv
234.424 224.807 234.536 224.331 234.76 223.925 cv
234.984 223.519 235.32 223.183 235.768 222.917 cv
238.442 227.201 mo
239.366 227.201 240.094 227.019 240.626 226.641 cv
241.158 226.263 241.41 225.731 241.41 225.059 cv
241.41 224.401 241.158 223.883 240.626 223.491 cv
240.094 223.113 239.366 222.917 238.442 222.917 cv
237.518 222.917 236.804 223.113 236.272 223.491 cv
235.74 223.883 235.474 224.401 235.474 225.059 cv
235.474 225.731 235.74 226.263 236.272 226.641 cv
236.804 227.019 237.518 227.201 238.442 227.201 cv
f
239.24 219.193 mo
234.606 219.193 li
234.606 217.933 li
239.198 217.933 li
239.926 217.933 240.458 217.793 240.822 217.513 cv
241.186 217.233 241.368 216.813 241.368 216.239 cv
241.368 215.567 241.158 215.021 240.724 214.629 cv
240.29 214.237 239.702 214.042 238.946 214.042 cv
234.606 214.042 li
234.606 212.781 li
242.264 212.781 li
242.264 214.042 li
241.088 214.042 li
241.564 214.35 241.9 214.713 242.124 215.105 cv
242.334 215.511 242.446 215.973 242.446 216.505 cv
242.446 217.387 242.18 218.059 241.634 218.507 cv
241.102 218.969 240.304 219.193 239.24 219.193 cv
234.424 216.029 mo
234.424 216.029 li
f
240.528 210.009 mo
240.528 208.568 li
242.264 208.568 li
242.264 210.009 li
240.528 210.009 li
f
234.9 200.223 mo
236.076 200.223 li
235.88 200.587 235.74 200.938 235.642 201.301 cv
235.544 201.665 235.488 202.016 235.488 202.38 cv
235.488 203.191 235.754 203.836 236.272 204.284 cv
236.79 204.732 237.518 204.956 238.442 204.956 cv
239.38 204.956 240.108 204.732 240.626 204.284 cv
241.144 203.836 241.396 203.191 241.396 202.38 cv
241.396 202.016 241.354 201.665 241.256 201.301 cv
241.158 200.938 241.004 200.587 240.808 200.223 cv
241.97 200.223 li
242.138 200.587 242.264 200.952 242.334 201.315 cv
242.404 201.693 242.446 202.1 242.446 202.52 cv
242.446 203.667 242.096 204.591 241.368 205.263 cv
240.654 205.949 239.674 206.285 238.442 206.285 cv
237.196 206.285 236.216 205.949 235.502 205.263 cv
234.788 204.577 234.424 203.639 234.424 202.436 cv
234.424 202.044 234.466 201.665 234.55 201.301 cv
234.634 200.938 234.746 200.574 234.9 200.223 cv
f
235.488 195.072 mo
235.488 195.743 235.754 196.275 236.286 196.667 cv
236.818 197.06 237.532 197.255 238.442 197.255 cv
239.366 197.255 240.08 197.074 240.612 196.681 cv
241.144 196.289 241.396 195.758 241.396 195.072 cv
241.396 194.4 241.144 193.867 240.612 193.475 cv
240.08 193.083 239.366 192.887 238.442 192.887 cv
237.546 192.887 236.818 193.083 236.286 193.475 cv
235.754 193.867 235.488 194.4 235.488 195.072 cv
234.424 195.072 mo
234.424 193.979 234.788 193.125 235.488 192.495 cv
236.202 191.88 237.182 191.557 238.442 191.557 cv
239.702 191.557 240.682 191.88 241.382 192.495 cv
242.096 193.125 242.446 193.979 242.446 195.072 cv
242.446 196.177 242.096 197.046 241.382 197.661 cv
240.682 198.277 239.702 198.586 238.442 198.586 cv
237.182 198.586 236.202 198.277 235.488 197.661 cv
234.788 197.046 234.424 196.177 234.424 195.072 cv
f
236.076 183.507 mo
235.516 183.199 235.11 182.822 234.83 182.387 cv
234.564 181.954 234.424 181.436 234.424 180.833 cv
234.424 180.049 234.704 179.434 235.264 178.999 cv
235.824 178.566 236.622 178.341 237.644 178.341 cv
242.264 178.341 li
242.264 179.602 li
237.686 179.602 li
236.958 179.602 236.412 179.742 236.048 179.993 cv
235.698 180.26 235.516 180.652 235.516 181.184 cv
235.516 181.841 235.74 182.359 236.174 182.738 cv
236.608 183.115 237.196 183.298 237.938 183.298 cv
242.264 183.298 li
242.264 184.557 li
237.686 184.557 li
236.958 184.557 236.412 184.697 236.048 184.949 cv
235.698 185.215 235.516 185.622 235.516 186.154 cv
235.516 186.798 235.74 187.315 236.174 187.693 cv
236.608 188.072 237.196 188.254 237.938 188.254 cv
242.264 188.254 li
242.264 189.513 li
234.606 189.513 li
234.606 188.254 li
235.796 188.254 li
235.334 187.973 234.984 187.624 234.76 187.217 cv
234.536 186.826 234.424 186.35 234.424 185.79 cv
234.424 185.229 234.564 184.768 234.844 184.376 cv
235.124 183.984 235.544 183.704 236.076 183.507 cv
f
253.354 170.154 mo
253.354 173.654 li
f
253.354 170.154 mo
253.354 173.654 li
@
253.399 258.754 mo
254.323 258.754 255.051 258.572 255.583 258.194 cv
256.115 257.816 256.367 257.284 256.367 256.612 cv
256.367 255.954 256.115 255.436 255.583 255.044 cv
255.051 254.666 254.323 254.47 253.399 254.47 cv
252.475 254.47 251.761 254.666 251.229 255.044 cv
250.697 255.436 250.431 255.954 250.431 256.612 cv
250.431 257.284 250.697 257.816 251.229 258.194 cv
251.761 258.572 252.475 258.754 253.399 258.754 cv
256.073 254.47 mo
256.535 254.736 256.871 255.072 257.081 255.478 cv
257.291 255.884 257.403 256.36 257.403 256.92 cv
257.403 257.844 257.039 258.6 256.311 259.188 cv
255.583 259.776 254.603 260.056 253.399 260.056 cv
252.195 260.056 251.229 259.776 250.487 259.188 cv
249.759 258.6 249.381 257.844 249.381 256.92 cv
249.381 256.36 249.493 255.884 249.717 255.478 cv
249.941 255.072 250.277 254.736 250.725 254.47 cv
249.563 254.47 li
249.563 253.21 li
260.119 253.21 li
260.119 254.47 li
256.073 254.47 li
f
249.563 250.62 mo
249.563 249.36 li
257.221 249.36 li
257.221 250.62 li
249.563 250.62 li
246.581 250.62 mo
246.581 249.36 li
248.177 249.36 li
248.177 250.62 li
246.581 250.62 li
f
252.601 240.358 mo
257.221 240.358 li
257.221 241.618 li
252.643 241.618 li
251.915 241.618 251.383 241.772 251.019 242.052 cv
250.655 242.332 250.473 242.752 250.473 243.312 cv
250.473 243.998 250.697 244.53 251.131 244.922 cv
251.565 245.314 252.153 245.51 252.895 245.51 cv
257.221 245.51 li
257.221 246.77 li
249.563 246.77 li
249.563 245.51 li
250.753 245.51 li
250.305 245.216 249.955 244.866 249.731 244.446 cv
249.507 244.04 249.381 243.564 249.381 243.032 cv
249.381 242.164 249.661 241.492 250.207 241.044 cv
250.753 240.596 251.551 240.358 252.601 240.358 cv
f
253.301 232.812 mo
252.405 232.812 251.691 233.008 251.187 233.372 cv
250.683 233.75 250.431 234.282 250.431 234.954 cv
250.431 235.626 250.683 236.158 251.187 236.536 cv
251.691 236.914 252.405 237.096 253.301 237.096 cv
254.211 237.096 254.911 236.914 255.415 236.536 cv
255.919 236.158 256.171 235.626 256.171 234.954 cv
256.171 234.282 255.919 233.75 255.415 233.372 cv
254.911 233.008 254.211 232.812 253.301 232.812 cv
256.269 231.552 mo
257.557 231.552 258.523 231.846 259.167 232.42 cv
259.797 233.008 260.119 233.89 260.119 235.08 cv
260.119 235.528 260.077 235.934 260.021 236.326 cv
259.951 236.718 259.853 237.11 259.713 237.474 cv
258.495 237.474 li
258.691 237.11 258.831 236.746 258.929 236.382 cv
259.027 236.018 259.083 235.654 259.083 235.276 cv
259.083 234.464 258.859 233.848 258.439 233.428 cv
258.005 233.022 257.361 232.812 256.493 232.812 cv
255.877 232.812 li
256.325 233.078 256.661 233.414 256.885 233.82 cv
257.109 234.226 257.221 234.702 257.221 235.262 cv
257.221 236.214 256.871 236.97 256.157 237.544 cv
255.443 238.118 254.491 238.398 253.301 238.398 cv
252.125 238.398 251.173 238.118 250.459 237.544 cv
249.745 236.97 249.381 236.214 249.381 235.262 cv
249.381 234.702 249.493 234.226 249.717 233.82 cv
249.941 233.414 250.277 233.078 250.725 232.812 cv
249.563 232.812 li
249.563 231.552 li
256.269 231.552 li
f
255.485 228.78 mo
255.485 227.338 li
257.221 227.338 li
257.221 228.78 li
255.485 228.78 li
f
249.563 225.238 mo
249.563 223.978 li
255.541 222.41 li
249.563 220.842 li
249.563 219.358 li
255.541 217.79 li
249.563 216.222 li
249.563 214.962 li
257.221 216.964 li
257.221 218.448 li
250.949 220.1 li
257.221 221.752 li
257.221 223.236 li
249.563 225.238 li
f
256.073 211.84 mo
260.119 211.84 li
260.119 213.1 li
249.563 213.1 li
249.563 211.84 li
250.725 211.84 li
250.277 211.588 249.941 211.252 249.717 210.846 cv
249.493 210.44 249.381 209.95 249.381 209.39 cv
249.381 208.466 249.759 207.71 250.487 207.122 cv
251.229 206.548 252.195 206.254 253.399 206.254 cv
254.603 206.254 255.583 206.548 256.311 207.122 cv
257.039 207.71 257.403 208.466 257.403 209.39 cv
257.403 209.95 257.291 210.44 257.081 210.846 cv
256.871 211.252 256.535 211.588 256.073 211.84 cv
253.399 207.556 mo
252.475 207.556 251.761 207.752 251.229 208.13 cv
250.697 208.522 250.431 209.04 250.431 209.698 cv
250.431 210.37 250.697 210.888 251.229 211.266 cv
251.761 211.658 252.475 211.84 253.399 211.84 cv
254.323 211.84 255.051 211.658 255.583 211.266 cv
256.115 210.888 256.367 210.37 256.367 209.698 cv
256.367 209.04 256.115 208.522 255.583 208.13 cv
255.051 207.752 254.323 207.556 253.399 207.556 cv
f
249.787 199.282 mo
250.977 199.282 li
250.809 199.646 250.669 200.01 250.571 200.388 cv
250.487 200.78 250.431 201.172 250.431 201.578 cv
250.431 202.208 250.529 202.684 250.725 202.992 cv
250.921 203.3 251.201 203.454 251.579 203.454 cv
251.873 203.454 252.097 203.342 252.265 203.118 cv
252.433 202.894 252.601 202.446 252.741 201.774 cv
252.839 201.34 li
253.035 200.444 253.315 199.814 253.651 199.436 cv
254.001 199.072 254.491 198.876 255.107 198.876 cv
255.821 198.876 256.381 199.156 256.787 199.716 cv
257.207 200.276 257.403 201.06 257.403 202.04 cv
257.403 202.46 257.361 202.88 257.291 203.328 cv
257.221 203.776 257.109 204.238 256.941 204.728 cv
255.639 204.728 li
255.891 204.266 256.073 203.804 256.185 203.356 cv
256.311 202.908 256.367 202.46 256.367 202.012 cv
256.367 201.424 256.269 200.962 256.073 200.64 cv
255.877 200.332 255.583 200.164 255.205 200.164 cv
254.869 200.164 254.603 200.29 254.421 200.514 cv
254.239 200.738 254.057 201.242 253.889 202.026 cv
253.791 202.46 li
253.623 203.244 253.371 203.818 253.035 204.154 cv
252.699 204.504 252.237 204.672 251.635 204.672 cv
250.921 204.672 250.361 204.42 249.969 203.916 cv
249.577 203.412 249.381 202.684 249.381 201.732 cv
249.381 201.27 249.423 200.836 249.493 200.416 cv
249.563 200.01 249.661 199.632 249.787 199.282 cv
f
255.485 196.692 mo
255.485 195.25 li
257.221 195.25 li
257.221 196.692 li
255.485 196.692 li
f
249.857 186.906 mo
251.033 186.906 li
250.837 187.27 250.697 187.62 250.599 187.984 cv
250.501 188.348 250.445 188.698 250.445 189.062 cv
250.445 189.874 250.711 190.518 251.229 190.966 cv
251.747 191.414 252.475 191.638 253.399 191.638 cv
254.337 191.638 255.065 191.414 255.583 190.966 cv
256.101 190.518 256.353 189.874 256.353 189.062 cv
256.353 188.698 256.311 188.348 256.213 187.984 cv
256.115 187.62 255.961 187.27 255.765 186.906 cv
256.927 186.906 li
257.095 187.27 257.221 187.634 257.291 187.998 cv
257.361 188.376 257.403 188.782 257.403 189.202 cv
257.403 190.35 257.053 191.274 256.325 191.946 cv
255.611 192.632 254.631 192.968 253.399 192.968 cv
252.153 192.968 251.173 192.632 250.459 191.946 cv
249.745 191.26 249.381 190.322 249.381 189.118 cv
249.381 188.726 249.423 188.348 249.507 187.984 cv
249.591 187.62 249.703 187.256 249.857 186.906 cv
f
252.601 178.352 mo
257.221 178.352 li
257.221 179.612 li
252.643 179.612 li
251.915 179.612 251.383 179.766 251.019 180.046 cv
250.655 180.326 250.473 180.746 250.473 181.306 cv
250.473 181.992 250.697 182.524 251.131 182.916 cv
251.565 183.308 252.153 183.504 252.895 183.504 cv
257.221 183.504 li
257.221 184.764 li
249.563 184.764 li
249.563 183.504 li
250.753 183.504 li
250.305 183.21 249.955 182.86 249.731 182.44 cv
249.507 182.034 249.381 181.558 249.381 181.026 cv
249.381 180.158 249.661 179.486 250.207 179.038 cv
250.753 178.59 251.551 178.352 252.601 178.352 cv
f
268.312 170.154 mo
268.312 173.654 li
f
268.312 170.154 mo
268.312 173.654 li
@
264.745 230.452 mo
265.935 230.452 li
265.767 230.816 265.627 231.18 265.529 231.558 cv
265.445 231.95 265.389 232.342 265.389 232.748 cv
265.389 233.378 265.487 233.854 265.683 234.162 cv
265.879 234.47 266.159 234.624 266.537 234.624 cv
266.831 234.624 267.055 234.512 267.223 234.288 cv
267.391 234.064 267.559 233.616 267.699 232.944 cv
267.797 232.51 li
267.993 231.614 268.273 230.984 268.609 230.606 cv
268.959 230.242 269.449 230.046 270.065 230.046 cv
270.779 230.046 271.339 230.326 271.745 230.886 cv
272.165 231.446 272.361 232.23 272.361 233.21 cv
272.361 233.63 272.319 234.05 272.249 234.498 cv
272.179 234.946 272.067 235.408 271.899 235.898 cv
270.597 235.898 li
270.849 235.436 271.031 234.974 271.143 234.526 cv
271.269 234.078 271.325 233.63 271.325 233.182 cv
271.325 232.594 271.227 232.132 271.031 231.81 cv
270.835 231.502 270.541 231.334 270.163 231.334 cv
269.827 231.334 269.561 231.46 269.379 231.684 cv
269.197 231.908 269.015 232.412 268.847 233.196 cv
268.749 233.63 li
268.581 234.414 268.329 234.988 267.993 235.324 cv
267.657 235.674 267.195 235.842 266.593 235.842 cv
265.879 235.842 265.319 235.59 264.927 235.086 cv
264.535 234.582 264.339 233.854 264.339 232.902 cv
264.339 232.44 264.381 232.006 264.451 231.586 cv
264.521 231.18 264.619 230.802 264.745 230.452 cv
f
270.443 227.862 mo
270.443 226.42 li
272.179 226.42 li
272.179 227.862 li
270.443 227.862 li
f
266.677 219.224 mo
266.817 218.566 267.111 218.048 267.559 217.684 cv
268.007 217.32 268.567 217.124 269.211 217.124 cv
270.219 217.124 271.003 217.474 271.549 218.16 cv
272.095 218.86 272.361 219.84 272.361 221.114 cv
272.361 221.548 272.319 221.996 272.235 222.444 cv
272.165 222.892 272.039 223.368 271.871 223.844 cv
270.541 223.844 li
270.765 223.466 270.933 223.046 271.045 222.584 cv
271.157 222.136 271.213 221.66 271.213 221.156 cv
271.213 220.288 271.045 219.63 270.709 219.182 cv
270.373 218.734 269.869 218.496 269.211 218.496 cv
268.623 218.496 268.147 218.706 267.811 219.126 cv
267.475 219.546 267.293 220.134 267.293 220.89 cv
267.293 222.08 li
266.159 222.08 li
266.159 220.834 li
266.159 220.162 266.033 219.644 265.753 219.28 cv
265.487 218.916 265.095 218.734 264.577 218.734 cv
264.059 218.734 263.653 218.93 263.373 219.294 cv
263.093 219.672 262.953 220.204 262.953 220.89 cv
262.953 221.268 262.995 221.674 263.079 222.108 cv
263.163 222.542 263.289 223.018 263.457 223.536 cv
262.225 223.536 li
262.085 223.018 261.973 222.528 261.903 222.066 cv
261.833 221.618 261.791 221.184 261.791 220.764 cv
261.791 219.728 262.029 218.902 262.505 218.286 cv
262.981 217.67 263.625 217.362 264.437 217.362 cv
264.997 217.362 265.473 217.53 265.865 217.852 cv
266.257 218.174 266.537 218.636 266.677 219.224 cv
f
266.523 211.384 mo
266.523 212 266.747 212.49 267.167 212.854 cv
267.587 213.218 268.175 213.4 268.903 213.4 cv
269.645 213.4 270.233 213.218 270.653 212.854 cv
271.073 212.49 271.283 212 271.283 211.384 cv
271.283 210.768 271.073 210.278 270.653 209.914 cv
270.233 209.55 269.645 209.368 268.903 209.368 cv
268.175 209.368 267.587 209.55 267.167 209.914 cv
266.747 210.278 266.523 210.768 266.523 211.384 cv
262.197 208.64 mo
263.457 208.64 li
263.289 208.99 263.163 209.34 263.079 209.69 cv
262.995 210.054 262.953 210.404 262.953 210.74 cv
262.953 211.664 263.261 212.364 263.877 212.84 cv
264.493 213.316 265.431 213.596 266.663 213.652 cv
266.271 213.386 265.963 213.05 265.753 212.644 cv
265.543 212.238 265.431 211.79 265.431 211.3 cv
265.431 210.278 265.753 209.466 266.369 208.878 cv
266.985 208.29 267.839 207.982 268.903 207.982 cv
269.953 207.982 270.793 208.304 271.423 208.92 cv
272.053 209.536 272.361 210.362 272.361 211.384 cv
272.361 212.56 271.913 213.47 271.017 214.086 cv
270.121 214.716 268.805 215.024 267.083 215.024 cv
265.473 215.024 264.185 214.646 263.233 213.876 cv
262.281 213.12 261.791 212.084 261.791 210.796 cv
261.791 210.46 261.833 210.11 261.889 209.746 cv
261.959 209.396 262.057 209.032 262.197 208.64 cv
f
262.883 202.648 mo
262.883 203.362 263.233 203.894 263.933 204.258 cv
264.633 204.622 265.683 204.79 267.083 204.79 cv
268.483 204.79 269.533 204.622 270.233 204.258 cv
270.933 203.894 271.283 203.362 271.283 202.648 cv
271.283 201.934 270.933 201.402 270.233 201.038 cv
269.533 200.688 268.483 200.506 267.083 200.506 cv
265.683 200.506 264.633 200.688 263.933 201.038 cv
263.233 201.402 262.883 201.934 262.883 202.648 cv
261.791 202.648 mo
261.791 201.514 262.253 200.646 263.149 200.03 cv
264.059 199.428 265.375 199.12 267.083 199.12 cv
268.805 199.12 270.121 199.428 271.017 200.03 cv
271.913 200.646 272.361 201.514 272.361 202.648 cv
272.361 203.796 271.913 204.678 271.017 205.28 cv
270.121 205.882 268.805 206.176 267.083 206.176 cv
265.375 206.176 264.059 205.882 263.149 205.28 cv
262.253 204.678 261.791 203.796 261.791 202.648 cv
f
270.443 196.698 mo
270.443 195.256 li
272.179 195.256 li
272.179 196.698 li
270.443 196.698 li
f
264.815 186.912 mo
265.991 186.912 li
265.795 187.276 265.655 187.626 265.557 187.99 cv
265.459 188.354 265.403 188.704 265.403 189.068 cv
265.403 189.88 265.669 190.524 266.187 190.972 cv
266.705 191.42 267.433 191.644 268.357 191.644 cv
269.295 191.644 270.023 191.42 270.541 190.972 cv
271.059 190.524 271.311 189.88 271.311 189.068 cv
271.311 188.704 271.269 188.354 271.171 187.99 cv
271.073 187.626 270.919 187.276 270.723 186.912 cv
271.885 186.912 li
272.053 187.276 272.179 187.64 272.249 188.004 cv
272.319 188.382 272.361 188.788 272.361 189.208 cv
272.361 190.356 272.011 191.28 271.283 191.952 cv
270.569 192.638 269.589 192.974 268.357 192.974 cv
267.111 192.974 266.131 192.638 265.417 191.952 cv
264.703 191.266 264.339 190.328 264.339 189.124 cv
264.339 188.732 264.381 188.354 264.465 187.99 cv
264.549 187.626 264.661 187.262 264.815 186.912 cv
f
267.559 178.358 mo
272.179 178.358 li
272.179 179.618 li
267.601 179.618 li
266.873 179.618 266.341 179.772 265.977 180.052 cv
265.613 180.332 265.431 180.752 265.431 181.312 cv
265.431 181.998 265.655 182.53 266.089 182.922 cv
266.523 183.314 267.111 183.51 267.853 183.51 cv
272.179 183.51 li
272.179 184.77 li
264.521 184.77 li
264.521 183.51 li
265.711 183.51 li
265.263 183.216 264.913 182.866 264.689 182.446 cv
264.465 182.04 264.339 181.564 264.339 181.032 cv
264.339 180.164 264.619 179.492 265.165 179.044 cv
265.711 178.596 266.509 178.358 267.559 178.358 cv
f
283.27 170.154 mo
283.27 173.654 li
f
283.27 170.154 mo
283.27 173.654 li
@
279.479 280.925 mo
279.479 279.665 li
285.457 278.097 li
279.479 276.529 li
279.479 275.045 li
285.457 273.477 li
279.479 271.909 li
279.479 270.649 li
287.137 272.651 li
287.137 274.135 li
280.865 275.787 li
287.137 277.439 li
287.137 278.923 li
279.479 280.925 li
f
279.479 269.473 mo
279.479 268.213 li
285.457 266.645 li
279.479 265.077 li
279.479 263.593 li
285.457 262.025 li
279.479 260.457 li
279.479 259.197 li
287.137 261.199 li
287.137 262.683 li
280.865 264.335 li
287.137 265.987 li
287.137 267.471 li
279.479 269.473 li
f
279.479 258.021 mo
279.479 256.761 li
285.457 255.193 li
279.479 253.625 li
279.479 252.141 li
285.457 250.573 li
279.479 249.005 li
279.479 247.745 li
287.137 249.747 li
287.137 251.231 li
280.865 252.883 li
287.137 254.535 li
287.137 256.019 li
279.479 258.021 li
f
285.401 245.659 mo
285.401 244.217 li
287.137 244.217 li
287.137 245.659 li
285.401 245.659 li
f
285.975 240.969 mo
285.975 238.715 li
278.191 238.715 li
278.681 241.165 li
277.421 241.165 li
276.931 238.729 li
276.931 237.343 li
285.975 237.343 li
285.975 235.089 li
287.137 235.089 li
287.137 240.969 li
285.975 240.969 li
f
285.975 231.113 mo
285.975 226.297 li
287.137 226.297 li
287.137 232.779 li
285.975 232.779 li
285.443 232.261 284.715 231.547 283.791 230.637 cv
282.881 229.741 282.293 229.167 282.027 228.929 cv
281.537 228.481 281.117 228.173 280.767 228.005 cv
280.431 227.837 280.081 227.739 279.745 227.739 cv
279.213 227.739 278.765 227.935 278.429 228.313 cv
278.093 228.691 277.911 229.181 277.911 229.797 cv
277.911 230.231 277.995 230.693 278.135 231.169 cv
278.289 231.645 278.513 232.163 278.821 232.709 cv
277.421 232.709 li
277.197 232.149 277.029 231.631 276.917 231.155 cv
276.805 230.679 276.749 230.231 276.749 229.825 cv
276.749 228.775 277.015 227.935 277.547 227.305 cv
278.079 226.675 278.779 226.353 279.661 226.353 cv
280.081 226.353 280.487 226.437 280.851 226.591 cv
281.229 226.745 281.677 227.025 282.181 227.445 cv
282.321 227.557 282.699 227.921 283.329 228.537 cv
283.959 229.153 284.841 230.007 285.975 231.113 cv
f
281.635 219.213 mo
281.775 218.555 282.069 218.037 282.517 217.673 cv
282.965 217.309 283.525 217.113 284.169 217.113 cv
285.177 217.113 285.961 217.463 286.507 218.149 cv
287.053 218.849 287.319 219.829 287.319 221.103 cv
287.319 221.537 287.277 221.985 287.193 222.433 cv
287.123 222.881 286.997 223.357 286.829 223.833 cv
285.499 223.833 li
285.723 223.455 285.891 223.035 286.003 222.573 cv
286.115 222.125 286.171 221.649 286.171 221.145 cv
286.171 220.277 286.003 219.619 285.667 219.171 cv
285.331 218.723 284.827 218.485 284.169 218.485 cv
283.581 218.485 283.105 218.695 282.769 219.115 cv
282.433 219.535 282.251 220.123 282.251 220.879 cv
282.251 222.069 li
281.117 222.069 li
281.117 220.823 li
281.117 220.151 280.991 219.633 280.711 219.269 cv
280.445 218.905 280.053 218.723 279.535 218.723 cv
279.017 218.723 278.611 218.919 278.331 219.283 cv
278.051 219.661 277.911 220.193 277.911 220.879 cv
277.911 221.257 277.953 221.663 278.037 222.097 cv
278.121 222.531 278.247 223.007 278.415 223.525 cv
277.183 223.525 li
277.043 223.007 276.931 222.517 276.861 222.055 cv
276.791 221.607 276.749 221.173 276.749 220.753 cv
276.749 219.717 276.987 218.891 277.463 218.275 cv
277.939 217.659 278.583 217.351 279.395 217.351 cv
279.955 217.351 280.431 217.519 280.823 217.841 cv
281.215 218.163 281.495 218.625 281.635 219.213 cv
f
277.841 211.541 mo
277.841 212.255 278.191 212.787 278.891 213.151 cv
279.591 213.515 280.641 213.683 282.041 213.683 cv
283.441 213.683 284.491 213.515 285.191 213.151 cv
285.891 212.787 286.241 212.255 286.241 211.541 cv
286.241 210.827 285.891 210.295 285.191 209.931 cv
284.491 209.581 283.441 209.399 282.041 209.399 cv
280.641 209.399 279.591 209.581 278.891 209.931 cv
278.191 210.295 277.841 210.827 277.841 211.541 cv
276.749 211.541 mo
276.749 210.407 277.211 209.539 278.107 208.923 cv
279.017 208.321 280.333 208.013 282.041 208.013 cv
283.763 208.013 285.079 208.321 285.975 208.923 cv
286.871 209.539 287.319 210.407 287.319 211.541 cv
287.319 212.689 286.871 213.571 285.975 214.173 cv
285.079 214.775 283.763 215.069 282.041 215.069 cv
280.333 215.069 279.017 214.775 278.107 214.173 cv
277.211 213.571 276.749 212.689 276.749 211.541 cv
f
281.481 202.469 mo
281.481 203.085 281.705 203.575 282.125 203.939 cv
282.545 204.303 283.133 204.485 283.861 204.485 cv
284.603 204.485 285.191 204.303 285.611 203.939 cv
286.031 203.575 286.241 203.085 286.241 202.469 cv
286.241 201.853 286.031 201.363 285.611 200.999 cv
285.191 200.635 284.603 200.453 283.861 200.453 cv
283.133 200.453 282.545 200.635 282.125 200.999 cv
281.705 201.363 281.481 201.853 281.481 202.469 cv
277.155 199.725 mo
278.415 199.725 li
278.247 200.075 278.121 200.425 278.037 200.775 cv
277.953 201.139 277.911 201.489 277.911 201.825 cv
277.911 202.749 278.219 203.449 278.835 203.925 cv
279.451 204.401 280.389 204.681 281.621 204.737 cv
281.229 204.471 280.921 204.135 280.711 203.729 cv
280.501 203.323 280.389 202.875 280.389 202.385 cv
280.389 201.363 280.711 200.551 281.327 199.963 cv
281.943 199.375 282.797 199.067 283.861 199.067 cv
284.911 199.067 285.751 199.389 286.381 200.005 cv
287.011 200.621 287.319 201.447 287.319 202.469 cv
287.319 203.645 286.871 204.555 285.975 205.171 cv
285.079 205.801 283.763 206.109 282.041 206.109 cv
280.431 206.109 279.143 205.731 278.191 204.961 cv
277.239 204.205 276.749 203.169 276.749 201.881 cv
276.749 201.545 276.791 201.195 276.847 200.831 cv
276.917 200.481 277.015 200.117 277.155 199.725 cv
f
285.401 196.687 mo
285.401 195.245 li
287.137 195.245 li
287.137 196.687 li
285.401 196.687 li
f
279.773 186.901 mo
280.949 186.901 li
280.753 187.265 280.613 187.615 280.515 187.979 cv
280.417 188.343 280.361 188.693 280.361 189.057 cv
280.361 189.869 280.627 190.513 281.145 190.961 cv
281.663 191.409 282.391 191.633 283.315 191.633 cv
284.253 191.633 284.981 191.409 285.499 190.961 cv
286.017 190.513 286.269 189.869 286.269 189.057 cv
286.269 188.693 286.227 188.343 286.129 187.979 cv
286.031 187.615 285.877 187.265 285.681 186.901 cv
286.843 186.901 li
287.011 187.265 287.137 187.629 287.207 187.993 cv
287.277 188.371 287.319 188.777 287.319 189.197 cv
287.319 190.345 286.969 191.269 286.241 191.941 cv
285.527 192.627 284.547 192.963 283.315 192.963 cv
282.069 192.963 281.089 192.627 280.375 191.941 cv
279.661 191.255 279.297 190.317 279.297 189.113 cv
279.297 188.721 279.339 188.343 279.423 187.979 cv
279.507 187.615 279.619 187.251 279.773 186.901 cv
f
282.517 178.347 mo
287.137 178.347 li
287.137 179.607 li
282.559 179.607 li
281.831 179.607 281.299 179.761 280.935 180.041 cv
280.571 180.321 280.389 180.741 280.389 181.301 cv
280.389 181.987 280.613 182.519 281.047 182.911 cv
281.481 183.303 282.069 183.499 282.811 183.499 cv
287.137 183.499 li
287.137 184.759 li
279.479 184.759 li
279.479 183.499 li
280.669 183.499 li
280.221 183.205 279.871 182.855 279.647 182.435 cv
279.423 182.029 279.297 181.553 279.297 181.021 cv
279.297 180.153 279.577 179.481 280.123 179.033 cv
280.669 178.585 281.467 178.347 282.517 178.347 cv
f
298.227 170.154 mo
298.227 173.654 li
f
298.227 170.154 mo
298.227 173.654 li
@
294.437 288.847 mo
294.437 287.587 li
300.415 286.019 li
294.437 284.451 li
294.437 282.967 li
300.415 281.399 li
294.437 279.831 li
294.437 278.571 li
302.095 280.573 li
302.095 282.057 li
295.823 283.709 li
302.095 285.361 li
302.095 286.845 li
294.437 288.847 li
f
294.437 277.395 mo
294.437 276.135 li
300.415 274.567 li
294.437 272.999 li
294.437 271.515 li
300.415 269.947 li
294.437 268.379 li
294.437 267.119 li
302.095 269.121 li
302.095 270.605 li
295.823 272.257 li
302.095 273.909 li
302.095 275.393 li
294.437 277.395 li
f
294.437 265.943 mo
294.437 264.683 li
300.415 263.115 li
294.437 261.547 li
294.437 260.063 li
300.415 258.495 li
294.437 256.927 li
294.437 255.667 li
302.095 257.669 li
302.095 259.153 li
295.823 260.805 li
302.095 262.457 li
302.095 263.941 li
294.437 265.943 li
f
300.359 253.581 mo
300.359 252.139 li
302.095 252.139 li
302.095 253.581 li
300.359 253.581 li
f
298.273 243.809 mo
297.349 243.809 296.635 244.005 296.103 244.383 cv
295.571 244.775 295.305 245.293 295.305 245.951 cv
295.305 246.623 295.571 247.141 296.103 247.519 cv
296.635 247.911 297.349 248.093 298.273 248.093 cv
299.197 248.093 299.925 247.911 300.457 247.519 cv
300.989 247.141 301.241 246.623 301.241 245.951 cv
301.241 245.293 300.989 244.775 300.457 244.383 cv
299.925 244.005 299.197 243.809 298.273 243.809 cv
295.599 248.093 mo
295.151 247.841 294.815 247.505 294.591 247.099 cv
294.367 246.693 294.255 246.203 294.255 245.643 cv
294.255 244.719 294.633 243.963 295.361 243.375 cv
296.103 242.801 297.069 242.507 298.273 242.507 cv
299.477 242.507 300.457 242.801 301.185 243.375 cv
301.913 243.963 302.277 244.719 302.277 245.643 cv
302.277 246.203 302.165 246.693 301.955 247.099 cv
301.745 247.505 301.409 247.841 300.947 248.093 cv
302.095 248.093 li
302.095 249.353 li
291.455 249.353 li
291.455 248.093 li
295.599 248.093 li
f
298.245 236.935 mo
298.245 237.957 298.371 238.657 298.595 239.049 cv
298.833 239.441 299.225 239.637 299.785 239.637 cv
300.233 239.637 300.597 239.497 300.849 239.203 cv
301.115 238.909 301.241 238.503 301.241 237.999 cv
301.241 237.299 301.003 236.739 300.499 236.319 cv
300.009 235.899 299.351 235.689 298.525 235.689 cv
298.245 235.689 li
298.245 236.935 li
297.727 234.429 mo
302.095 234.429 li
302.095 235.689 li
300.933 235.689 li
301.409 235.983 301.745 236.347 301.955 236.767 cv
302.165 237.187 302.277 237.719 302.277 238.335 cv
302.277 239.119 302.067 239.749 301.633 240.211 cv
301.199 240.673 300.611 240.897 299.869 240.897 cv
299.015 240.897 298.371 240.617 297.923 240.029 cv
297.489 239.455 297.265 238.601 297.265 237.453 cv
297.265 235.689 li
297.139 235.689 li
296.565 235.689 296.117 235.885 295.795 236.263 cv
295.487 236.641 295.319 237.173 295.319 237.859 cv
295.319 238.307 295.375 238.727 295.487 239.147 cv
295.599 239.567 295.753 239.959 295.949 240.337 cv
294.787 240.337 li
294.619 239.889 294.479 239.441 294.395 239.007 cv
294.311 238.573 294.255 238.153 294.255 237.733 cv
294.255 236.627 294.549 235.801 295.123 235.255 cv
295.697 234.709 296.565 234.429 297.727 234.429 cv
f
294.437 231.839 mo
294.437 230.579 li
302.095 230.579 li
302.095 231.839 li
294.437 231.839 li
291.455 231.839 mo
291.455 230.579 li
293.051 230.579 li
293.051 231.839 li
291.455 231.839 li
f
295.599 222.907 mo
291.455 222.907 li
291.455 221.647 li
302.095 221.647 li
302.095 222.907 li
300.947 222.907 li
301.409 223.173 301.745 223.509 301.955 223.915 cv
302.165 224.321 302.277 224.797 302.277 225.357 cv
302.277 226.281 301.913 227.037 301.185 227.625 cv
300.457 228.213 299.477 228.493 298.273 228.493 cv
297.069 228.493 296.103 228.213 295.361 227.625 cv
294.633 227.037 294.255 226.281 294.255 225.357 cv
294.255 224.797 294.367 224.321 294.591 223.915 cv
294.815 223.509 295.151 223.173 295.599 222.907 cv
298.273 227.191 mo
299.197 227.191 299.925 227.009 300.457 226.631 cv
300.989 226.253 301.241 225.721 301.241 225.049 cv
301.241 224.391 300.989 223.873 300.457 223.481 cv
299.925 223.103 299.197 222.907 298.273 222.907 cv
297.349 222.907 296.635 223.103 296.103 223.481 cv
295.571 223.873 295.305 224.391 295.305 225.049 cv
295.305 225.721 295.571 226.253 296.103 226.631 cv
296.635 227.009 297.349 227.191 298.273 227.191 cv
f
299.071 219.183 mo
294.437 219.183 li
294.437 217.923 li
299.029 217.923 li
299.757 217.923 300.289 217.783 300.653 217.503 cv
301.017 217.223 301.199 216.803 301.199 216.229 cv
301.199 215.557 300.989 215.011 300.555 214.619 cv
300.121 214.227 299.533 214.031 298.777 214.031 cv
294.437 214.031 li
294.437 212.771 li
302.095 212.771 li
302.095 214.031 li
300.919 214.031 li
301.395 214.339 301.731 214.703 301.955 215.095 cv
302.165 215.501 302.277 215.963 302.277 216.495 cv
302.277 217.377 302.011 218.049 301.465 218.497 cv
300.933 218.959 300.135 219.183 299.071 219.183 cv
294.255 216.019 mo
294.255 216.019 li
f
300.359 209.999 mo
300.359 208.557 li
302.095 208.557 li
302.095 209.999 li
300.359 209.999 li
f
294.731 200.213 mo
295.907 200.213 li
295.711 200.577 295.571 200.927 295.473 201.291 cv
295.375 201.655 295.319 202.005 295.319 202.369 cv
295.319 203.181 295.585 203.825 296.103 204.273 cv
296.621 204.721 297.349 204.945 298.273 204.945 cv
299.211 204.945 299.939 204.721 300.457 204.273 cv
300.975 203.825 301.227 203.181 301.227 202.369 cv
301.227 202.005 301.185 201.655 301.087 201.291 cv
300.989 200.927 300.835 200.577 300.639 200.213 cv
301.801 200.213 li
301.969 200.577 302.095 200.941 302.165 201.305 cv
302.235 201.683 302.277 202.089 302.277 202.509 cv
302.277 203.657 301.927 204.581 301.199 205.253 cv
300.485 205.939 299.505 206.275 298.273 206.275 cv
297.027 206.275 296.047 205.939 295.333 205.253 cv
294.619 204.567 294.255 203.629 294.255 202.425 cv
294.255 202.033 294.297 201.655 294.381 201.291 cv
294.465 200.927 294.577 200.563 294.731 200.213 cv
f
295.319 195.061 mo
295.319 195.733 295.585 196.265 296.117 196.657 cv
296.649 197.049 297.363 197.245 298.273 197.245 cv
299.197 197.245 299.911 197.063 300.443 196.671 cv
300.975 196.279 301.227 195.747 301.227 195.061 cv
301.227 194.389 300.975 193.857 300.443 193.465 cv
299.911 193.073 299.197 192.877 298.273 192.877 cv
297.377 192.877 296.649 193.073 296.117 193.465 cv
295.585 193.857 295.319 194.389 295.319 195.061 cv
294.255 195.061 mo
294.255 193.969 294.619 193.115 295.319 192.485 cv
296.033 191.869 297.013 191.547 298.273 191.547 cv
299.533 191.547 300.513 191.869 301.213 192.485 cv
301.927 193.115 302.277 193.969 302.277 195.061 cv
302.277 196.167 301.927 197.035 301.213 197.651 cv
300.513 198.267 299.533 198.575 298.273 198.575 cv
297.013 198.575 296.033 198.267 295.319 197.651 cv
294.619 197.035 294.255 196.167 294.255 195.061 cv
f
295.907 183.497 mo
295.347 183.189 294.941 182.811 294.661 182.377 cv
294.395 181.943 294.255 181.425 294.255 180.823 cv
294.255 180.039 294.535 179.423 295.095 178.989 cv
295.655 178.555 296.453 178.331 297.475 178.331 cv
302.095 178.331 li
302.095 179.591 li
297.517 179.591 li
296.789 179.591 296.243 179.731 295.879 179.983 cv
295.529 180.249 295.347 180.641 295.347 181.173 cv
295.347 181.831 295.571 182.349 296.005 182.727 cv
296.439 183.105 297.027 183.287 297.769 183.287 cv
302.095 183.287 li
302.095 184.547 li
297.517 184.547 li
296.789 184.547 296.243 184.687 295.879 184.939 cv
295.529 185.205 295.347 185.611 295.347 186.143 cv
295.347 186.787 295.571 187.305 296.005 187.683 cv
296.439 188.061 297.027 188.243 297.769 188.243 cv
302.095 188.243 li
302.095 189.503 li
294.437 189.503 li
294.437 188.243 li
295.627 188.243 li
295.165 187.963 294.815 187.613 294.591 187.207 cv
294.367 186.815 294.255 186.339 294.255 185.779 cv
294.255 185.219 294.395 184.757 294.675 184.365 cv
294.955 183.973 295.375 183.693 295.907 183.497 cv
f
211.982 298.658 mo
211.542 299.418 211.222 300.158 211.012 300.888 cv
210.792 301.618 210.692 302.358 210.692 303.108 cv
210.692 303.868 210.792 304.608 211.012 305.338 cv
211.222 306.078 211.542 306.808 211.982 307.558 cv
211.202 307.558 li
210.712 306.788 210.342 306.048 210.102 305.308 cv
209.862 304.568 209.742 303.838 209.742 303.108 cv
209.742 302.388 209.862 301.658 210.102 300.918 cv
210.342 300.178 210.702 299.428 211.202 298.658 cv
211.982 298.658 li
f
217.652 303.518 mo
217.652 302.858 217.512 302.348 217.242 301.968 cv
216.962 301.588 216.592 301.398 216.122 301.398 cv
215.642 301.398 215.272 301.588 215.002 301.968 cv
214.722 302.348 214.592 302.858 214.592 303.518 cv
214.592 304.178 214.722 304.698 215.002 305.078 cv
215.272 305.458 215.642 305.638 216.122 305.638 cv
216.592 305.638 216.962 305.458 217.242 305.078 cv
217.512 304.698 217.652 304.178 217.652 303.518 cv
214.592 301.608 mo
214.772 301.288 215.012 301.048 215.302 300.888 cv
215.592 300.728 215.942 300.648 216.342 300.648 cv
217.002 300.648 217.542 300.918 217.962 301.438 cv
218.372 301.968 218.582 302.658 218.582 303.518 cv
218.582 304.378 218.372 305.078 217.962 305.598 cv
217.542 306.118 217.002 306.378 216.342 306.378 cv
215.942 306.378 215.592 306.298 215.302 306.148 cv
215.012 305.998 214.772 305.758 214.592 305.428 cv
214.592 306.248 li
213.692 306.248 li
213.692 298.648 li
214.592 298.648 li
214.592 301.608 li
f
219.932 298.658 mo
220.712 298.658 li
221.192 299.428 221.562 300.178 221.802 300.918 cv
222.042 301.658 222.172 302.388 222.172 303.108 cv
222.172 303.838 222.042 304.568 221.802 305.308 cv
221.562 306.048 221.192 306.788 220.712 307.558 cv
219.932 307.558 li
220.362 306.808 220.682 306.078 220.902 305.338 cv
221.112 304.608 221.222 303.868 221.222 303.108 cv
221.222 302.358 221.112 301.618 220.902 300.888 cv
220.682 300.158 220.362 299.418 219.932 298.658 cv
f
126.214 10.4374 mo
122.714 10.4374 li
f
126.214 10.4374 mo
122.714 10.4374 li
@
22.7188 11.9077 mo
21.6968 11.9077 20.9968 12.0337 20.6048 12.2577 cv
20.2128 12.4957 20.0168 12.8877 20.0168 13.4477 cv
20.0168 13.8957 20.1568 14.2597 20.4508 14.5117 cv
20.7448 14.7777 21.1508 14.9037 21.6548 14.9037 cv
22.3548 14.9037 22.9148 14.6657 23.3348 14.1617 cv
23.7548 13.6717 23.9648 13.0137 23.9648 12.1877 cv
23.9648 11.9077 li
22.7188 11.9077 li
25.2248 11.3897 mo
25.2248 15.7577 li
23.9648 15.7577 li
23.9648 14.5957 li
23.6708 15.0717 23.3068 15.4077 22.8868 15.6177 cv
22.4668 15.8277 21.9348 15.9397 21.3188 15.9397 cv
20.5348 15.9397 19.9048 15.7297 19.4428 15.2957 cv
18.9808 14.8617 18.7568 14.2737 18.7568 13.5317 cv
18.7568 12.6777 19.0368 12.0337 19.6248 11.5857 cv
20.1988 11.1517 21.0528 10.9277 22.2008 10.9277 cv
23.9648 10.9277 li
23.9648 10.8017 li
23.9648 10.2277 23.7688 9.77969 23.3908 9.4577 cv
23.0128 9.14969 22.4808 8.98169 21.7948 8.98169 cv
21.3468 8.98169 20.9268 9.03769 20.5068 9.14969 cv
20.0868 9.26169 19.6948 9.41571 19.3168 9.61169 cv
19.3168 8.44971 li
19.7648 8.28171 20.2128 8.14169 20.6468 8.05771 cv
21.0808 7.97369 21.5008 7.91769 21.9208 7.91769 cv
23.0268 7.91769 23.8528 8.2117 24.3988 8.78571 cv
24.9448 9.35971 25.2248 10.2277 25.2248 11.3897 cv
f
29.0328 14.6097 mo
29.0328 18.6557 li
27.7728 18.6557 li
27.7728 8.0997 li
29.0328 8.0997 li
29.0328 9.26169 li
29.2848 8.81369 29.6208 8.47769 30.0268 8.25369 cv
30.4328 8.02969 30.9228 7.91769 31.4828 7.91769 cv
32.4068 7.91769 33.1628 8.29568 33.7508 9.02371 cv
34.3248 9.76569 34.6188 10.7317 34.6188 11.9357 cv
34.6188 13.1397 34.3248 14.1197 33.7508 14.8477 cv
33.1628 15.5757 32.4068 15.9397 31.4828 15.9397 cv
30.9228 15.9397 30.4328 15.8277 30.0268 15.6177 cv
29.6208 15.4077 29.2848 15.0717 29.0328 14.6097 cv
33.3168 11.9357 mo
33.3168 11.0117 33.1208 10.2977 32.7428 9.76569 cv
32.3508 9.2337 31.8328 8.96771 31.1748 8.96771 cv
30.5028 8.96771 29.9848 9.2337 29.6068 9.76569 cv
29.2148 10.2977 29.0328 11.0117 29.0328 11.9357 cv
29.0328 12.8597 29.2148 13.5877 29.6068 14.1197 cv
29.9848 14.6517 30.5028 14.9037 31.1748 14.9037 cv
31.8328 14.9037 32.3508 14.6517 32.7428 14.1197 cv
33.1208 13.5877 33.3168 12.8597 33.3168 11.9357 cv
f
36.7048 8.0997 mo
37.9648 8.0997 li
37.9648 15.7577 li
36.7048 15.7577 li
36.7048 8.0997 li
36.7048 5.11771 mo
37.9648 5.11771 li
37.9648 6.71368 li
36.7048 6.71368 li
36.7048 5.11771 li
f
40.7788 14.0217 mo
42.2208 14.0217 li
42.2208 15.7577 li
40.7788 15.7577 li
40.7788 14.0217 li
f
50.5508 11.9357 mo
50.5508 11.0117 50.3548 10.2977 49.9768 9.76569 cv
49.5848 9.2337 49.0668 8.96771 48.4088 8.96771 cv
47.7368 8.96771 47.2188 9.2337 46.8408 9.76569 cv
46.4488 10.2977 46.2668 11.0117 46.2668 11.9357 cv
46.2668 12.8597 46.4488 13.5877 46.8408 14.1197 cv
47.2188 14.6517 47.7368 14.9037 48.4088 14.9037 cv
49.0668 14.9037 49.5848 14.6517 49.9768 14.1197 cv
50.3548 13.5877 50.5508 12.8597 50.5508 11.9357 cv
46.2668 9.26169 mo
46.5188 8.81369 46.8548 8.47769 47.2608 8.25369 cv
47.6668 8.02969 48.1568 7.91769 48.7168 7.91769 cv
49.6408 7.91769 50.3968 8.29568 50.9848 9.02371 cv
51.5588 9.76569 51.8528 10.7317 51.8528 11.9357 cv
51.8528 13.1397 51.5588 14.1197 50.9848 14.8477 cv
50.3968 15.5757 49.6408 15.9397 48.7168 15.9397 cv
48.1568 15.9397 47.6668 15.8277 47.2608 15.6177 cv
46.8548 15.4077 46.5188 15.0717 46.2668 14.6097 cv
46.2668 15.7577 li
45.0068 15.7577 li
45.0068 5.11771 li
46.2668 5.11771 li
46.2668 9.26169 li
f
53.9388 8.0997 mo
55.1988 8.0997 li
55.1988 15.7577 li
53.9388 15.7577 li
53.9388 8.0997 li
53.9388 5.11771 mo
55.1988 5.11771 li
55.1988 6.71368 li
53.9388 6.71368 li
53.9388 5.11771 li
f
57.8308 5.11771 mo
59.0908 5.11771 li
59.0908 15.7577 li
57.8308 15.7577 li
57.8308 5.11771 li
f
61.7228 8.0997 mo
62.9828 8.0997 li
62.9828 15.7577 li
61.7228 15.7577 li
61.7228 8.0997 li
61.7228 5.11771 mo
62.9828 5.11771 li
62.9828 6.71368 li
61.7228 6.71368 li
61.7228 5.11771 li
f
71.1168 11.9357 mo
71.1168 11.0117 70.9208 10.2977 70.5428 9.76569 cv
70.1508 9.2337 69.6328 8.96771 68.9748 8.96771 cv
68.3028 8.96771 67.7848 9.2337 67.4068 9.76569 cv
67.0148 10.2977 66.8328 11.0117 66.8328 11.9357 cv
66.8328 12.8597 67.0148 13.5877 67.4068 14.1197 cv
67.7848 14.6517 68.3028 14.9037 68.9748 14.9037 cv
69.6328 14.9037 70.1508 14.6517 70.5428 14.1197 cv
70.9208 13.5877 71.1168 12.8597 71.1168 11.9357 cv
66.8328 9.26169 mo
67.0848 8.81369 67.4208 8.47769 67.8268 8.25369 cv
68.2328 8.02969 68.7228 7.91769 69.2828 7.91769 cv
70.2068 7.91769 70.9628 8.29568 71.5508 9.02371 cv
72.1248 9.76569 72.4188 10.7317 72.4188 11.9357 cv
72.4188 13.1397 72.1248 14.1197 71.5508 14.8477 cv
70.9628 15.5757 70.2068 15.9397 69.2828 15.9397 cv
68.7228 15.9397 68.2328 15.8277 67.8268 15.6177 cv
67.4208 15.4077 67.0848 15.0717 66.8328 14.6097 cv
66.8328 15.7577 li
65.5728 15.7577 li
65.5728 5.11771 li
66.8328 5.11771 li
66.8328 9.26169 li
f
74.5048 8.0997 mo
75.7648 8.0997 li
75.7648 15.7577 li
74.5048 15.7577 li
74.5048 8.0997 li
74.5048 5.11771 mo
75.7648 5.11771 li
75.7648 6.71368 li
74.5048 6.71368 li
74.5048 5.11771 li
f
78.3968 5.11771 mo
79.6568 5.11771 li
79.6568 15.7577 li
78.3968 15.7577 li
78.3968 5.11771 li
f
82.2888 8.0997 mo
83.5488 8.0997 li
83.5488 15.7577 li
82.2888 15.7577 li
82.2888 8.0997 li
82.2888 5.11771 mo
83.5488 5.11771 li
83.5488 6.71368 li
82.2888 6.71368 li
82.2888 5.11771 li
f
86.3628 14.0217 mo
87.8048 14.0217 li
87.8048 15.7577 li
86.3628 15.7577 li
86.3628 14.0217 li
f
96.1488 8.39371 mo
96.1488 9.5697 li
95.7848 9.37369 95.4348 9.2337 95.0708 9.13571 cv
94.7068 9.03769 94.3568 8.98169 93.9928 8.98169 cv
93.1808 8.98169 92.5368 9.24771 92.0888 9.76569 cv
91.6408 10.2837 91.4168 11.0117 91.4168 11.9357 cv
91.4168 12.8737 91.6408 13.6017 92.0888 14.1197 cv
92.5368 14.6377 93.1808 14.8897 93.9928 14.8897 cv
94.3568 14.8897 94.7068 14.8477 95.0708 14.7497 cv
95.4348 14.6517 95.7848 14.4977 96.1488 14.3017 cv
96.1488 15.4637 li
95.7848 15.6317 95.4208 15.7577 95.0568 15.8277 cv
94.6788 15.8977 94.2728 15.9397 93.8528 15.9397 cv
92.7048 15.9397 91.7808 15.5897 91.1088 14.8617 cv
90.4228 14.1477 90.0868 13.1677 90.0868 11.9357 cv
90.0868 10.6897 90.4228 9.70969 91.1088 8.9957 cv
91.7948 8.28171 92.7328 7.91769 93.9368 7.91769 cv
94.3288 7.91769 94.7068 7.95969 95.0708 8.0437 cv
95.4348 8.12769 95.7988 8.23969 96.1488 8.39371 cv
f
101.301 8.98169 mo
100.629 8.98169 100.097 9.24771 99.7048 9.77969 cv
99.3128 10.3117 99.1168 11.0257 99.1168 11.9357 cv
99.1168 12.8597 99.2988 13.5737 99.6908 14.1057 cv
100.083 14.6377 100.615 14.8897 101.301 14.8897 cv
101.973 14.8897 102.505 14.6377 102.897 14.1057 cv
103.289 13.5737 103.485 12.8597 103.485 11.9357 cv
103.485 11.0397 103.289 10.3117 102.897 9.77969 cv
102.505 9.24771 101.973 8.98169 101.301 8.98169 cv
101.301 7.91769 mo
102.393 7.91769 103.247 8.28171 103.877 8.98169 cv
104.493 9.69571 104.815 10.6757 104.815 11.9357 cv
104.815 13.1957 104.493 14.1757 103.877 14.8757 cv
103.247 15.5897 102.393 15.9397 101.301 15.9397 cv
100.195 15.9397 99.3268 15.5897 98.7108 14.8757 cv
98.0948 14.1757 97.7868 13.1957 97.7868 11.9357 cv
97.7868 10.6757 98.0948 9.69571 98.7108 8.98169 cv
99.3268 8.28171 100.195 7.91769 101.301 7.91769 cv
f
112.865 9.5697 mo
113.173 9.0097 113.551 8.6037 113.985 8.3237 cv
114.419 8.05771 114.937 7.91769 115.539 7.91769 cv
116.323 7.91769 116.939 8.19769 117.373 8.75769 cv
117.807 9.31769 118.031 10.1157 118.031 11.1377 cv
118.031 15.7577 li
116.771 15.7577 li
116.771 11.1797 li
116.771 10.4517 116.631 9.9057 116.379 9.54169 cv
116.113 9.19171 115.721 9.0097 115.189 9.0097 cv
114.531 9.0097 114.013 9.2337 113.635 9.66769 cv
113.257 10.1017 113.075 10.6897 113.075 11.4317 cv
113.075 15.7577 li
111.815 15.7577 li
111.815 11.1797 li
111.815 10.4517 111.675 9.9057 111.423 9.54169 cv
111.157 9.19171 110.751 9.0097 110.219 9.0097 cv
109.575 9.0097 109.057 9.2337 108.679 9.66769 cv
108.301 10.1017 108.119 10.6897 108.119 11.4317 cv
108.119 15.7577 li
106.859 15.7577 li
106.859 8.0997 li
108.119 8.0997 li
108.119 9.2897 li
108.399 8.8277 108.749 8.47769 109.155 8.25369 cv
109.547 8.02969 110.023 7.91769 110.583 7.91769 cv
111.143 7.91769 111.605 8.05771 111.997 8.33771 cv
112.389 8.61771 112.669 9.03769 112.865 9.5697 cv
f
126.214 24.9571 mo
122.714 24.9571 li
f
126.214 24.9571 mo
122.714 24.9571 li
@
35.7657 26.4274 mo
34.7437 26.4274 34.0437 26.5534 33.6517 26.7774 cv
33.2597 27.0154 33.0637 27.4074 33.0637 27.9674 cv
33.0637 28.4154 33.2037 28.7794 33.4977 29.0314 cv
33.7917 29.2974 34.1977 29.4234 34.7017 29.4234 cv
35.4017 29.4234 35.9617 29.1854 36.3817 28.6814 cv
36.8017 28.1914 37.0117 27.5334 37.0117 26.7074 cv
37.0117 26.4274 li
35.7657 26.4274 li
38.2717 25.9094 mo
38.2717 30.2774 li
37.0117 30.2774 li
37.0117 29.1154 li
36.7177 29.5914 36.3537 29.9274 35.9337 30.1374 cv
35.5137 30.3474 34.9817 30.4594 34.3657 30.4594 cv
33.5817 30.4594 32.9517 30.2494 32.4897 29.8154 cv
32.0277 29.3814 31.8037 28.7934 31.8037 28.0514 cv
31.8037 27.1974 32.0837 26.5534 32.6717 26.1054 cv
33.2457 25.6714 34.0997 25.4474 35.2477 25.4474 cv
37.0117 25.4474 li
37.0117 25.3214 li
37.0117 24.7474 36.8157 24.2994 36.4377 23.9774 cv
36.0597 23.6694 35.5277 23.5014 34.8417 23.5014 cv
34.3937 23.5014 33.9737 23.5574 33.5537 23.6694 cv
33.1337 23.7814 32.7417 23.9354 32.3637 24.1314 cv
32.3637 22.9694 li
32.8117 22.8014 33.2597 22.6614 33.6937 22.5774 cv
34.1277 22.4934 34.5477 22.4374 34.9677 22.4374 cv
36.0737 22.4374 36.8997 22.7314 37.4457 23.3054 cv
37.9917 23.8794 38.2717 24.7474 38.2717 25.9094 cv
f
42.0797 29.1294 mo
42.0797 33.1754 li
40.8197 33.1754 li
40.8197 22.6194 li
42.0797 22.6194 li
42.0797 23.7814 li
42.3317 23.3334 42.6677 22.9974 43.0737 22.7734 cv
43.4797 22.5494 43.9697 22.4374 44.5297 22.4374 cv
45.4537 22.4374 46.2097 22.8154 46.7977 23.5434 cv
47.3717 24.2854 47.6657 25.2514 47.6657 26.4554 cv
47.6657 27.6594 47.3717 28.6394 46.7977 29.3674 cv
46.2097 30.0954 45.4537 30.4594 44.5297 30.4594 cv
43.9697 30.4594 43.4797 30.3474 43.0737 30.1374 cv
42.6677 29.9274 42.3317 29.5914 42.0797 29.1294 cv
46.3637 26.4554 mo
46.3637 25.5314 46.1677 24.8174 45.7897 24.2854 cv
45.3977 23.7534 44.8797 23.4874 44.2217 23.4874 cv
43.5497 23.4874 43.0317 23.7534 42.6537 24.2854 cv
42.2617 24.8174 42.0797 25.5314 42.0797 26.4554 cv
42.0797 27.3794 42.2617 28.1074 42.6537 28.6394 cv
43.0317 29.1714 43.5497 29.4234 44.2217 29.4234 cv
44.8797 29.4234 45.3977 29.1714 45.7897 28.6394 cv
46.1677 28.1074 46.3637 27.3794 46.3637 26.4554 cv
f
49.7517 22.6194 mo
51.0117 22.6194 li
51.0117 30.2774 li
49.7517 30.2774 li
49.7517 22.6194 li
49.7517 19.6374 mo
51.0117 19.6374 li
51.0117 21.2334 li
49.7517 21.2334 li
49.7517 19.6374 li
f
53.8257 28.5414 mo
55.2677 28.5414 li
55.2677 30.2774 li
53.8257 30.2774 li
53.8257 28.5414 li
f
57.3677 22.6194 mo
58.6277 22.6194 li
60.1957 28.5974 li
61.7637 22.6194 li
63.2477 22.6194 li
64.8157 28.5974 li
66.3837 22.6194 li
67.6437 22.6194 li
65.6417 30.2774 li
64.1577 30.2774 li
62.5057 24.0054 li
60.8537 30.2774 li
59.3697 30.2774 li
57.3677 22.6194 li
f
76.0997 26.1334 mo
76.0997 26.7494 li
70.3177 26.7494 li
70.3737 27.6174 70.6257 28.2894 71.1017 28.7374 cv
71.5637 29.1854 72.2077 29.4094 73.0477 29.4094 cv
73.5237 29.4094 73.9997 29.3534 74.4477 29.2414 cv
74.8957 29.1294 75.3577 28.9474 75.8057 28.6954 cv
75.8057 29.8854 li
75.3577 30.0814 74.8957 30.2354 74.4197 30.3194 cv
73.9437 30.4034 73.4537 30.4594 72.9777 30.4594 cv
71.7457 30.4594 70.7797 30.1094 70.0657 29.4094 cv
69.3517 28.7094 69.0017 27.7434 69.0017 26.5254 cv
69.0017 25.2794 69.3377 24.2854 70.0097 23.5434 cv
70.6817 22.8154 71.6057 22.4374 72.7537 22.4374 cv
73.7897 22.4374 74.6017 22.7734 75.2037 23.4314 cv
75.7917 24.1034 76.0997 24.9994 76.0997 26.1334 cv
74.8397 25.7694 mo
74.8257 25.0834 74.6297 24.5374 74.2657 24.1174 cv
73.8877 23.7114 73.3837 23.5014 72.7677 23.5014 cv
72.0677 23.5014 71.5077 23.7114 71.0877 24.1034 cv
70.6677 24.4954 70.4157 25.0554 70.3597 25.7694 cv
74.8397 25.7694 li
f
78.1577 22.6194 mo
79.4177 22.6194 li
79.4177 30.2774 li
78.1577 30.2774 li
78.1577 22.6194 li
78.1577 19.6374 mo
79.4177 19.6374 li
79.4177 21.2334 li
78.1577 21.2334 li
78.1577 19.6374 li
f
87.5517 26.4554 mo
87.5517 25.5314 87.3557 24.8174 86.9777 24.2854 cv
86.5857 23.7534 86.0677 23.4874 85.4097 23.4874 cv
84.7377 23.4874 84.2197 23.7534 83.8417 24.2854 cv
83.4497 24.8174 83.2677 25.5314 83.2677 26.4554 cv
83.2677 27.3794 83.4497 28.1074 83.8417 28.6394 cv
84.2197 29.1714 84.7377 29.4234 85.4097 29.4234 cv
86.0677 29.4234 86.5857 29.1714 86.9777 28.6394 cv
87.3557 28.1074 87.5517 27.3794 87.5517 26.4554 cv
83.2677 23.7814 mo
83.5197 23.3334 83.8557 22.9974 84.2617 22.7734 cv
84.6677 22.5494 85.1577 22.4374 85.7177 22.4374 cv
86.6417 22.4374 87.3977 22.8154 87.9857 23.5434 cv
88.5597 24.2854 88.8537 25.2514 88.8537 26.4554 cv
88.8537 27.6594 88.5597 28.6394 87.9857 29.3674 cv
87.3977 30.0954 86.6417 30.4594 85.7177 30.4594 cv
85.1577 30.4594 84.6677 30.3474 84.2617 30.1374 cv
83.8557 29.9274 83.5197 29.5914 83.2677 29.1294 cv
83.2677 30.2774 li
82.0077 30.2774 li
82.0077 19.6374 li
83.2677 19.6374 li
83.2677 23.7814 li
f
93.9077 23.5014 mo
93.2357 23.5014 92.7037 23.7674 92.3117 24.2994 cv
91.9197 24.8314 91.7237 25.5454 91.7237 26.4554 cv
91.7237 27.3794 91.9057 28.0934 92.2977 28.6254 cv
92.6897 29.1574 93.2217 29.4094 93.9077 29.4094 cv
94.5797 29.4094 95.1117 29.1574 95.5037 28.6254 cv
95.8957 28.0934 96.0917 27.3794 96.0917 26.4554 cv
96.0917 25.5594 95.8957 24.8314 95.5037 24.2994 cv
95.1117 23.7674 94.5797 23.5014 93.9077 23.5014 cv
93.9077 22.4374 mo
94.9997 22.4374 95.8537 22.8014 96.4837 23.5014 cv
97.0997 24.2154 97.4217 25.1954 97.4217 26.4554 cv
97.4217 27.7154 97.0997 28.6954 96.4837 29.3954 cv
95.8537 30.1094 94.9997 30.4594 93.9077 30.4594 cv
92.8017 30.4594 91.9337 30.1094 91.3177 29.3954 cv
90.7017 28.6954 90.3937 27.7154 90.3937 26.4554 cv
90.3937 25.1954 90.7017 24.2154 91.3177 23.5014 cv
91.9337 22.8014 92.8017 22.4374 93.9077 22.4374 cv
f
99.6897 28.5414 mo
101.132 28.5414 li
101.132 30.2774 li
99.6897 30.2774 li
99.6897 28.5414 li
f
109.476 22.9134 mo
109.476 24.0894 li
109.112 23.8934 108.762 23.7534 108.398 23.6554 cv
108.034 23.5574 107.684 23.5014 107.32 23.5014 cv
106.508 23.5014 105.864 23.7674 105.416 24.2854 cv
104.968 24.8034 104.744 25.5314 104.744 26.4554 cv
104.744 27.3934 104.968 28.1214 105.416 28.6394 cv
105.864 29.1574 106.508 29.4094 107.32 29.4094 cv
107.684 29.4094 108.034 29.3674 108.398 29.2694 cv
108.762 29.1714 109.112 29.0174 109.476 28.8214 cv
109.476 29.9834 li
109.112 30.1514 108.748 30.2774 108.384 30.3474 cv
108.006 30.4174 107.6 30.4594 107.18 30.4594 cv
106.032 30.4594 105.108 30.1094 104.436 29.3814 cv
103.75 28.6674 103.414 27.6874 103.414 26.4554 cv
103.414 25.2094 103.75 24.2294 104.436 23.5154 cv
105.122 22.8014 106.06 22.4374 107.264 22.4374 cv
107.656 22.4374 108.034 22.4794 108.398 22.5634 cv
108.762 22.6474 109.126 22.7594 109.476 22.9134 cv
f
118.03 25.6574 mo
118.03 30.2774 li
116.77 30.2774 li
116.77 25.6994 li
116.77 24.9714 116.616 24.4394 116.336 24.0754 cv
116.056 23.7114 115.636 23.5294 115.076 23.5294 cv
114.39 23.5294 113.858 23.7534 113.466 24.1874 cv
113.074 24.6214 112.878 25.2094 112.878 25.9514 cv
112.878 30.2774 li
111.618 30.2774 li
111.618 22.6194 li
112.878 22.6194 li
112.878 23.8094 li
113.172 23.3614 113.522 23.0114 113.942 22.7874 cv
114.348 22.5634 114.824 22.4374 115.356 22.4374 cv
116.224 22.4374 116.896 22.7174 117.344 23.2634 cv
117.792 23.8094 118.03 24.6074 118.03 25.6574 cv
f
126.214 39.4768 mo
122.714 39.4768 li
f
126.214 39.4768 mo
122.714 39.4768 li
@
40.1082 37.4331 mo
40.1082 38.6091 li
39.7442 38.4131 39.3942 38.2731 39.0302 38.1751 cv
38.6662 38.0771 38.3162 38.0211 37.9522 38.0211 cv
37.1402 38.0211 36.4962 38.2871 36.0482 38.8051 cv
35.6002 39.3231 35.3762 40.0511 35.3762 40.9751 cv
35.3762 41.9131 35.6002 42.6411 36.0482 43.1591 cv
36.4962 43.6771 37.1402 43.9291 37.9522 43.9291 cv
38.3162 43.9291 38.6662 43.8871 39.0302 43.7891 cv
39.3942 43.6911 39.7442 43.5371 40.1082 43.3411 cv
40.1082 44.5031 li
39.7442 44.6711 39.3802 44.7971 39.0162 44.8671 cv
38.6382 44.9371 38.2322 44.9791 37.8122 44.9791 cv
36.6642 44.9791 35.7402 44.6291 35.0682 43.9011 cv
34.3822 43.1871 34.0462 42.2071 34.0462 40.9751 cv
34.0462 39.7291 34.3822 38.7491 35.0682 38.0351 cv
35.7542 37.3211 36.6922 36.9571 37.8962 36.9571 cv
38.2882 36.9571 38.6662 36.9991 39.0302 37.0831 cv
39.3942 37.1671 39.7582 37.2791 40.1082 37.4331 cv
f
48.6622 40.1771 mo
48.6622 44.7971 li
47.4022 44.7971 li
47.4022 40.2191 li
47.4022 39.4911 47.2482 38.9591 46.9682 38.5951 cv
46.6882 38.2311 46.2682 38.0491 45.7082 38.0491 cv
45.0222 38.0491 44.4902 38.2731 44.0982 38.7071 cv
43.7062 39.1411 43.5102 39.7291 43.5102 40.4711 cv
43.5102 44.7971 li
42.2502 44.7971 li
42.2502 37.1391 li
43.5102 37.1391 li
43.5102 38.3291 li
43.8042 37.8811 44.1542 37.5311 44.5742 37.3071 cv
44.9802 37.0831 45.4562 36.9571 45.9882 36.9571 cv
46.8562 36.9571 47.5282 37.2371 47.9762 37.7831 cv
48.4242 38.3291 48.6622 39.1271 48.6622 40.1771 cv
f
51.3502 43.0611 mo
52.7922 43.0611 li
52.7922 44.7971 li
51.3502 44.7971 li
51.3502 43.0611 li
f
61.1222 40.9751 mo
61.1222 40.0511 60.9262 39.3371 60.5482 38.8051 cv
60.1562 38.2731 59.6382 38.0071 58.9802 38.0071 cv
58.3082 38.0071 57.7902 38.2731 57.4122 38.8051 cv
57.0202 39.3371 56.8382 40.0511 56.8382 40.9751 cv
56.8382 41.8991 57.0202 42.6271 57.4122 43.1591 cv
57.7902 43.6911 58.3082 43.9431 58.9802 43.9431 cv
59.6382 43.9431 60.1562 43.6911 60.5482 43.1591 cv
60.9262 42.6271 61.1222 41.8991 61.1222 40.9751 cv
56.8382 38.3011 mo
57.0902 37.8531 57.4262 37.5171 57.8322 37.2931 cv
58.2382 37.0691 58.7282 36.9571 59.2882 36.9571 cv
60.2122 36.9571 60.9682 37.3351 61.5562 38.0631 cv
62.1302 38.8051 62.4242 39.7711 62.4242 40.9751 cv
62.4242 42.1791 62.1302 43.1591 61.5562 43.8871 cv
60.9682 44.6151 60.2122 44.9791 59.2882 44.9791 cv
58.7282 44.9791 58.2382 44.8671 57.8322 44.6571 cv
57.4262 44.4471 57.0902 44.1111 56.8382 43.6491 cv
56.8382 44.7971 li
55.5782 44.7971 li
55.5782 34.1571 li
56.8382 34.1571 li
56.8382 38.3011 li
f
64.5102 37.1391 mo
65.7702 37.1391 li
65.7702 44.7971 li
64.5102 44.7971 li
64.5102 37.1391 li
64.5102 34.1571 mo
65.7702 34.1571 li
65.7702 35.7531 li
64.5102 35.7531 li
64.5102 34.1571 li
f
74.7722 40.1771 mo
74.7722 44.7971 li
73.5122 44.7971 li
73.5122 40.2191 li
73.5122 39.4911 73.3582 38.9591 73.0782 38.5951 cv
72.7982 38.2311 72.3782 38.0491 71.8182 38.0491 cv
71.1322 38.0491 70.6002 38.2731 70.2082 38.7071 cv
69.8162 39.1411 69.6202 39.7291 69.6202 40.4711 cv
69.6202 44.7971 li
68.3602 44.7971 li
68.3602 37.1391 li
69.6202 37.1391 li
69.6202 38.3291 li
69.9142 37.8811 70.2642 37.5311 70.6842 37.3071 cv
71.0902 37.0831 71.5662 36.9571 72.0982 36.9571 cv
72.9662 36.9571 73.6382 37.2371 74.0862 37.7831 cv
74.5342 38.3291 74.7722 39.1271 74.7722 40.1771 cv
f
82.3182 40.8771 mo
82.3182 39.9811 82.1222 39.2671 81.7582 38.7631 cv
81.3802 38.2591 80.8482 38.0071 80.1762 38.0071 cv
79.5042 38.0071 78.9722 38.2591 78.5942 38.7631 cv
78.2162 39.2671 78.0342 39.9811 78.0342 40.8771 cv
78.0342 41.7871 78.2162 42.4871 78.5942 42.9911 cv
78.9722 43.4951 79.5042 43.7471 80.1762 43.7471 cv
80.8482 43.7471 81.3802 43.4951 81.7582 42.9911 cv
82.1222 42.4871 82.3182 41.7871 82.3182 40.8771 cv
83.5782 43.8451 mo
83.5782 45.1331 83.2842 46.0991 82.7102 46.7431 cv
82.1222 47.3731 81.2402 47.6951 80.0502 47.6951 cv
79.6022 47.6951 79.1962 47.6531 78.8042 47.5971 cv
78.4122 47.5271 78.0202 47.4291 77.6562 47.2891 cv
77.6562 46.0711 li
78.0202 46.2671 78.3842 46.4071 78.7482 46.5051 cv
79.1122 46.6031 79.4762 46.6591 79.8542 46.6591 cv
80.6662 46.6591 81.2822 46.4351 81.7022 46.0151 cv
82.1082 45.5811 82.3182 44.9371 82.3182 44.0691 cv
82.3182 43.4531 li
82.0522 43.9011 81.7162 44.2371 81.3102 44.4611 cv
80.9042 44.6851 80.4282 44.7971 79.8682 44.7971 cv
78.9162 44.7971 78.1602 44.4471 77.5862 43.7331 cv
77.0122 43.0191 76.7322 42.0671 76.7322 40.8771 cv
76.7322 39.7011 77.0122 38.7491 77.5862 38.0351 cv
78.1602 37.3211 78.9162 36.9571 79.8682 36.9571 cv
80.4282 36.9571 80.9042 37.0691 81.3102 37.2931 cv
81.7162 37.5171 82.0522 37.8531 82.3182 38.3011 cv
82.3182 37.1391 li
83.5782 37.1391 li
83.5782 43.8451 li
f
86.3502 43.0611 mo
87.7922 43.0611 li
87.7922 44.7971 li
86.3502 44.7971 li
86.3502 43.0611 li
f
96.1362 37.4331 mo
96.1362 38.6091 li
95.7722 38.4131 95.4222 38.2731 95.0582 38.1751 cv
94.6942 38.0771 94.3442 38.0211 93.9802 38.0211 cv
93.1682 38.0211 92.5242 38.2871 92.0762 38.8051 cv
91.6282 39.3231 91.4042 40.0511 91.4042 40.9751 cv
91.4042 41.9131 91.6282 42.6411 92.0762 43.1591 cv
92.5242 43.6771 93.1682 43.9291 93.9802 43.9291 cv
94.3442 43.9291 94.6942 43.8871 95.0582 43.7891 cv
95.4222 43.6911 95.7722 43.5371 96.1362 43.3411 cv
96.1362 44.5031 li
95.7722 44.6711 95.4082 44.7971 95.0442 44.8671 cv
94.6662 44.9371 94.2602 44.9791 93.8402 44.9791 cv
92.6922 44.9791 91.7682 44.6291 91.0962 43.9011 cv
90.4102 43.1871 90.0742 42.2071 90.0742 40.9751 cv
90.0742 39.7291 90.4102 38.7491 91.0962 38.0351 cv
91.7822 37.3211 92.7202 36.9571 93.9242 36.9571 cv
94.3162 36.9571 94.6942 36.9991 95.0582 37.0831 cv
95.4222 37.1671 95.7862 37.2791 96.1362 37.4331 cv
f
101.288 38.0211 mo
100.616 38.0211 100.084 38.2871 99.6922 38.8191 cv
99.3002 39.3511 99.1042 40.0651 99.1042 40.9751 cv
99.1042 41.8991 99.2862 42.6131 99.6782 43.1451 cv
100.07 43.6771 100.602 43.9291 101.288 43.9291 cv
101.96 43.9291 102.492 43.6771 102.884 43.1451 cv
103.276 42.6131 103.472 41.8991 103.472 40.9751 cv
103.472 40.0791 103.276 39.3511 102.884 38.8191 cv
102.492 38.2871 101.96 38.0211 101.288 38.0211 cv
101.288 36.9571 mo
102.38 36.9571 103.234 37.3211 103.864 38.0211 cv
104.48 38.7351 104.802 39.7151 104.802 40.9751 cv
104.802 42.2351 104.48 43.2151 103.864 43.9151 cv
103.234 44.6291 102.38 44.9791 101.288 44.9791 cv
100.182 44.9791 99.3142 44.6291 98.6982 43.9151 cv
98.0822 43.2151 97.7742 42.2351 97.7742 40.9751 cv
97.7742 39.7151 98.0822 38.7351 98.6982 38.0211 cv
99.3142 37.3211 100.182 36.9571 101.288 36.9571 cv
f
112.852 38.6091 mo
113.16 38.0491 113.538 37.6431 113.972 37.3631 cv
114.406 37.0971 114.924 36.9571 115.526 36.9571 cv
116.31 36.9571 116.926 37.2371 117.36 37.7971 cv
117.794 38.3571 118.018 39.1551 118.018 40.1771 cv
118.018 44.7971 li
116.758 44.7971 li
116.758 40.2191 li
116.758 39.4911 116.618 38.9451 116.366 38.5811 cv
116.1 38.2311 115.708 38.0491 115.176 38.0491 cv
114.518 38.0491 114 38.2731 113.622 38.7071 cv
113.244 39.1411 113.062 39.7291 113.062 40.4711 cv
113.062 44.7971 li
111.802 44.7971 li
111.802 40.2191 li
111.802 39.4911 111.662 38.9451 111.41 38.5811 cv
111.144 38.2311 110.738 38.0491 110.206 38.0491 cv
109.562 38.0491 109.044 38.2731 108.666 38.7071 cv
108.288 39.1411 108.106 39.7291 108.106 40.4711 cv
108.106 44.7971 li
106.846 44.7971 li
106.846 37.1391 li
108.106 37.1391 li
108.106 38.3291 li
108.386 37.8671 108.736 37.5171 109.142 37.2931 cv
109.534 37.0691 110.01 36.9571 110.57 36.9571 cv
111.13 36.9571 111.592 37.0971 111.984 37.3771 cv
112.376 37.6571 112.656 38.0771 112.852 38.6091 cv
f
126.214 53.9965 mo
122.714 53.9965 li
f
126.214 53.9965 mo
122.714 53.9965 li
@
26.4465 54.6968 mo
26.4465 59.3168 li
25.1865 59.3168 li
25.1865 54.7388 li
25.1865 54.0108 25.0325 53.4788 24.7525 53.1148 cv
24.4725 52.7508 24.0525 52.5688 23.4925 52.5688 cv
22.8065 52.5688 22.2745 52.7928 21.8825 53.2268 cv
21.4905 53.6608 21.2945 54.2488 21.2945 54.9908 cv
21.2945 59.3168 li
20.0345 59.3168 li
20.0345 48.6768 li
21.2945 48.6768 li
21.2945 52.8488 li
21.5885 52.4008 21.9385 52.0508 22.3585 51.8268 cv
22.7645 51.6028 23.2405 51.4768 23.7725 51.4768 cv
24.6405 51.4768 25.3125 51.7568 25.7605 52.3028 cv
26.2085 52.8488 26.4465 53.6468 26.4465 54.6968 cv
f
34.9165 53.1288 mo
35.2245 52.5688 35.6025 52.1628 36.0366 51.8828 cv
36.4706 51.6168 36.9886 51.4768 37.5906 51.4768 cv
38.3746 51.4768 38.9906 51.7568 39.4246 52.3168 cv
39.8586 52.8768 40.0826 53.6748 40.0826 54.6968 cv
40.0826 59.3168 li
38.8226 59.3168 li
38.8226 54.7388 li
38.8226 54.0108 38.6826 53.4648 38.4306 53.1008 cv
38.1646 52.7508 37.7726 52.5688 37.2406 52.5688 cv
36.5826 52.5688 36.0646 52.7928 35.6865 53.2268 cv
35.3085 53.6608 35.1265 54.2488 35.1265 54.9908 cv
35.1265 59.3168 li
33.8665 59.3168 li
33.8665 54.7388 li
33.8665 54.0108 33.7265 53.4648 33.4745 53.1008 cv
33.2085 52.7508 32.8025 52.5688 32.2705 52.5688 cv
31.6265 52.5688 31.1085 52.7928 30.7305 53.2268 cv
30.3525 53.6608 30.1705 54.2488 30.1705 54.9908 cv
30.1705 59.3168 li
28.9105 59.3168 li
28.9105 51.6588 li
30.1705 51.6588 li
30.1705 52.8488 li
30.4505 52.3868 30.8005 52.0368 31.2065 51.8128 cv
31.5985 51.5888 32.0745 51.4768 32.6345 51.4768 cv
33.1945 51.4768 33.6565 51.6168 34.0485 51.8968 cv
34.4405 52.1768 34.7205 52.5968 34.9165 53.1288 cv
f
42.7706 57.5808 mo
44.2126 57.5808 li
44.2126 59.3168 li
42.7706 59.3168 li
42.7706 57.5808 li
f
52.5426 55.4948 mo
52.5426 54.5708 52.3466 53.8568 51.9686 53.3248 cv
51.5766 52.7928 51.0586 52.5268 50.4006 52.5268 cv
49.7286 52.5268 49.2106 52.7928 48.8326 53.3248 cv
48.4406 53.8568 48.2586 54.5708 48.2586 55.4948 cv
48.2586 56.4188 48.4406 57.1468 48.8326 57.6788 cv
49.2106 58.2108 49.7286 58.4628 50.4006 58.4628 cv
51.0586 58.4628 51.5766 58.2108 51.9686 57.6788 cv
52.3466 57.1468 52.5426 56.4188 52.5426 55.4948 cv
48.2586 52.8208 mo
48.5106 52.3728 48.8466 52.0368 49.2526 51.8128 cv
49.6586 51.5888 50.1486 51.4768 50.7086 51.4768 cv
51.6326 51.4768 52.3886 51.8548 52.9766 52.5828 cv
53.5506 53.3248 53.8446 54.2908 53.8446 55.4948 cv
53.8446 56.6988 53.5506 57.6788 52.9766 58.4068 cv
52.3886 59.1348 51.6326 59.4988 50.7086 59.4988 cv
50.1486 59.4988 49.6586 59.3868 49.2526 59.1768 cv
48.8466 58.9668 48.5106 58.6308 48.2586 58.1688 cv
48.2586 59.3168 li
46.9986 59.3168 li
46.9986 48.6768 li
48.2586 48.6768 li
48.2586 52.8208 li
f
59.4166 55.4668 mo
58.3946 55.4668 57.6946 55.5928 57.3026 55.8168 cv
56.9106 56.0548 56.7146 56.4468 56.7146 57.0068 cv
56.7146 57.4548 56.8546 57.8188 57.1486 58.0708 cv
57.4426 58.3368 57.8486 58.4628 58.3526 58.4628 cv
59.0526 58.4628 59.6126 58.2248 60.0326 57.7208 cv
60.4526 57.2308 60.6626 56.5728 60.6626 55.7468 cv
60.6626 55.4668 li
59.4166 55.4668 li
61.9226 54.9488 mo
61.9226 59.3168 li
60.6626 59.3168 li
60.6626 58.1548 li
60.3686 58.6308 60.0046 58.9668 59.5846 59.1768 cv
59.1646 59.3868 58.6326 59.4988 58.0166 59.4988 cv
57.2326 59.4988 56.6026 59.2888 56.1406 58.8548 cv
55.6786 58.4208 55.4546 57.8328 55.4546 57.0908 cv
55.4546 56.2368 55.7346 55.5928 56.3226 55.1448 cv
56.8966 54.7108 57.7506 54.4868 58.8986 54.4868 cv
60.6626 54.4868 li
60.6626 54.3608 li
60.6626 53.7868 60.4666 53.3388 60.0886 53.0168 cv
59.7106 52.7088 59.1786 52.5408 58.4926 52.5408 cv
58.0446 52.5408 57.6246 52.5968 57.2046 52.7088 cv
56.7846 52.8208 56.3926 52.9748 56.0146 53.1708 cv
56.0146 52.0088 li
56.4626 51.8408 56.9106 51.7008 57.3446 51.6168 cv
57.7786 51.5328 58.1986 51.4768 58.6186 51.4768 cv
59.7246 51.4768 60.5506 51.7708 61.0966 52.3448 cv
61.6426 52.9188 61.9226 53.7868 61.9226 54.9488 cv
f
64.5126 51.6588 mo
65.7726 51.6588 li
65.7726 59.3168 li
64.5126 59.3168 li
64.5126 51.6588 li
64.5126 48.6768 mo
65.7726 48.6768 li
65.7726 50.2728 li
64.5126 50.2728 li
64.5126 48.6768 li
f
73.4446 52.8208 mo
73.4446 48.6768 li
74.7046 48.6768 li
74.7046 59.3168 li
73.4446 59.3168 li
73.4446 58.1688 li
73.1786 58.6308 72.8426 58.9668 72.4366 59.1768 cv
72.0306 59.3868 71.5546 59.4988 70.9946 59.4988 cv
70.0706 59.4988 69.3146 59.1348 68.7266 58.4068 cv
68.1386 57.6788 67.8586 56.6988 67.8586 55.4948 cv
67.8586 54.2908 68.1386 53.3248 68.7266 52.5828 cv
69.3146 51.8548 70.0706 51.4768 70.9946 51.4768 cv
71.5546 51.4768 72.0306 51.5888 72.4366 51.8128 cv
72.8426 52.0368 73.1786 52.3728 73.4446 52.8208 cv
69.1606 55.4948 mo
69.1606 56.4188 69.3426 57.1468 69.7206 57.6788 cv
70.0986 58.2108 70.6306 58.4628 71.3026 58.4628 cv
71.9606 58.4628 72.4786 58.2108 72.8706 57.6788 cv
73.2486 57.1468 73.4446 56.4188 73.4446 55.4948 cv
73.4446 54.5708 73.2486 53.8568 72.8706 53.3248 cv
72.4786 52.7928 71.9606 52.5268 71.3026 52.5268 cv
70.6306 52.5268 70.0986 52.7928 69.7206 53.3248 cv
69.3426 53.8568 69.1606 54.5708 69.1606 55.4948 cv
f
77.1686 56.2928 mo
77.1686 51.6588 li
78.4286 51.6588 li
78.4286 56.2508 li
78.4286 56.9788 78.5686 57.5108 78.8486 57.8748 cv
79.1286 58.2388 79.5486 58.4208 80.1226 58.4208 cv
80.7946 58.4208 81.3406 58.2108 81.7326 57.7768 cv
82.1246 57.3428 82.3206 56.7548 82.3206 55.9988 cv
82.3206 51.6588 li
83.5806 51.6588 li
83.5806 59.3168 li
82.3206 59.3168 li
82.3206 58.1408 li
82.0126 58.6168 81.6486 58.9528 81.2566 59.1768 cv
80.8506 59.3868 80.3886 59.4988 79.8566 59.4988 cv
78.9746 59.4988 78.3026 59.2328 77.8546 58.6868 cv
77.3926 58.1548 77.1686 57.3568 77.1686 56.2928 cv
80.3326 51.4768 mo
80.3326 51.4768 li
f
86.3526 57.5808 mo
87.7946 57.5808 li
87.7946 59.3168 li
86.3526 59.3168 li
86.3526 57.5808 li
f
96.1386 51.9528 mo
96.1386 53.1288 li
95.7746 52.9328 95.4246 52.7928 95.0606 52.6948 cv
94.6966 52.5968 94.3466 52.5408 93.9826 52.5408 cv
93.1706 52.5408 92.5266 52.8068 92.0786 53.3248 cv
91.6306 53.8428 91.4066 54.5708 91.4066 55.4948 cv
91.4066 56.4328 91.6306 57.1608 92.0786 57.6788 cv
92.5266 58.1968 93.1706 58.4488 93.9826 58.4488 cv
94.3466 58.4488 94.6966 58.4068 95.0606 58.3088 cv
95.4246 58.2108 95.7746 58.0568 96.1386 57.8608 cv
96.1386 59.0228 li
95.7746 59.1908 95.4106 59.3168 95.0466 59.3868 cv
94.6686 59.4568 94.2626 59.4988 93.8426 59.4988 cv
92.6946 59.4988 91.7706 59.1488 91.0986 58.4208 cv
90.4126 57.7068 90.0766 56.7268 90.0766 55.4948 cv
90.0766 54.2488 90.4126 53.2688 91.0986 52.5548 cv
91.7846 51.8408 92.7226 51.4768 93.9266 51.4768 cv
94.3186 51.4768 94.6966 51.5188 95.0606 51.6028 cv
95.4246 51.6868 95.7886 51.7988 96.1386 51.9528 cv
f
101.291 52.5408 mo
100.619 52.5408 100.087 52.8068 99.6946 53.3388 cv
99.3026 53.8708 99.1066 54.5848 99.1066 55.4948 cv
99.1066 56.4188 99.2886 57.1328 99.6806 57.6648 cv
100.073 58.1968 100.605 58.4488 101.291 58.4488 cv
101.963 58.4488 102.495 58.1968 102.887 57.6648 cv
103.279 57.1328 103.475 56.4188 103.475 55.4948 cv
103.475 54.5988 103.279 53.8708 102.887 53.3388 cv
102.495 52.8068 101.963 52.5408 101.291 52.5408 cv
101.291 51.4768 mo
102.383 51.4768 103.237 51.8408 103.867 52.5408 cv
104.483 53.2548 104.805 54.2348 104.805 55.4948 cv
104.805 56.7548 104.483 57.7348 103.867 58.4348 cv
103.237 59.1488 102.383 59.4988 101.291 59.4988 cv
100.185 59.4988 99.3166 59.1488 98.7006 58.4348 cv
98.0846 57.7348 97.7766 56.7548 97.7766 55.4948 cv
97.7766 54.2348 98.0846 53.2548 98.7006 52.5408 cv
99.3166 51.8408 100.185 51.4768 101.291 51.4768 cv
f
112.855 53.1288 mo
113.163 52.5688 113.541 52.1628 113.975 51.8828 cv
114.409 51.6168 114.927 51.4768 115.529 51.4768 cv
116.313 51.4768 116.929 51.7568 117.363 52.3168 cv
117.797 52.8768 118.021 53.6748 118.021 54.6968 cv
118.021 59.3168 li
116.761 59.3168 li
116.761 54.7388 li
116.761 54.0108 116.621 53.4648 116.369 53.1008 cv
116.103 52.7508 115.711 52.5688 115.179 52.5688 cv
114.521 52.5688 114.003 52.7928 113.625 53.2268 cv
113.247 53.6608 113.065 54.2488 113.065 54.9908 cv
113.065 59.3168 li
111.805 59.3168 li
111.805 54.7388 li
111.805 54.0108 111.665 53.4648 111.413 53.1008 cv
111.147 52.7508 110.741 52.5688 110.209 52.5688 cv
109.565 52.5688 109.047 52.7928 108.669 53.2268 cv
108.291 53.6608 108.109 54.2488 108.109 54.9908 cv
108.109 59.3168 li
106.849 59.3168 li
106.849 51.6588 li
108.109 51.6588 li
108.109 52.8488 li
108.389 52.3868 108.739 52.0368 109.145 51.8128 cv
109.537 51.5888 110.013 51.4768 110.573 51.4768 cv
111.133 51.4768 111.595 51.6168 111.987 51.8968 cv
112.379 52.1768 112.659 52.5968 112.855 53.1288 cv
f
126.214 68.5162 mo
122.714 68.5162 li
f
126.214 68.5162 mo
122.714 68.5162 li
@
8.99367 67.6485 mo
9.30167 67.0885 9.67966 66.6825 10.1137 66.4025 cv
10.5477 66.1365 11.0657 65.9965 11.6677 65.9965 cv
12.4517 65.9965 13.0677 66.2765 13.5017 66.8365 cv
13.9357 67.3965 14.1597 68.1945 14.1597 69.2165 cv
14.1597 73.8365 li
12.8997 73.8365 li
12.8997 69.2585 li
12.8997 68.5305 12.7597 67.9845 12.5077 67.6205 cv
12.2417 67.2705 11.8497 67.0885 11.3177 67.0885 cv
10.6597 67.0885 10.1417 67.3125 9.76366 67.7465 cv
9.38567 68.1805 9.20367 68.7685 9.20367 69.5105 cv
9.20367 73.8365 li
7.94366 73.8365 li
7.94366 69.2585 li
7.94366 68.5305 7.80367 67.9845 7.55167 67.6205 cv
7.28567 67.2705 6.87966 67.0885 6.34766 67.0885 cv
5.70367 67.0885 5.18566 67.3125 4.80766 67.7465 cv
4.42966 68.1805 4.24767 68.7685 4.24767 69.5105 cv
4.24767 73.8365 li
2.98766 73.8365 li
2.98766 66.1785 li
4.24767 66.1785 li
4.24767 67.3685 li
4.52766 66.9065 4.87766 66.5565 5.28367 66.3325 cv
5.67567 66.1085 6.15166 65.9965 6.71166 65.9965 cv
7.27167 65.9965 7.73367 66.1365 8.12566 66.4165 cv
8.51766 66.6965 8.79767 67.1165 8.99367 67.6485 cv
f
19.6337 67.0605 mo
18.9617 67.0605 18.4297 67.3265 18.0377 67.8585 cv
17.6457 68.3905 17.4497 69.1045 17.4497 70.0145 cv
17.4497 70.9385 17.6317 71.6525 18.0237 72.1845 cv
18.4157 72.7165 18.9477 72.9685 19.6337 72.9685 cv
20.3057 72.9685 20.8377 72.7165 21.2297 72.1845 cv
21.6217 71.6525 21.8177 70.9385 21.8177 70.0145 cv
21.8177 69.1185 21.6217 68.3905 21.2297 67.8585 cv
20.8377 67.3265 20.3057 67.0605 19.6337 67.0605 cv
19.6337 65.9965 mo
20.7257 65.9965 21.5797 66.3605 22.2097 67.0605 cv
22.8257 67.7745 23.1477 68.7545 23.1477 70.0145 cv
23.1477 71.2745 22.8257 72.2545 22.2097 72.9545 cv
21.5797 73.6685 20.7257 74.0185 19.6337 74.0185 cv
18.5277 74.0185 17.6597 73.6685 17.0437 72.9545 cv
16.4277 72.2545 16.1197 71.2745 16.1197 70.0145 cv
16.1197 68.7545 16.4277 67.7745 17.0437 67.0605 cv
17.6597 66.3605 18.5277 65.9965 19.6337 65.9965 cv
f
30.7357 70.0145 mo
30.7357 69.0905 30.5397 68.3765 30.1617 67.8445 cv
29.7697 67.3125 29.2517 67.0465 28.5937 67.0465 cv
27.9217 67.0465 27.4037 67.3125 27.0257 67.8445 cv
26.6337 68.3765 26.4517 69.0905 26.4517 70.0145 cv
26.4517 70.9385 26.6337 71.6665 27.0257 72.1985 cv
27.4037 72.7305 27.9217 72.9825 28.5937 72.9825 cv
29.2517 72.9825 29.7697 72.7305 30.1617 72.1985 cv
30.5397 71.6665 30.7357 70.9385 30.7357 70.0145 cv
26.4517 67.3405 mo
26.7037 66.8925 27.0397 66.5565 27.4457 66.3325 cv
27.8517 66.1085 28.3417 65.9965 28.9017 65.9965 cv
29.8257 65.9965 30.5817 66.3745 31.1697 67.1025 cv
31.7437 67.8445 32.0377 68.8105 32.0377 70.0145 cv
32.0377 71.2185 31.7437 72.1985 31.1697 72.9265 cv
30.5817 73.6545 29.8257 74.0185 28.9017 74.0185 cv
28.3417 74.0185 27.8517 73.9065 27.4457 73.6965 cv
27.0397 73.4865 26.7037 73.1505 26.4517 72.6885 cv
26.4517 73.8365 li
25.1917 73.8365 li
25.1917 63.1965 li
26.4517 63.1965 li
26.4517 67.3405 li
f
34.1237 66.1785 mo
35.3837 66.1785 li
35.3837 73.8365 li
34.1237 73.8365 li
34.1237 66.1785 li
34.1237 63.1965 mo
35.3837 63.1965 li
35.3837 64.7925 li
34.1237 64.7925 li
34.1237 63.1965 li
f
38.0157 63.1965 mo
39.2757 63.1965 li
39.2757 73.8365 li
38.0157 73.8365 li
38.0157 63.1965 li
f
48.4597 69.6925 mo
48.4597 70.3085 li
42.6777 70.3085 li
42.7337 71.1765 42.9857 71.8485 43.4617 72.2965 cv
43.9237 72.7445 44.5677 72.9685 45.4077 72.9685 cv
45.8837 72.9685 46.3597 72.9125 46.8077 72.8005 cv
47.2557 72.6885 47.7177 72.5065 48.1657 72.2545 cv
48.1657 73.4445 li
47.7177 73.6405 47.2557 73.7945 46.7797 73.8785 cv
46.3037 73.9625 45.8137 74.0185 45.3377 74.0185 cv
44.1057 74.0185 43.1397 73.6685 42.4257 72.9685 cv
41.7117 72.2685 41.3617 71.3025 41.3617 70.0845 cv
41.3617 68.8385 41.6977 67.8445 42.3697 67.1025 cv
43.0417 66.3745 43.9657 65.9965 45.1137 65.9965 cv
46.1497 65.9965 46.9617 66.3325 47.5637 66.9905 cv
48.1517 67.6625 48.4597 68.5585 48.4597 69.6925 cv
47.1997 69.3285 mo
47.1857 68.6425 46.9897 68.0965 46.6257 67.6765 cv
46.2477 67.2705 45.7437 67.0605 45.1277 67.0605 cv
44.4277 67.0605 43.8677 67.2705 43.4477 67.6625 cv
43.0277 68.0545 42.7757 68.6145 42.7197 69.3285 cv
47.1997 69.3285 li
f
50.6997 72.1005 mo
52.1417 72.1005 li
52.1417 73.8365 li
50.6997 73.8365 li
50.6997 72.1005 li
f
55.3897 72.6745 mo
57.6437 72.6745 li
57.6437 64.8905 li
55.1937 65.3805 li
55.1937 64.1205 li
57.6297 63.6305 li
59.0157 63.6305 li
59.0157 72.6745 li
61.2697 72.6745 li
61.2697 73.8365 li
55.3897 73.8365 li
55.3897 72.6745 li
f
65.2457 72.6745 mo
70.0617 72.6745 li
70.0617 73.8365 li
63.5797 73.8365 li
63.5797 72.6745 li
64.0977 72.1425 64.8117 71.4145 65.7217 70.4905 cv
66.6177 69.5805 67.1917 68.9925 67.4297 68.7265 cv
67.8777 68.2365 68.1857 67.8165 68.3537 67.4665 cv
68.5217 67.1305 68.6197 66.7805 68.6197 66.4445 cv
68.6197 65.9125 68.4237 65.4645 68.0457 65.1285 cv
67.6677 64.7925 67.1777 64.6105 66.5617 64.6105 cv
66.1277 64.6105 65.6657 64.6945 65.1897 64.8345 cv
64.7137 64.9885 64.1957 65.2125 63.6497 65.5205 cv
63.6497 64.1205 li
64.2097 63.8965 64.7277 63.7285 65.2037 63.6165 cv
65.6797 63.5045 66.1277 63.4485 66.5337 63.4485 cv
67.5837 63.4485 68.4237 63.7145 69.0537 64.2465 cv
69.6837 64.7785 70.0057 65.4785 70.0057 66.3605 cv
70.0057 66.7805 69.9217 67.1865 69.7677 67.5505 cv
69.6137 67.9285 69.3337 68.3765 68.9137 68.8805 cv
68.8017 69.0205 68.4377 69.3985 67.8217 70.0285 cv
67.2057 70.6585 66.3517 71.5405 65.2457 72.6745 cv
f
77.1457 68.3345 mo
77.8037 68.4745 78.3217 68.7685 78.6857 69.2165 cv
79.0497 69.6645 79.2457 70.2245 79.2457 70.8685 cv
79.2457 71.8765 78.8957 72.6605 78.2097 73.2065 cv
77.5097 73.7525 76.5297 74.0185 75.2557 74.0185 cv
74.8217 74.0185 74.3737 73.9765 73.9257 73.8925 cv
73.4777 73.8225 73.0017 73.6965 72.5257 73.5285 cv
72.5257 72.1985 li
72.9037 72.4225 73.3237 72.5905 73.7857 72.7025 cv
74.2337 72.8145 74.7097 72.8705 75.2137 72.8705 cv
76.0817 72.8705 76.7397 72.7025 77.1877 72.3665 cv
77.6357 72.0305 77.8737 71.5265 77.8737 70.8685 cv
77.8737 70.2805 77.6637 69.8045 77.2437 69.4685 cv
76.8237 69.1325 76.2357 68.9505 75.4797 68.9505 cv
74.2897 68.9505 li
74.2897 67.8165 li
75.5357 67.8165 li
76.2077 67.8165 76.7257 67.6905 77.0897 67.4105 cv
77.4537 67.1445 77.6357 66.7525 77.6357 66.2345 cv
77.6357 65.7165 77.4397 65.3105 77.0757 65.0305 cv
76.6977 64.7505 76.1657 64.6105 75.4797 64.6105 cv
75.1017 64.6105 74.6957 64.6525 74.2617 64.7365 cv
73.8277 64.8205 73.3517 64.9465 72.8337 65.1145 cv
72.8337 63.8825 li
73.3517 63.7425 73.8417 63.6305 74.3037 63.5605 cv
74.7517 63.4905 75.1857 63.4485 75.6057 63.4485 cv
76.6417 63.4485 77.4677 63.6865 78.0837 64.1625 cv
78.6997 64.6385 79.0077 65.2825 79.0077 66.0945 cv
79.0077 66.6545 78.8397 67.1305 78.5177 67.5225 cv
78.1957 67.9145 77.7337 68.1945 77.1457 68.3345 cv
f
84.8177 64.5405 mo
84.1037 64.5405 83.5717 64.8905 83.2077 65.5905 cv
82.8437 66.2905 82.6757 67.3405 82.6757 68.7405 cv
82.6757 70.1405 82.8437 71.1905 83.2077 71.8905 cv
83.5717 72.5905 84.1037 72.9405 84.8177 72.9405 cv
85.5317 72.9405 86.0637 72.5905 86.4277 71.8905 cv
86.7777 71.1905 86.9597 70.1405 86.9597 68.7405 cv
86.9597 67.3405 86.7777 66.2905 86.4277 65.5905 cv
86.0637 64.8905 85.5317 64.5405 84.8177 64.5405 cv
84.8177 63.4485 mo
85.9517 63.4485 86.8197 63.9105 87.4357 64.8065 cv
88.0377 65.7165 88.3457 67.0325 88.3457 68.7405 cv
88.3457 70.4625 88.0377 71.7785 87.4357 72.6745 cv
86.8197 73.5705 85.9517 74.0185 84.8177 74.0185 cv
83.6697 74.0185 82.7877 73.5705 82.1857 72.6745 cv
81.5837 71.7785 81.2897 70.4625 81.2897 68.7405 cv
81.2897 67.0325 81.5837 65.7165 82.1857 64.8065 cv
82.7877 63.9105 83.6697 63.4485 84.8177 63.4485 cv
f
93.8897 68.1805 mo
93.2737 68.1805 92.7837 68.4045 92.4197 68.8245 cv
92.0557 69.2445 91.8737 69.8325 91.8737 70.5605 cv
91.8737 71.3025 92.0557 71.8905 92.4197 72.3105 cv
92.7837 72.7305 93.2737 72.9405 93.8897 72.9405 cv
94.5057 72.9405 94.9957 72.7305 95.3597 72.3105 cv
95.7237 71.8905 95.9057 71.3025 95.9057 70.5605 cv
95.9057 69.8325 95.7237 69.2445 95.3597 68.8245 cv
94.9957 68.4045 94.5057 68.1805 93.8897 68.1805 cv
96.6337 63.8545 mo
96.6337 65.1145 li
96.2837 64.9465 95.9337 64.8205 95.5837 64.7365 cv
95.2197 64.6525 94.8697 64.6105 94.5337 64.6105 cv
93.6097 64.6105 92.9097 64.9185 92.4337 65.5345 cv
91.9577 66.1505 91.6777 67.0885 91.6217 68.3205 cv
91.8877 67.9285 92.2237 67.6205 92.6297 67.4105 cv
93.0357 67.2005 93.4837 67.0885 93.9737 67.0885 cv
94.9957 67.0885 95.8077 67.4105 96.3957 68.0265 cv
96.9837 68.6425 97.2917 69.4965 97.2917 70.5605 cv
97.2917 71.6105 96.9697 72.4505 96.3537 73.0805 cv
95.7377 73.7105 94.9117 74.0185 93.8897 74.0185 cv
92.7137 74.0185 91.8037 73.5705 91.1877 72.6745 cv
90.5577 71.7785 90.2497 70.4625 90.2497 68.7405 cv
90.2497 67.1305 90.6277 65.8425 91.3977 64.8905 cv
92.1537 63.9385 93.1897 63.4485 94.4777 63.4485 cv
94.8137 63.4485 95.1637 63.4905 95.5277 63.5465 cv
95.8777 63.6165 96.2417 63.7145 96.6337 63.8545 cv
f
99.6717 72.1005 mo
101.114 72.1005 li
101.114 73.8365 li
99.6717 73.8365 li
99.6717 72.1005 li
f
109.458 66.4725 mo
109.458 67.6485 li
109.094 67.4525 108.744 67.3125 108.38 67.2145 cv
108.016 67.1165 107.666 67.0605 107.302 67.0605 cv
106.49 67.0605 105.846 67.3265 105.398 67.8445 cv
104.95 68.3625 104.726 69.0905 104.726 70.0145 cv
104.726 70.9525 104.95 71.6805 105.398 72.1985 cv
105.846 72.7165 106.49 72.9685 107.302 72.9685 cv
107.666 72.9685 108.016 72.9265 108.38 72.8285 cv
108.744 72.7305 109.094 72.5765 109.458 72.3805 cv
109.458 73.5425 li
109.094 73.7105 108.73 73.8365 108.366 73.9065 cv
107.988 73.9765 107.582 74.0185 107.162 74.0185 cv
106.014 74.0185 105.09 73.6685 104.418 72.9405 cv
103.732 72.2265 103.396 71.2465 103.396 70.0145 cv
103.396 68.7685 103.732 67.7885 104.418 67.0745 cv
105.104 66.3605 106.042 65.9965 107.246 65.9965 cv
107.638 65.9965 108.016 66.0385 108.38 66.1225 cv
108.744 66.2065 109.108 66.3185 109.458 66.4725 cv
f
118.012 69.2165 mo
118.012 73.8365 li
116.752 73.8365 li
116.752 69.2585 li
116.752 68.5305 116.598 67.9985 116.318 67.6345 cv
116.038 67.2705 115.618 67.0885 115.058 67.0885 cv
114.372 67.0885 113.84 67.3125 113.448 67.7465 cv
113.056 68.1805 112.86 68.7685 112.86 69.5105 cv
112.86 73.8365 li
111.6 73.8365 li
111.6 66.1785 li
112.86 66.1785 li
112.86 67.3685 li
113.154 66.9205 113.504 66.5705 113.924 66.3465 cv
114.33 66.1225 114.806 65.9965 115.338 65.9965 cv
116.206 65.9965 116.878 66.2765 117.326 66.8225 cv
117.774 67.3685 118.012 68.1665 118.012 69.2165 cv
f
126.214 83.0358 mo
122.714 83.0358 li
f
126.214 83.0358 mo
122.714 83.0358 li
@
19.5562 82.1682 mo
19.8642 81.6082 20.2422 81.2022 20.6762 80.9222 cv
21.1102 80.6562 21.6282 80.5162 22.2302 80.5162 cv
23.0142 80.5162 23.6302 80.7962 24.0642 81.3562 cv
24.4982 81.9162 24.7222 82.7142 24.7222 83.7362 cv
24.7222 88.3562 li
23.4622 88.3562 li
23.4622 83.7782 li
23.4622 83.0502 23.3222 82.5042 23.0702 82.1402 cv
22.8042 81.7902 22.4122 81.6082 21.8802 81.6082 cv
21.2222 81.6082 20.7042 81.8322 20.3262 82.2662 cv
19.9482 82.7002 19.7662 83.2882 19.7662 84.0302 cv
19.7662 88.3562 li
18.5062 88.3562 li
18.5062 83.7782 li
18.5062 83.0502 18.3662 82.5042 18.1142 82.1402 cv
17.8482 81.7902 17.4422 81.6082 16.9102 81.6082 cv
16.2662 81.6082 15.7482 81.8322 15.3702 82.2662 cv
14.9922 82.7002 14.8102 83.2882 14.8102 84.0302 cv
14.8102 88.3562 li
13.5502 88.3562 li
13.5502 80.6982 li
14.8102 80.6982 li
14.8102 81.8882 li
15.0902 81.4262 15.4402 81.0762 15.8462 80.8522 cv
16.2382 80.6282 16.7142 80.5162 17.2742 80.5162 cv
17.8342 80.5162 18.2962 80.6562 18.6882 80.9362 cv
19.0802 81.2162 19.3602 81.6362 19.5562 82.1682 cv
f
27.1022 85.3322 mo
27.1022 80.6982 li
28.3622 80.6982 li
28.3622 85.2902 li
28.3622 86.0182 28.5022 86.5502 28.7822 86.9142 cv
29.0622 87.2782 29.4822 87.4602 30.0562 87.4602 cv
30.7282 87.4602 31.2742 87.2502 31.6662 86.8162 cv
32.0582 86.3822 32.2542 85.7942 32.2542 85.0382 cv
32.2542 80.6982 li
33.5142 80.6982 li
33.5142 88.3562 li
32.2542 88.3562 li
32.2542 87.1802 li
31.9462 87.6562 31.5822 87.9922 31.1902 88.2162 cv
30.7842 88.4262 30.3222 88.5382 29.7902 88.5382 cv
28.9082 88.5382 28.2362 88.2722 27.7882 87.7262 cv
27.3262 87.1942 27.1022 86.3962 27.1022 85.3322 cv
30.2662 80.5162 mo
30.2662 80.5162 li
f
40.9902 80.9222 mo
40.9902 82.1122 li
40.6262 81.9442 40.2622 81.8042 39.8842 81.7062 cv
39.4922 81.6222 39.1002 81.5662 38.6942 81.5662 cv
38.0642 81.5662 37.5882 81.6642 37.2802 81.8602 cv
36.9722 82.0562 36.8182 82.3362 36.8182 82.7142 cv
36.8182 83.0082 36.9302 83.2322 37.1542 83.4002 cv
37.3782 83.5682 37.8262 83.7362 38.4982 83.8762 cv
38.9322 83.9742 li
39.8282 84.1702 40.4582 84.4502 40.8362 84.7862 cv
41.2002 85.1362 41.3962 85.6262 41.3962 86.2422 cv
41.3962 86.9562 41.1162 87.5162 40.5562 87.9222 cv
39.9962 88.3422 39.2122 88.5382 38.2322 88.5382 cv
37.8122 88.5382 37.3922 88.4962 36.9442 88.4262 cv
36.4962 88.3562 36.0342 88.2442 35.5442 88.0762 cv
35.5442 86.7742 li
36.0062 87.0262 36.4682 87.2082 36.9162 87.3202 cv
37.3642 87.4462 37.8122 87.5022 38.2602 87.5022 cv
38.8482 87.5022 39.3102 87.4042 39.6322 87.2082 cv
39.9402 87.0122 40.1082 86.7182 40.1082 86.3402 cv
40.1082 86.0042 39.9822 85.7382 39.7582 85.5562 cv
39.5342 85.3742 39.0302 85.1922 38.2462 85.0242 cv
37.8122 84.9262 li
37.0282 84.7582 36.4542 84.5062 36.1182 84.1702 cv
35.7682 83.8342 35.6002 83.3722 35.6002 82.7702 cv
35.6002 82.0562 35.8522 81.4962 36.3562 81.1042 cv
36.8602 80.7122 37.5882 80.5162 38.5402 80.5162 cv
39.0022 80.5162 39.4362 80.5582 39.8562 80.6282 cv
40.2622 80.6982 40.6402 80.7962 40.9902 80.9222 cv
f
43.3982 80.6982 mo
44.6582 80.6982 li
44.6582 88.3562 li
43.3982 88.3562 li
43.3982 80.6982 li
43.3982 77.7162 mo
44.6582 77.7162 li
44.6582 79.3122 li
43.3982 79.3122 li
43.3982 77.7162 li
f
52.8062 80.9922 mo
52.8062 82.1682 li
52.4422 81.9722 52.0922 81.8322 51.7282 81.7342 cv
51.3642 81.6362 51.0142 81.5802 50.6502 81.5802 cv
49.8382 81.5802 49.1942 81.8462 48.7462 82.3642 cv
48.2982 82.8822 48.0742 83.6102 48.0742 84.5342 cv
48.0742 85.4722 48.2982 86.2002 48.7462 86.7182 cv
49.1942 87.2362 49.8382 87.4882 50.6502 87.4882 cv
51.0142 87.4882 51.3642 87.4462 51.7282 87.3482 cv
52.0922 87.2502 52.4422 87.0962 52.8062 86.9002 cv
52.8062 88.0622 li
52.4422 88.2302 52.0782 88.3562 51.7142 88.4262 cv
51.3362 88.4962 50.9302 88.5382 50.5102 88.5382 cv
49.3622 88.5382 48.4382 88.1882 47.7662 87.4602 cv
47.0802 86.7462 46.7442 85.7662 46.7442 84.5342 cv
46.7442 83.2882 47.0802 82.3082 47.7662 81.5942 cv
48.4522 80.8802 49.3902 80.5162 50.5942 80.5162 cv
50.9862 80.5162 51.3642 80.5582 51.7282 80.6422 cv
52.0922 80.7262 52.4562 80.8382 52.8062 80.9922 cv
f
55.1722 86.6202 mo
56.6142 86.6202 li
56.6142 88.3562 li
55.1722 88.3562 li
55.1722 86.6202 li
f
59.8622 87.1942 mo
62.1162 87.1942 li
62.1162 79.4102 li
59.6662 79.9002 li
59.6662 78.6402 li
62.1022 78.1502 li
63.4882 78.1502 li
63.4882 87.1942 li
65.7422 87.1942 li
65.7422 88.3562 li
59.8622 88.3562 li
59.8622 87.1942 li
f
71.6502 82.7002 mo
71.0342 82.7002 70.5442 82.9242 70.1802 83.3442 cv
69.8162 83.7642 69.6342 84.3522 69.6342 85.0802 cv
69.6342 85.8222 69.8162 86.4102 70.1802 86.8302 cv
70.5442 87.2502 71.0342 87.4602 71.6502 87.4602 cv
72.2662 87.4602 72.7562 87.2502 73.1202 86.8302 cv
73.4842 86.4102 73.6662 85.8222 73.6662 85.0802 cv
73.6662 84.3522 73.4842 83.7642 73.1202 83.3442 cv
72.7562 82.9242 72.2662 82.7002 71.6502 82.7002 cv
74.3942 78.3742 mo
74.3942 79.6342 li
74.0442 79.4662 73.6942 79.3402 73.3442 79.2562 cv
72.9802 79.1722 72.6302 79.1302 72.2942 79.1302 cv
71.3702 79.1302 70.6702 79.4382 70.1942 80.0542 cv
69.7182 80.6702 69.4382 81.6082 69.3822 82.8402 cv
69.6482 82.4482 69.9842 82.1402 70.3902 81.9302 cv
70.7962 81.7202 71.2442 81.6082 71.7342 81.6082 cv
72.7562 81.6082 73.5682 81.9302 74.1562 82.5462 cv
74.7442 83.1622 75.0522 84.0162 75.0522 85.0802 cv
75.0522 86.1302 74.7302 86.9702 74.1142 87.6002 cv
73.4982 88.2302 72.6722 88.5382 71.6502 88.5382 cv
70.4742 88.5382 69.5642 88.0902 68.9482 87.1942 cv
68.3182 86.2982 68.0102 84.9822 68.0102 83.2602 cv
68.0102 81.6502 68.3882 80.3622 69.1582 79.4102 cv
69.9142 78.4582 70.9502 77.9682 72.2382 77.9682 cv
72.5742 77.9682 72.9242 78.0102 73.2882 78.0662 cv
73.6382 78.1362 74.0022 78.2342 74.3942 78.3742 cv
f
81.6182 82.8542 mo
82.2762 82.9942 82.7942 83.2882 83.1582 83.7362 cv
83.5222 84.1842 83.7182 84.7442 83.7182 85.3882 cv
83.7182 86.3962 83.3682 87.1802 82.6822 87.7262 cv
81.9822 88.2722 81.0022 88.5382 79.7282 88.5382 cv
79.2942 88.5382 78.8462 88.4962 78.3982 88.4122 cv
77.9502 88.3422 77.4742 88.2162 76.9982 88.0482 cv
76.9982 86.7182 li
77.3762 86.9422 77.7962 87.1102 78.2582 87.2222 cv
78.7062 87.3342 79.1822 87.3902 79.6862 87.3902 cv
80.5542 87.3902 81.2122 87.2222 81.6602 86.8862 cv
82.1082 86.5502 82.3462 86.0462 82.3462 85.3882 cv
82.3462 84.8002 82.1362 84.3242 81.7162 83.9882 cv
81.2962 83.6522 80.7082 83.4702 79.9522 83.4702 cv
78.7622 83.4702 li
78.7622 82.3362 li
80.0082 82.3362 li
80.6802 82.3362 81.1982 82.2102 81.5622 81.9302 cv
81.9262 81.6642 82.1082 81.2722 82.1082 80.7542 cv
82.1082 80.2362 81.9122 79.8302 81.5482 79.5502 cv
81.1702 79.2702 80.6382 79.1302 79.9522 79.1302 cv
79.5742 79.1302 79.1682 79.1722 78.7342 79.2562 cv
78.3002 79.3402 77.8242 79.4662 77.3062 79.6342 cv
77.3062 78.4022 li
77.8242 78.2622 78.3142 78.1502 78.7762 78.0802 cv
79.2242 78.0102 79.6582 77.9682 80.0782 77.9682 cv
81.1142 77.9682 81.9402 78.2062 82.5562 78.6822 cv
83.1722 79.1582 83.4802 79.8022 83.4802 80.6142 cv
83.4802 81.1742 83.3122 81.6502 82.9902 82.0422 cv
82.6682 82.4342 82.2062 82.7142 81.6182 82.8542 cv
f
86.3362 86.6202 mo
87.7782 86.6202 li
87.7782 88.3562 li
86.3362 88.3562 li
86.3362 86.6202 li
f
96.1222 80.9922 mo
96.1222 82.1682 li
95.7582 81.9722 95.4082 81.8322 95.0442 81.7342 cv
94.6802 81.6362 94.3302 81.5802 93.9662 81.5802 cv
93.1542 81.5802 92.5102 81.8462 92.0622 82.3642 cv
91.6142 82.8822 91.3902 83.6102 91.3902 84.5342 cv
91.3902 85.4722 91.6142 86.2002 92.0622 86.7182 cv
92.5102 87.2362 93.1542 87.4882 93.9662 87.4882 cv
94.3302 87.4882 94.6802 87.4462 95.0442 87.3482 cv
95.4082 87.2502 95.7582 87.0962 96.1222 86.9002 cv
96.1222 88.0622 li
95.7582 88.2302 95.3942 88.3562 95.0302 88.4262 cv
94.6522 88.4962 94.2462 88.5382 93.8262 88.5382 cv
92.6782 88.5382 91.7542 88.1882 91.0822 87.4602 cv
90.3962 86.7462 90.0602 85.7662 90.0602 84.5342 cv
90.0602 83.2882 90.3962 82.3082 91.0822 81.5942 cv
91.7682 80.8802 92.7062 80.5162 93.9102 80.5162 cv
94.3022 80.5162 94.6802 80.5582 95.0442 80.6422 cv
95.4082 80.7262 95.7722 80.8382 96.1222 80.9922 cv
f
101.274 81.5802 mo
100.602 81.5802 100.07 81.8462 99.6782 82.3782 cv
99.2862 82.9102 99.0902 83.6242 99.0902 84.5342 cv
99.0902 85.4582 99.2722 86.1722 99.6642 86.7042 cv
100.056 87.2362 100.588 87.4882 101.274 87.4882 cv
101.946 87.4882 102.478 87.2362 102.87 86.7042 cv
103.262 86.1722 103.458 85.4582 103.458 84.5342 cv
103.458 83.6382 103.262 82.9102 102.87 82.3782 cv
102.478 81.8462 101.946 81.5802 101.274 81.5802 cv
101.274 80.5162 mo
102.366 80.5162 103.22 80.8802 103.85 81.5802 cv
104.466 82.2942 104.788 83.2742 104.788 84.5342 cv
104.788 85.7942 104.466 86.7742 103.85 87.4742 cv
103.22 88.1882 102.366 88.5382 101.274 88.5382 cv
100.168 88.5382 99.3002 88.1882 98.6842 87.4742 cv
98.0682 86.7742 97.7602 85.7942 97.7602 84.5342 cv
97.7602 83.2742 98.0682 82.2942 98.6842 81.5802 cv
99.3002 80.8802 100.168 80.5162 101.274 80.5162 cv
f
112.838 82.1682 mo
113.146 81.6082 113.524 81.2022 113.958 80.9222 cv
114.392 80.6562 114.91 80.5162 115.512 80.5162 cv
116.296 80.5162 116.912 80.7962 117.346 81.3562 cv
117.78 81.9162 118.004 82.7142 118.004 83.7362 cv
118.004 88.3562 li
116.744 88.3562 li
116.744 83.7782 li
116.744 83.0502 116.604 82.5042 116.352 82.1402 cv
116.086 81.7902 115.694 81.6082 115.162 81.6082 cv
114.504 81.6082 113.986 81.8322 113.608 82.2662 cv
113.23 82.7002 113.048 83.2882 113.048 84.0302 cv
113.048 88.3562 li
111.788 88.3562 li
111.788 83.7782 li
111.788 83.0502 111.648 82.5042 111.396 82.1402 cv
111.13 81.7902 110.724 81.6082 110.192 81.6082 cv
109.548 81.6082 109.03 81.8322 108.652 82.2662 cv
108.274 82.7002 108.092 83.2882 108.092 84.0302 cv
108.092 88.3562 li
106.832 88.3562 li
106.832 80.6982 li
108.092 80.6982 li
108.092 81.8882 li
108.372 81.4262 108.722 81.0762 109.128 80.8522 cv
109.52 80.6282 109.996 80.5162 110.556 80.5162 cv
111.116 80.5162 111.578 80.6562 111.97 80.9362 cv
112.362 81.2162 112.642 81.6362 112.838 82.1682 cv
f
126.214 97.5555 mo
122.714 97.5555 li
f
126.214 97.5555 mo
122.714 97.5555 li
@
17.4664 101.728 mo
17.4664 105.774 li
16.2064 105.774 li
16.2064 95.2178 li
17.4664 95.2178 li
17.4664 96.3798 li
17.7184 95.9318 18.0544 95.5958 18.4604 95.3718 cv
18.8664 95.1478 19.3564 95.0358 19.9164 95.0358 cv
20.8404 95.0358 21.5964 95.4138 22.1844 96.1418 cv
22.7584 96.8838 23.0524 97.8498 23.0524 99.0538 cv
23.0524 100.258 22.7584 101.238 22.1844 101.966 cv
21.5964 102.694 20.8404 103.058 19.9164 103.058 cv
19.3564 103.058 18.8664 102.946 18.4604 102.736 cv
18.0544 102.526 17.7184 102.19 17.4664 101.728 cv
21.7504 99.0538 mo
21.7504 98.1298 21.5544 97.4158 21.1764 96.8838 cv
20.7844 96.3518 20.2664 96.0858 19.6084 96.0858 cv
18.9364 96.0858 18.4184 96.3518 18.0404 96.8838 cv
17.6484 97.4158 17.4664 98.1298 17.4664 99.0538 cv
17.4664 99.9778 17.6484 100.706 18.0404 101.238 cv
18.4184 101.77 18.9364 102.022 19.6084 102.022 cv
20.2664 102.022 20.7844 101.77 21.1764 101.238 cv
21.5544 100.706 21.7504 99.9778 21.7504 99.0538 cv
f
28.6244 99.0258 mo
27.6024 99.0258 26.9024 99.1518 26.5104 99.3758 cv
26.1184 99.6138 25.9224 100.006 25.9224 100.566 cv
25.9224 101.014 26.0624 101.378 26.3564 101.63 cv
26.6504 101.896 27.0564 102.022 27.5604 102.022 cv
28.2604 102.022 28.8204 101.784 29.2404 101.28 cv
29.6604 100.79 29.8704 100.132 29.8704 99.3058 cv
29.8704 99.0258 li
28.6244 99.0258 li
31.1304 98.5078 mo
31.1304 102.876 li
29.8704 102.876 li
29.8704 101.714 li
29.5764 102.19 29.2124 102.526 28.7924 102.736 cv
28.3724 102.946 27.8404 103.058 27.2244 103.058 cv
26.4404 103.058 25.8104 102.848 25.3484 102.414 cv
24.8864 101.98 24.6624 101.392 24.6624 100.65 cv
24.6624 99.7958 24.9424 99.1518 25.5304 98.7038 cv
26.1044 98.2698 26.9584 98.0458 28.1064 98.0458 cv
29.8704 98.0458 li
29.8704 97.9198 li
29.8704 97.3458 29.6744 96.8978 29.2964 96.5758 cv
28.9184 96.2678 28.3864 96.0998 27.7004 96.0998 cv
27.2524 96.0998 26.8324 96.1558 26.4124 96.2678 cv
25.9924 96.3798 25.6004 96.5338 25.2224 96.7298 cv
25.2224 95.5678 li
25.6704 95.3998 26.1184 95.2598 26.5524 95.1758 cv
26.9864 95.0918 27.4064 95.0358 27.8264 95.0358 cv
28.9324 95.0358 29.7584 95.3298 30.3044 95.9038 cv
30.8504 96.4778 31.1304 97.3458 31.1304 98.5078 cv
f
40.0904 98.2558 mo
40.0904 102.876 li
38.8304 102.876 li
38.8304 98.2978 li
38.8304 97.5698 38.6764 97.0378 38.3964 96.6738 cv
38.1164 96.3098 37.6964 96.1278 37.1364 96.1278 cv
36.4504 96.1278 35.9184 96.3518 35.5264 96.7858 cv
35.1344 97.2198 34.9384 97.8078 34.9384 98.5498 cv
34.9384 102.876 li
33.6784 102.876 li
33.6784 95.2178 li
34.9384 95.2178 li
34.9384 96.4078 li
35.2324 95.9598 35.5824 95.6098 36.0024 95.3858 cv
36.4084 95.1618 36.8844 95.0358 37.4164 95.0358 cv
38.2844 95.0358 38.9564 95.3158 39.4044 95.8618 cv
39.8524 96.4078 40.0904 97.2058 40.0904 98.2558 cv
f
42.7784 101.14 mo
44.2204 101.14 li
44.2204 102.876 li
42.7784 102.876 li
42.7784 101.14 li
f
52.5504 99.0538 mo
52.5504 98.1298 52.3544 97.4158 51.9764 96.8838 cv
51.5844 96.3518 51.0664 96.0858 50.4084 96.0858 cv
49.7364 96.0858 49.2184 96.3518 48.8404 96.8838 cv
48.4484 97.4158 48.2664 98.1298 48.2664 99.0538 cv
48.2664 99.9778 48.4484 100.706 48.8404 101.238 cv
49.2184 101.77 49.7364 102.022 50.4084 102.022 cv
51.0664 102.022 51.5844 101.77 51.9764 101.238 cv
52.3544 100.706 52.5504 99.9778 52.5504 99.0538 cv
48.2664 96.3798 mo
48.5184 95.9318 48.8544 95.5958 49.2604 95.3718 cv
49.6664 95.1478 50.1564 95.0358 50.7164 95.0358 cv
51.6404 95.0358 52.3964 95.4138 52.9844 96.1418 cv
53.5584 96.8838 53.8524 97.8498 53.8524 99.0538 cv
53.8524 100.258 53.5584 101.238 52.9844 101.966 cv
52.3964 102.694 51.6404 103.058 50.7164 103.058 cv
50.1564 103.058 49.6664 102.946 49.2604 102.736 cv
48.8544 102.526 48.5184 102.19 48.2664 101.728 cv
48.2664 102.876 li
47.0064 102.876 li
47.0064 92.2358 li
48.2664 92.2358 li
48.2664 96.3798 li
f
59.4244 99.0258 mo
58.4024 99.0258 57.7024 99.1518 57.3104 99.3758 cv
56.9184 99.6138 56.7224 100.006 56.7224 100.566 cv
56.7224 101.014 56.8624 101.378 57.1564 101.63 cv
57.4504 101.896 57.8564 102.022 58.3604 102.022 cv
59.0604 102.022 59.6204 101.784 60.0404 101.28 cv
60.4604 100.79 60.6704 100.132 60.6704 99.3058 cv
60.6704 99.0258 li
59.4244 99.0258 li
61.9304 98.5078 mo
61.9304 102.876 li
60.6704 102.876 li
60.6704 101.714 li
60.3764 102.19 60.0124 102.526 59.5924 102.736 cv
59.1724 102.946 58.6404 103.058 58.0244 103.058 cv
57.2404 103.058 56.6104 102.848 56.1484 102.414 cv
55.6864 101.98 55.4624 101.392 55.4624 100.65 cv
55.4624 99.7958 55.7424 99.1518 56.3304 98.7038 cv
56.9044 98.2698 57.7584 98.0458 58.9064 98.0458 cv
60.6704 98.0458 li
60.6704 97.9198 li
60.6704 97.3458 60.4744 96.8978 60.0964 96.5758 cv
59.7184 96.2678 59.1864 96.0998 58.5004 96.0998 cv
58.0524 96.0998 57.6324 96.1558 57.2124 96.2678 cv
56.7924 96.3798 56.4004 96.5338 56.0224 96.7298 cv
56.0224 95.5678 li
56.4704 95.3998 56.9184 95.2598 57.3524 95.1758 cv
57.7864 95.0918 58.2064 95.0358 58.6264 95.0358 cv
59.7324 95.0358 60.5584 95.3298 61.1044 95.9038 cv
61.6504 96.4778 61.9304 97.3458 61.9304 98.5078 cv
f
64.5204 95.2178 mo
65.7804 95.2178 li
65.7804 102.876 li
64.5204 102.876 li
64.5204 95.2178 li
64.5204 92.2358 mo
65.7804 92.2358 li
65.7804 93.8318 li
64.5204 93.8318 li
64.5204 92.2358 li
f
73.4524 96.3798 mo
73.4524 92.2358 li
74.7124 92.2358 li
74.7124 102.876 li
73.4524 102.876 li
73.4524 101.728 li
73.1864 102.19 72.8504 102.526 72.4444 102.736 cv
72.0384 102.946 71.5624 103.058 71.0024 103.058 cv
70.0784 103.058 69.3224 102.694 68.7344 101.966 cv
68.1464 101.238 67.8664 100.258 67.8664 99.0538 cv
67.8664 97.8498 68.1464 96.8838 68.7344 96.1418 cv
69.3224 95.4138 70.0784 95.0358 71.0024 95.0358 cv
71.5624 95.0358 72.0384 95.1478 72.4444 95.3718 cv
72.8504 95.5958 73.1864 95.9318 73.4524 96.3798 cv
69.1684 99.0538 mo
69.1684 99.9778 69.3504 100.706 69.7284 101.238 cv
70.1064 101.77 70.6384 102.022 71.3104 102.022 cv
71.9684 102.022 72.4864 101.77 72.8784 101.238 cv
73.2564 100.706 73.4524 99.9778 73.4524 99.0538 cv
73.4524 98.1298 73.2564 97.4158 72.8784 96.8838 cv
72.4864 96.3518 71.9684 96.0858 71.3104 96.0858 cv
70.6384 96.0858 70.1064 96.3518 69.7284 96.8838 cv
69.3504 97.4158 69.1684 98.1298 69.1684 99.0538 cv
f
77.1764 99.8518 mo
77.1764 95.2178 li
78.4364 95.2178 li
78.4364 99.8098 li
78.4364 100.538 78.5764 101.07 78.8564 101.434 cv
79.1364 101.798 79.5564 101.98 80.1304 101.98 cv
80.8024 101.98 81.3484 101.77 81.7404 101.336 cv
82.1324 100.902 82.3284 100.314 82.3284 99.5578 cv
82.3284 95.2178 li
83.5884 95.2178 li
83.5884 102.876 li
82.3284 102.876 li
82.3284 101.7 li
82.0204 102.176 81.6564 102.512 81.2644 102.736 cv
80.8584 102.946 80.3964 103.058 79.8644 103.058 cv
78.9824 103.058 78.3104 102.792 77.8624 102.246 cv
77.4004 101.714 77.1764 100.916 77.1764 99.8518 cv
80.3404 95.0358 mo
80.3404 95.0358 li
f
86.3604 101.14 mo
87.8024 101.14 li
87.8024 102.876 li
86.3604 102.876 li
86.3604 101.14 li
f
96.1464 95.5118 mo
96.1464 96.6878 li
95.7824 96.4918 95.4324 96.3518 95.0684 96.2538 cv
94.7044 96.1558 94.3544 96.0998 93.9904 96.0998 cv
93.1784 96.0998 92.5344 96.3658 92.0864 96.8838 cv
91.6384 97.4018 91.4144 98.1298 91.4144 99.0538 cv
91.4144 99.9918 91.6384 100.72 92.0864 101.238 cv
92.5344 101.756 93.1784 102.008 93.9904 102.008 cv
94.3544 102.008 94.7044 101.966 95.0684 101.868 cv
95.4324 101.77 95.7824 101.616 96.1464 101.42 cv
96.1464 102.582 li
95.7824 102.75 95.4184 102.876 95.0544 102.946 cv
94.6764 103.016 94.2704 103.058 93.8504 103.058 cv
92.7024 103.058 91.7784 102.708 91.1064 101.98 cv
90.4204 101.266 90.0844 100.286 90.0844 99.0538 cv
90.0844 97.8078 90.4204 96.8278 91.1064 96.1138 cv
91.7924 95.3998 92.7304 95.0358 93.9344 95.0358 cv
94.3264 95.0358 94.7044 95.0778 95.0684 95.1618 cv
95.4324 95.2458 95.7964 95.3578 96.1464 95.5118 cv
f
101.298 96.0998 mo
100.626 96.0998 100.094 96.3658 99.7024 96.8978 cv
99.3104 97.4298 99.1144 98.1438 99.1144 99.0538 cv
99.1144 99.9778 99.2964 100.692 99.6884 101.224 cv
100.08 101.756 100.612 102.008 101.298 102.008 cv
101.97 102.008 102.502 101.756 102.894 101.224 cv
103.286 100.692 103.482 99.9778 103.482 99.0538 cv
103.482 98.1578 103.286 97.4298 102.894 96.8978 cv
102.502 96.3658 101.97 96.0998 101.298 96.0998 cv
101.298 95.0358 mo
102.39 95.0358 103.244 95.3998 103.874 96.0998 cv
104.49 96.8138 104.812 97.7938 104.812 99.0538 cv
104.812 100.314 104.49 101.294 103.874 101.994 cv
103.244 102.708 102.39 103.058 101.298 103.058 cv
100.192 103.058 99.3244 102.708 98.7084 101.994 cv
98.0924 101.294 97.7844 100.314 97.7844 99.0538 cv
97.7844 97.7938 98.0924 96.8138 98.7084 96.0998 cv
99.3244 95.3998 100.192 95.0358 101.298 95.0358 cv
f
112.862 96.6878 mo
113.17 96.1278 113.548 95.7218 113.982 95.4418 cv
114.416 95.1758 114.934 95.0358 115.536 95.0358 cv
116.32 95.0358 116.936 95.3158 117.37 95.8758 cv
117.804 96.4358 118.028 97.2338 118.028 98.2558 cv
118.028 102.876 li
116.768 102.876 li
116.768 98.2978 li
116.768 97.5698 116.628 97.0238 116.376 96.6598 cv
116.11 96.3098 115.718 96.1278 115.186 96.1278 cv
114.528 96.1278 114.01 96.3518 113.632 96.7858 cv
113.254 97.2198 113.072 97.8078 113.072 98.5498 cv
113.072 102.876 li
111.812 102.876 li
111.812 98.2978 li
111.812 97.5698 111.672 97.0238 111.42 96.6598 cv
111.154 96.3098 110.748 96.1278 110.216 96.1278 cv
109.572 96.1278 109.054 96.3518 108.676 96.7858 cv
108.298 97.2198 108.116 97.8078 108.116 98.5498 cv
108.116 102.876 li
106.856 102.876 li
106.856 95.2178 li
108.116 95.2178 li
108.116 96.4078 li
108.396 95.9458 108.746 95.5958 109.152 95.3718 cv
109.544 95.1478 110.02 95.0358 110.58 95.0358 cv
111.14 95.0358 111.602 95.1758 111.994 95.4558 cv
112.386 95.7358 112.666 96.1558 112.862 96.6878 cv
f
126.214 112.075 mo
122.714 112.075 li
f
126.214 112.075 mo
122.714 112.075 li
@
19.0602 116.247 mo
19.0602 120.294 li
17.8002 120.294 li
17.8002 109.738 li
19.0602 109.738 li
19.0602 110.9 li
19.3122 110.451 19.6482 110.115 20.0542 109.891 cv
20.4602 109.667 20.9502 109.555 21.5102 109.555 cv
22.4342 109.555 23.1902 109.934 23.7782 110.661 cv
24.3522 111.404 24.6462 112.369 24.6462 113.574 cv
24.6462 114.777 24.3522 115.757 23.7782 116.486 cv
23.1902 117.214 22.4342 117.577 21.5102 117.577 cv
20.9502 117.577 20.4602 117.465 20.0542 117.255 cv
19.6482 117.046 19.3122 116.71 19.0602 116.247 cv
23.3442 113.574 mo
23.3442 112.65 23.1482 111.936 22.7702 111.404 cv
22.3782 110.872 21.8602 110.605 21.2022 110.605 cv
20.5302 110.605 20.0122 110.872 19.6342 111.404 cv
19.2422 111.936 19.0602 112.65 19.0602 113.574 cv
19.0602 114.497 19.2422 115.225 19.6342 115.757 cv
20.0122 116.29 20.5302 116.542 21.2022 116.542 cv
21.8602 116.542 22.3782 116.29 22.7702 115.757 cv
23.1482 115.225 23.3442 114.497 23.3442 113.574 cv
f
29.7002 110.619 mo
29.0282 110.619 28.4962 110.885 28.1042 111.417 cv
27.7122 111.949 27.5162 112.663 27.5162 113.574 cv
27.5162 114.497 27.6982 115.212 28.0902 115.743 cv
28.4822 116.275 29.0142 116.527 29.7002 116.527 cv
30.3722 116.527 30.9042 116.275 31.2962 115.743 cv
31.6882 115.212 31.8842 114.497 31.8842 113.574 cv
31.8842 112.678 31.6882 111.949 31.2962 111.417 cv
30.9042 110.885 30.3722 110.619 29.7002 110.619 cv
29.7002 109.555 mo
30.7922 109.555 31.6462 109.919 32.2762 110.619 cv
32.8922 111.333 33.2142 112.313 33.2142 113.574 cv
33.2142 114.833 32.8922 115.813 32.2762 116.514 cv
31.6462 117.227 30.7922 117.577 29.7002 117.577 cv
28.5942 117.577 27.7262 117.227 27.1102 116.514 cv
26.4942 115.813 26.1862 114.833 26.1862 113.574 cv
26.1862 112.313 26.4942 111.333 27.1102 110.619 cv
27.7262 109.919 28.5942 109.555 29.7002 109.555 cv
f
40.1862 109.962 mo
40.1862 111.152 li
39.8222 110.984 39.4582 110.844 39.0802 110.745 cv
38.6882 110.661 38.2962 110.605 37.8902 110.605 cv
37.2602 110.605 36.7842 110.704 36.4762 110.9 cv
36.1682 111.096 36.0142 111.376 36.0142 111.753 cv
36.0142 112.048 36.1262 112.271 36.3502 112.439 cv
36.5742 112.607 37.0222 112.775 37.6942 112.915 cv
38.1282 113.014 li
39.0242 113.21 39.6542 113.49 40.0322 113.826 cv
40.3962 114.176 40.5922 114.665 40.5922 115.281 cv
40.5922 115.995 40.3122 116.555 39.7522 116.962 cv
39.1922 117.382 38.4082 117.577 37.4282 117.577 cv
37.0082 117.577 36.5882 117.535 36.1402 117.465 cv
35.6922 117.395 35.2302 117.283 34.7402 117.115 cv
34.7402 115.813 li
35.2022 116.066 35.6642 116.247 36.1122 116.359 cv
36.5602 116.486 37.0082 116.542 37.4562 116.542 cv
38.0442 116.542 38.5062 116.443 38.8282 116.247 cv
39.1362 116.051 39.3042 115.757 39.3042 115.38 cv
39.3042 115.044 39.1782 114.777 38.9542 114.596 cv
38.7302 114.413 38.2262 114.232 37.4422 114.063 cv
37.0082 113.965 li
36.2242 113.798 35.6502 113.546 35.3142 113.21 cv
34.9642 112.874 34.7962 112.411 34.7962 111.809 cv
34.7962 111.096 35.0482 110.535 35.5522 110.143 cv
36.0562 109.751 36.7842 109.555 37.7362 109.555 cv
38.1982 109.555 38.6322 109.598 39.0522 109.667 cv
39.4582 109.738 39.8362 109.835 40.1862 109.962 cv
f
42.7762 115.66 mo
44.2182 115.66 li
44.2182 117.395 li
42.7762 117.395 li
42.7762 115.66 li
f
52.5482 113.574 mo
52.5482 112.65 52.3522 111.936 51.9742 111.404 cv
51.5822 110.872 51.0642 110.605 50.4062 110.605 cv
49.7342 110.605 49.2162 110.872 48.8382 111.404 cv
48.4462 111.936 48.2642 112.65 48.2642 113.574 cv
48.2642 114.497 48.4462 115.225 48.8382 115.757 cv
49.2162 116.29 49.7342 116.542 50.4062 116.542 cv
51.0642 116.542 51.5822 116.29 51.9742 115.757 cv
52.3522 115.225 52.5482 114.497 52.5482 113.574 cv
48.2642 110.9 mo
48.5162 110.451 48.8522 110.115 49.2582 109.891 cv
49.6642 109.667 50.1542 109.555 50.7142 109.555 cv
51.6382 109.555 52.3942 109.934 52.9822 110.661 cv
53.5562 111.404 53.8502 112.369 53.8502 113.574 cv
53.8502 114.777 53.5562 115.757 52.9822 116.486 cv
52.3942 117.214 51.6382 117.577 50.7142 117.577 cv
50.1542 117.577 49.6642 117.465 49.2582 117.255 cv
48.8522 117.046 48.5162 116.71 48.2642 116.247 cv
48.2642 117.395 li
47.0042 117.395 li
47.0042 106.755 li
48.2642 106.755 li
48.2642 110.9 li
f
59.4222 113.546 mo
58.4002 113.546 57.7002 113.671 57.3082 113.895 cv
56.9162 114.133 56.7202 114.525 56.7202 115.085 cv
56.7202 115.533 56.8602 115.898 57.1542 116.15 cv
57.4482 116.415 57.8542 116.542 58.3582 116.542 cv
59.0582 116.542 59.6182 116.303 60.0382 115.799 cv
60.4582 115.309 60.6682 114.652 60.6682 113.826 cv
60.6682 113.546 li
59.4222 113.546 li
61.9282 113.027 mo
61.9282 117.395 li
60.6682 117.395 li
60.6682 116.234 li
60.3742 116.71 60.0102 117.046 59.5902 117.255 cv
59.1702 117.465 58.6382 117.577 58.0222 117.577 cv
57.2382 117.577 56.6082 117.367 56.1462 116.934 cv
55.6842 116.499 55.4602 115.911 55.4602 115.169 cv
55.4602 114.316 55.7402 113.671 56.3282 113.223 cv
56.9022 112.79 57.7562 112.566 58.9042 112.566 cv
60.6682 112.566 li
60.6682 112.439 li
60.6682 111.865 60.4722 111.417 60.0942 111.096 cv
59.7162 110.788 59.1842 110.619 58.4982 110.619 cv
58.0502 110.619 57.6302 110.676 57.2102 110.788 cv
56.7902 110.9 56.3982 111.053 56.0202 111.249 cv
56.0202 110.087 li
56.4682 109.919 56.9162 109.779 57.3502 109.695 cv
57.7842 109.611 58.2042 109.555 58.6242 109.555 cv
59.7302 109.555 60.5562 109.85 61.1022 110.423 cv
61.6482 110.997 61.9282 111.865 61.9282 113.027 cv
f
64.5182 109.738 mo
65.7782 109.738 li
65.7782 117.395 li
64.5182 117.395 li
64.5182 109.738 li
64.5182 106.755 mo
65.7782 106.755 li
65.7782 108.352 li
64.5182 108.352 li
64.5182 106.755 li
f
73.4502 110.9 mo
73.4502 106.755 li
74.7102 106.755 li
74.7102 117.395 li
73.4502 117.395 li
73.4502 116.247 li
73.1842 116.71 72.8482 117.046 72.4422 117.255 cv
72.0362 117.465 71.5602 117.577 71.0002 117.577 cv
70.0762 117.577 69.3202 117.214 68.7322 116.486 cv
68.1442 115.757 67.8642 114.777 67.8642 113.574 cv
67.8642 112.369 68.1442 111.404 68.7322 110.661 cv
69.3202 109.934 70.0762 109.555 71.0002 109.555 cv
71.5602 109.555 72.0362 109.667 72.4422 109.891 cv
72.8482 110.115 73.1842 110.451 73.4502 110.9 cv
69.1662 113.574 mo
69.1662 114.497 69.3482 115.225 69.7262 115.757 cv
70.1042 116.29 70.6362 116.542 71.3082 116.542 cv
71.9662 116.542 72.4842 116.29 72.8762 115.757 cv
73.2542 115.225 73.4502 114.497 73.4502 113.574 cv
73.4502 112.65 73.2542 111.936 72.8762 111.404 cv
72.4842 110.872 71.9662 110.605 71.3082 110.605 cv
70.6362 110.605 70.1042 110.872 69.7262 111.404 cv
69.3482 111.936 69.1662 112.65 69.1662 113.574 cv
f
77.1742 114.372 mo
77.1742 109.738 li
78.4342 109.738 li
78.4342 114.329 li
78.4342 115.057 78.5742 115.589 78.8542 115.954 cv
79.1342 116.318 79.5542 116.499 80.1282 116.499 cv
80.8002 116.499 81.3462 116.29 81.7382 115.855 cv
82.1302 115.421 82.3262 114.833 82.3262 114.077 cv
82.3262 109.738 li
83.5862 109.738 li
83.5862 117.395 li
82.3262 117.395 li
82.3262 116.219 li
82.0182 116.695 81.6542 117.031 81.2622 117.255 cv
80.8562 117.465 80.3942 117.577 79.8622 117.577 cv
78.9802 117.577 78.3082 117.311 77.8602 116.766 cv
77.3982 116.234 77.1742 115.436 77.1742 114.372 cv
80.3382 109.555 mo
80.3382 109.555 li
f
86.3582 115.66 mo
87.8002 115.66 li
87.8002 117.395 li
86.3582 117.395 li
86.3582 115.66 li
f
96.1442 110.031 mo
96.1442 111.208 li
95.7802 111.012 95.4302 110.872 95.0662 110.773 cv
94.7022 110.676 94.3522 110.619 93.9882 110.619 cv
93.1762 110.619 92.5322 110.885 92.0842 111.404 cv
91.6362 111.921 91.4122 112.65 91.4122 113.574 cv
91.4122 114.512 91.6362 115.24 92.0842 115.757 cv
92.5322 116.275 93.1762 116.527 93.9882 116.527 cv
94.3522 116.527 94.7022 116.486 95.0662 116.387 cv
95.4302 116.29 95.7802 116.135 96.1442 115.939 cv
96.1442 117.102 li
95.7802 117.27 95.4162 117.395 95.0522 117.465 cv
94.6742 117.535 94.2682 117.577 93.8482 117.577 cv
92.7002 117.577 91.7762 117.227 91.1042 116.499 cv
90.4182 115.785 90.0822 114.805 90.0822 113.574 cv
90.0822 112.327 90.4182 111.348 91.1042 110.633 cv
91.7902 109.919 92.7282 109.555 93.9322 109.555 cv
94.3242 109.555 94.7022 109.598 95.0662 109.682 cv
95.4302 109.766 95.7942 109.878 96.1442 110.031 cv
f
101.296 110.619 mo
100.624 110.619 100.092 110.885 99.7002 111.417 cv
99.3082 111.949 99.1122 112.663 99.1122 113.574 cv
99.1122 114.497 99.2942 115.212 99.6862 115.743 cv
100.078 116.275 100.61 116.527 101.296 116.527 cv
101.968 116.527 102.5 116.275 102.892 115.743 cv
103.284 115.212 103.48 114.497 103.48 113.574 cv
103.48 112.678 103.284 111.949 102.892 111.417 cv
102.5 110.885 101.968 110.619 101.296 110.619 cv
101.296 109.555 mo
102.388 109.555 103.242 109.919 103.872 110.619 cv
104.488 111.333 104.81 112.313 104.81 113.574 cv
104.81 114.833 104.488 115.813 103.872 116.514 cv
103.242 117.227 102.388 117.577 101.296 117.577 cv
100.19 117.577 99.3222 117.227 98.7062 116.514 cv
98.0902 115.813 97.7822 114.833 97.7822 113.574 cv
97.7822 112.313 98.0902 111.333 98.7062 110.619 cv
99.3222 109.919 100.19 109.555 101.296 109.555 cv
f
112.86 111.208 mo
113.168 110.648 113.546 110.242 113.98 109.962 cv
114.414 109.695 114.932 109.555 115.534 109.555 cv
116.318 109.555 116.934 109.835 117.368 110.395 cv
117.802 110.956 118.026 111.753 118.026 112.775 cv
118.026 117.395 li
116.766 117.395 li
116.766 112.818 li
116.766 112.089 116.626 111.544 116.374 111.18 cv
116.108 110.829 115.716 110.648 115.184 110.648 cv
114.526 110.648 114.008 110.872 113.63 111.305 cv
113.252 111.74 113.07 112.327 113.07 113.07 cv
113.07 117.395 li
111.81 117.395 li
111.81 112.818 li
111.81 112.089 111.67 111.544 111.418 111.18 cv
111.152 110.829 110.746 110.648 110.214 110.648 cv
109.57 110.648 109.052 110.872 108.674 111.305 cv
108.296 111.74 108.114 112.327 108.114 113.07 cv
108.114 117.395 li
106.854 117.395 li
106.854 109.738 li
108.114 109.738 li
108.114 110.928 li
108.394 110.465 108.744 110.115 109.15 109.891 cv
109.542 109.667 110.018 109.555 110.578 109.555 cv
111.138 109.555 111.6 109.695 111.992 109.975 cv
112.384 110.255 112.664 110.676 112.86 111.208 cv
f
126.214 126.595 mo
122.714 126.595 li
f
126.214 126.595 mo
122.714 126.595 li
@
37.6138 128.093 mo
37.6138 129.017 37.7958 129.745 38.1738 130.277 cv
38.5518 130.809 39.0838 131.061 39.7558 131.061 cv
40.4138 131.061 40.9318 130.809 41.3238 130.277 cv
41.7018 129.745 41.8978 129.017 41.8978 128.093 cv
41.8978 127.169 41.7018 126.455 41.3238 125.923 cv
40.9318 125.391 40.4138 125.125 39.7558 125.125 cv
39.0838 125.125 38.5518 125.391 38.1738 125.923 cv
37.7958 126.455 37.6138 127.169 37.6138 128.093 cv
41.8978 130.767 mo
41.6318 131.229 41.2958 131.565 40.8898 131.775 cv
40.4838 131.985 40.0078 132.097 39.4478 132.097 cv
38.5238 132.097 37.7678 131.733 37.1798 131.005 cv
36.5918 130.277 36.3118 129.297 36.3118 128.093 cv
36.3118 126.889 36.5918 125.923 37.1798 125.181 cv
37.7678 124.453 38.5238 124.075 39.4478 124.075 cv
40.0078 124.075 40.4838 124.187 40.8898 124.411 cv
41.2958 124.635 41.6318 124.971 41.8978 125.419 cv
41.8978 124.257 li
43.1578 124.257 li
43.1578 134.813 li
41.8978 134.813 li
41.8978 130.767 li
f
45.7478 124.257 mo
47.0078 124.257 li
47.0078 131.915 li
45.7478 131.915 li
45.7478 124.257 li
45.7478 121.275 mo
47.0078 121.275 li
47.0078 122.871 li
45.7478 122.871 li
45.7478 121.275 li
f
56.0098 127.295 mo
56.0098 131.915 li
54.7498 131.915 li
54.7498 127.337 li
54.7498 126.609 54.5958 126.077 54.3158 125.713 cv
54.0358 125.349 53.6158 125.167 53.0558 125.167 cv
52.3698 125.167 51.8378 125.391 51.4458 125.825 cv
51.0538 126.259 50.8578 126.847 50.8578 127.589 cv
50.8578 131.915 li
49.5978 131.915 li
49.5978 124.257 li
50.8578 124.257 li
50.8578 125.447 li
51.1518 124.999 51.5018 124.649 51.9218 124.425 cv
52.3278 124.201 52.8038 124.075 53.3358 124.075 cv
54.2038 124.075 54.8758 124.355 55.3238 124.901 cv
55.7718 125.447 56.0098 126.245 56.0098 127.295 cv
f
63.5558 127.995 mo
63.5558 127.099 63.3598 126.385 62.9958 125.881 cv
62.6178 125.377 62.0858 125.125 61.4138 125.125 cv
60.7418 125.125 60.2098 125.377 59.8318 125.881 cv
59.4538 126.385 59.2718 127.099 59.2718 127.995 cv
59.2718 128.905 59.4538 129.605 59.8318 130.109 cv
60.2098 130.613 60.7418 130.865 61.4138 130.865 cv
62.0858 130.865 62.6178 130.613 62.9958 130.109 cv
63.3598 129.605 63.5558 128.905 63.5558 127.995 cv
64.8158 130.963 mo
64.8158 132.251 64.5218 133.217 63.9478 133.861 cv
63.3598 134.491 62.4778 134.813 61.2878 134.813 cv
60.8398 134.813 60.4338 134.771 60.0418 134.715 cv
59.6498 134.645 59.2578 134.547 58.8938 134.407 cv
58.8938 133.189 li
59.2578 133.385 59.6218 133.525 59.9858 133.623 cv
60.3498 133.721 60.7138 133.777 61.0918 133.777 cv
61.9038 133.777 62.5198 133.553 62.9398 133.133 cv
63.3458 132.699 63.5558 132.055 63.5558 131.187 cv
63.5558 130.571 li
63.2898 131.019 62.9538 131.355 62.5478 131.579 cv
62.1418 131.803 61.6658 131.915 61.1058 131.915 cv
60.1538 131.915 59.3978 131.565 58.8238 130.851 cv
58.2498 130.137 57.9698 129.185 57.9698 127.995 cv
57.9698 126.819 58.2498 125.867 58.8238 125.153 cv
59.3978 124.439 60.1538 124.075 61.1058 124.075 cv
61.6658 124.075 62.1418 124.187 62.5478 124.411 cv
62.9538 124.635 63.2898 124.971 63.5558 125.419 cv
63.5558 124.257 li
64.8158 124.257 li
64.8158 130.963 li
f
67.5878 130.179 mo
69.0298 130.179 li
69.0298 131.915 li
67.5878 131.915 li
67.5878 130.179 li
f
71.1298 124.257 mo
72.3898 124.257 li
73.9578 130.235 li
75.5258 124.257 li
77.0098 124.257 li
78.5778 130.235 li
80.1458 124.257 li
81.4058 124.257 li
79.4038 131.915 li
77.9198 131.915 li
76.2678 125.643 li
74.6158 131.915 li
73.1318 131.915 li
71.1298 124.257 li
f
84.5278 130.767 mo
84.5278 134.813 li
83.2678 134.813 li
83.2678 124.257 li
84.5278 124.257 li
84.5278 125.419 li
84.7798 124.971 85.1158 124.635 85.5218 124.411 cv
85.9278 124.187 86.4178 124.075 86.9778 124.075 cv
87.9018 124.075 88.6578 124.453 89.2458 125.181 cv
89.8198 125.923 90.1138 126.889 90.1138 128.093 cv
90.1138 129.297 89.8198 130.277 89.2458 131.005 cv
88.6578 131.733 87.9018 132.097 86.9778 132.097 cv
86.4178 132.097 85.9278 131.985 85.5218 131.775 cv
85.1158 131.565 84.7798 131.229 84.5278 130.767 cv
88.8118 128.093 mo
88.8118 127.169 88.6158 126.455 88.2378 125.923 cv
87.8458 125.391 87.3278 125.125 86.6698 125.125 cv
85.9978 125.125 85.4798 125.391 85.1018 125.923 cv
84.7098 126.455 84.5278 127.169 84.5278 128.093 cv
84.5278 129.017 84.7098 129.745 85.1018 130.277 cv
85.4798 130.809 85.9978 131.061 86.6698 131.061 cv
87.3278 131.061 87.8458 130.809 88.2378 130.277 cv
88.6158 129.745 88.8118 129.017 88.8118 128.093 cv
f
97.0858 124.481 mo
97.0858 125.671 li
96.7218 125.503 96.3578 125.363 95.9798 125.265 cv
95.5878 125.181 95.1958 125.125 94.7898 125.125 cv
94.1598 125.125 93.6838 125.223 93.3758 125.419 cv
93.0678 125.615 92.9138 125.895 92.9138 126.273 cv
92.9138 126.567 93.0258 126.791 93.2498 126.959 cv
93.4738 127.127 93.9218 127.295 94.5938 127.435 cv
95.0278 127.533 li
95.9238 127.729 96.5538 128.009 96.9318 128.345 cv
97.2958 128.695 97.4918 129.185 97.4918 129.801 cv
97.4918 130.515 97.2118 131.075 96.6518 131.481 cv
96.0918 131.901 95.3078 132.097 94.3278 132.097 cv
93.9078 132.097 93.4878 132.055 93.0398 131.985 cv
92.5918 131.915 92.1298 131.803 91.6398 131.635 cv
91.6398 130.333 li
92.1018 130.585 92.5638 130.767 93.0118 130.879 cv
93.4598 131.005 93.9078 131.061 94.3558 131.061 cv
94.9438 131.061 95.4058 130.963 95.7278 130.767 cv
96.0358 130.571 96.2038 130.277 96.2038 129.899 cv
96.2038 129.563 96.0778 129.297 95.8538 129.115 cv
95.6298 128.933 95.1258 128.751 94.3418 128.583 cv
93.9078 128.485 li
93.1238 128.317 92.5498 128.065 92.2138 127.729 cv
91.8638 127.393 91.6958 126.931 91.6958 126.329 cv
91.6958 125.615 91.9478 125.055 92.4518 124.663 cv
92.9558 124.271 93.6838 124.075 94.6358 124.075 cv
95.0978 124.075 95.5318 124.117 95.9518 124.187 cv
96.3578 124.257 96.7358 124.355 97.0858 124.481 cv
f
99.6758 130.179 mo
101.118 130.179 li
101.118 131.915 li
99.6758 131.915 li
99.6758 130.179 li
f
109.462 124.551 mo
109.462 125.727 li
109.098 125.531 108.748 125.391 108.384 125.293 cv
108.02 125.195 107.67 125.139 107.306 125.139 cv
106.494 125.139 105.85 125.405 105.402 125.923 cv
104.954 126.441 104.73 127.169 104.73 128.093 cv
104.73 129.031 104.954 129.759 105.402 130.277 cv
105.85 130.795 106.494 131.047 107.306 131.047 cv
107.67 131.047 108.02 131.005 108.384 130.907 cv
108.748 130.809 109.098 130.655 109.462 130.459 cv
109.462 131.621 li
109.098 131.789 108.734 131.915 108.37 131.985 cv
107.992 132.055 107.586 132.097 107.166 132.097 cv
106.018 132.097 105.094 131.747 104.422 131.019 cv
103.736 130.305 103.4 129.325 103.4 128.093 cv
103.4 126.847 103.736 125.867 104.422 125.153 cv
105.108 124.439 106.046 124.075 107.25 124.075 cv
107.642 124.075 108.02 124.117 108.384 124.201 cv
108.748 124.285 109.112 124.397 109.462 124.551 cv
f
118.016 127.295 mo
118.016 131.915 li
116.756 131.915 li
116.756 127.337 li
116.756 126.609 116.602 126.077 116.322 125.713 cv
116.042 125.349 115.622 125.167 115.062 125.167 cv
114.376 125.167 113.844 125.391 113.452 125.825 cv
113.06 126.259 112.864 126.847 112.864 127.589 cv
112.864 131.915 li
111.604 131.915 li
111.604 124.257 li
112.864 124.257 li
112.864 125.447 li
113.158 124.999 113.508 124.649 113.928 124.425 cv
114.334 124.201 114.81 124.075 115.342 124.075 cv
116.21 124.075 116.882 124.355 117.33 124.901 cv
117.778 125.447 118.016 126.245 118.016 127.295 cv
f
126.214 141.115 mo
122.714 141.115 li
f
126.214 141.115 mo
122.714 141.115 li
@
65.9157 139.001 mo
65.9157 140.191 li
65.5517 140.023 65.1877 139.883 64.8097 139.785 cv
64.4177 139.701 64.0257 139.645 63.6197 139.645 cv
62.9897 139.645 62.5137 139.743 62.2057 139.939 cv
61.8977 140.135 61.7437 140.415 61.7437 140.793 cv
61.7437 141.087 61.8557 141.311 62.0797 141.479 cv
62.3037 141.647 62.7517 141.815 63.4237 141.955 cv
63.8577 142.053 li
64.7537 142.249 65.3837 142.529 65.7617 142.865 cv
66.1257 143.215 66.3217 143.705 66.3217 144.321 cv
66.3217 145.035 66.0417 145.595 65.4817 146.001 cv
64.9217 146.421 64.1377 146.617 63.1577 146.617 cv
62.7377 146.617 62.3177 146.575 61.8697 146.505 cv
61.4217 146.435 60.9597 146.323 60.4697 146.155 cv
60.4697 144.853 li
60.9317 145.105 61.3937 145.287 61.8417 145.399 cv
62.2897 145.525 62.7377 145.581 63.1857 145.581 cv
63.7737 145.581 64.2357 145.483 64.5577 145.287 cv
64.8657 145.091 65.0337 144.797 65.0337 144.419 cv
65.0337 144.083 64.9077 143.817 64.6837 143.635 cv
64.4597 143.453 63.9557 143.271 63.1717 143.103 cv
62.7377 143.005 li
61.9537 142.837 61.3797 142.585 61.0437 142.249 cv
60.6937 141.913 60.5257 141.451 60.5257 140.849 cv
60.5257 140.135 60.7777 139.575 61.2817 139.183 cv
61.7857 138.791 62.5137 138.595 63.4657 138.595 cv
63.9277 138.595 64.3617 138.637 64.7817 138.707 cv
65.1877 138.777 65.5657 138.875 65.9157 139.001 cv
f
68.5057 144.699 mo
69.9477 144.699 li
69.9477 146.435 li
68.5057 146.435 li
68.5057 144.699 li
f
77.1437 140.933 mo
77.8017 141.073 78.3197 141.367 78.6837 141.815 cv
79.0477 142.263 79.2437 142.823 79.2437 143.467 cv
79.2437 144.475 78.8937 145.259 78.2077 145.805 cv
77.5077 146.351 76.5277 146.617 75.2537 146.617 cv
74.8197 146.617 74.3717 146.575 73.9237 146.491 cv
73.4757 146.421 72.9997 146.295 72.5237 146.127 cv
72.5237 144.797 li
72.9017 145.021 73.3217 145.189 73.7837 145.301 cv
74.2317 145.413 74.7077 145.469 75.2117 145.469 cv
76.0797 145.469 76.7377 145.301 77.1857 144.965 cv
77.6337 144.629 77.8717 144.125 77.8717 143.467 cv
77.8717 142.879 77.6617 142.403 77.2417 142.067 cv
76.8217 141.731 76.2337 141.549 75.4777 141.549 cv
74.2877 141.549 li
74.2877 140.415 li
75.5337 140.415 li
76.2057 140.415 76.7237 140.289 77.0877 140.009 cv
77.4517 139.743 77.6337 139.351 77.6337 138.833 cv
77.6337 138.315 77.4377 137.909 77.0737 137.629 cv
76.6957 137.349 76.1637 137.209 75.4777 137.209 cv
75.0997 137.209 74.6937 137.251 74.2597 137.335 cv
73.8257 137.419 73.3497 137.545 72.8317 137.713 cv
72.8317 136.481 li
73.3497 136.341 73.8397 136.229 74.3017 136.159 cv
74.7497 136.089 75.1837 136.047 75.6037 136.047 cv
76.6397 136.047 77.4657 136.285 78.0817 136.761 cv
78.6977 137.237 79.0057 137.881 79.0057 138.693 cv
79.0057 139.253 78.8377 139.729 78.5157 140.121 cv
78.1937 140.513 77.7317 140.793 77.1437 140.933 cv
f
84.9837 140.779 mo
84.3677 140.779 83.8777 141.003 83.5137 141.423 cv
83.1497 141.843 82.9677 142.431 82.9677 143.159 cv
82.9677 143.901 83.1497 144.489 83.5137 144.909 cv
83.8777 145.329 84.3677 145.539 84.9837 145.539 cv
85.5997 145.539 86.0897 145.329 86.4537 144.909 cv
86.8177 144.489 86.9997 143.901 86.9997 143.159 cv
86.9997 142.431 86.8177 141.843 86.4537 141.423 cv
86.0897 141.003 85.5997 140.779 84.9837 140.779 cv
87.7277 136.453 mo
87.7277 137.713 li
87.3777 137.545 87.0277 137.419 86.6777 137.335 cv
86.3137 137.251 85.9637 137.209 85.6277 137.209 cv
84.7037 137.209 84.0037 137.517 83.5277 138.133 cv
83.0517 138.749 82.7717 139.687 82.7157 140.919 cv
82.9817 140.527 83.3177 140.219 83.7237 140.009 cv
84.1297 139.799 84.5777 139.687 85.0677 139.687 cv
86.0897 139.687 86.9017 140.009 87.4897 140.625 cv
88.0777 141.241 88.3857 142.095 88.3857 143.159 cv
88.3857 144.209 88.0637 145.049 87.4477 145.679 cv
86.8317 146.309 86.0057 146.617 84.9837 146.617 cv
83.8077 146.617 82.8977 146.169 82.2817 145.273 cv
81.6517 144.377 81.3437 143.061 81.3437 141.339 cv
81.3437 139.729 81.7217 138.441 82.4917 137.489 cv
83.2477 136.537 84.2837 136.047 85.5717 136.047 cv
85.9077 136.047 86.2577 136.089 86.6217 136.145 cv
86.9717 136.215 87.3357 136.313 87.7277 136.453 cv
f
93.7197 137.139 mo
93.0057 137.139 92.4737 137.489 92.1097 138.189 cv
91.7457 138.889 91.5777 139.939 91.5777 141.339 cv
91.5777 142.739 91.7457 143.789 92.1097 144.489 cv
92.4737 145.189 93.0057 145.539 93.7197 145.539 cv
94.4337 145.539 94.9657 145.189 95.3297 144.489 cv
95.6797 143.789 95.8617 142.739 95.8617 141.339 cv
95.8617 139.939 95.6797 138.889 95.3297 138.189 cv
94.9657 137.489 94.4337 137.139 93.7197 137.139 cv
93.7197 136.047 mo
94.8537 136.047 95.7217 136.509 96.3377 137.405 cv
96.9397 138.315 97.2477 139.631 97.2477 141.339 cv
97.2477 143.061 96.9397 144.377 96.3377 145.273 cv
95.7217 146.169 94.8537 146.617 93.7197 146.617 cv
92.5717 146.617 91.6897 146.169 91.0877 145.273 cv
90.4857 144.377 90.1917 143.061 90.1917 141.339 cv
90.1917 139.631 90.4857 138.315 91.0877 137.405 cv
91.6897 136.509 92.5717 136.047 93.7197 136.047 cv
f
99.6697 144.699 mo
101.112 144.699 li
101.112 146.435 li
99.6697 146.435 li
99.6697 144.699 li
f
109.456 139.071 mo
109.456 140.247 li
109.092 140.051 108.742 139.911 108.378 139.813 cv
108.014 139.715 107.664 139.659 107.3 139.659 cv
106.488 139.659 105.844 139.925 105.396 140.443 cv
104.948 140.961 104.724 141.689 104.724 142.613 cv
104.724 143.551 104.948 144.279 105.396 144.797 cv
105.844 145.315 106.488 145.567 107.3 145.567 cv
107.664 145.567 108.014 145.525 108.378 145.427 cv
108.742 145.329 109.092 145.175 109.456 144.979 cv
109.456 146.141 li
109.092 146.309 108.728 146.435 108.364 146.505 cv
107.986 146.575 107.58 146.617 107.16 146.617 cv
106.012 146.617 105.088 146.267 104.416 145.539 cv
103.73 144.825 103.394 143.845 103.394 142.613 cv
103.394 141.367 103.73 140.387 104.416 139.673 cv
105.102 138.959 106.04 138.595 107.244 138.595 cv
107.636 138.595 108.014 138.637 108.378 138.721 cv
108.742 138.805 109.106 138.917 109.456 139.071 cv
f
118.01 141.815 mo
118.01 146.435 li
116.75 146.435 li
116.75 141.857 li
116.75 141.129 116.596 140.597 116.316 140.233 cv
116.036 139.869 115.616 139.687 115.056 139.687 cv
114.37 139.687 113.838 139.911 113.446 140.345 cv
113.054 140.779 112.858 141.367 112.858 142.109 cv
112.858 146.435 li
111.598 146.435 li
111.598 138.777 li
112.858 138.777 li
112.858 139.967 li
113.152 139.519 113.502 139.169 113.922 138.945 cv
114.328 138.721 114.804 138.595 115.336 138.595 cv
116.204 138.595 116.876 138.875 117.324 139.421 cv
117.772 139.967 118.01 140.765 118.01 141.815 cv
f
126.214 155.634 mo
122.714 155.634 li
f
126.214 155.634 mo
122.714 155.634 li
@
15.4423 153.297 mo
16.7023 153.297 li
18.2703 159.275 li
19.8383 153.297 li
21.3223 153.297 li
22.8903 159.275 li
24.4583 153.297 li
25.7183 153.297 li
23.7163 160.955 li
22.2323 160.955 li
20.5803 154.683 li
18.9283 160.955 li
17.4443 160.955 li
15.4423 153.297 li
f
26.8943 153.297 mo
28.1543 153.297 li
29.7223 159.275 li
31.2903 153.297 li
32.7743 153.297 li
34.3423 159.275 li
35.9103 153.297 li
37.1703 153.297 li
35.1683 160.955 li
33.6843 160.955 li
32.0323 154.683 li
30.3803 160.955 li
28.8963 160.955 li
26.8943 153.297 li
f
38.3463 153.297 mo
39.6063 153.297 li
41.1743 159.275 li
42.7423 153.297 li
44.2263 153.297 li
45.7943 159.275 li
47.3623 153.297 li
48.6223 153.297 li
46.6203 160.955 li
45.1363 160.955 li
43.4843 154.683 li
41.8323 160.955 li
40.3483 160.955 li
38.3463 153.297 li
f
50.7083 159.219 mo
52.1503 159.219 li
52.1503 160.955 li
50.7083 160.955 li
50.7083 159.219 li
f
55.3983 159.793 mo
57.6523 159.793 li
57.6523 152.009 li
55.2023 152.499 li
55.2023 151.239 li
57.6383 150.749 li
59.0243 150.749 li
59.0243 159.793 li
61.2783 159.793 li
61.2783 160.955 li
55.3983 160.955 li
55.3983 159.793 li
f
65.2543 159.793 mo
70.0703 159.793 li
70.0703 160.955 li
63.5883 160.955 li
63.5883 159.793 li
64.1063 159.261 64.8203 158.533 65.7303 157.609 cv
66.6263 156.699 67.2003 156.111 67.4383 155.845 cv
67.8863 155.355 68.1943 154.935 68.3623 154.585 cv
68.5303 154.249 68.6283 153.899 68.6283 153.563 cv
68.6283 153.031 68.4323 152.583 68.0543 152.247 cv
67.6763 151.911 67.1863 151.729 66.5703 151.729 cv
66.1363 151.729 65.6743 151.813 65.1983 151.953 cv
64.7223 152.107 64.2043 152.331 63.6583 152.639 cv
63.6583 151.239 li
64.2183 151.015 64.7363 150.847 65.2123 150.735 cv
65.6883 150.623 66.1363 150.567 66.5423 150.567 cv
67.5923 150.567 68.4323 150.833 69.0623 151.365 cv
69.6923 151.897 70.0143 152.597 70.0143 153.479 cv
70.0143 153.899 69.9303 154.305 69.7763 154.669 cv
69.6223 155.047 69.3423 155.495 68.9223 155.999 cv
68.8103 156.139 68.4463 156.517 67.8303 157.147 cv
67.2143 157.777 66.3603 158.659 65.2543 159.793 cv
f
77.1543 155.453 mo
77.8123 155.593 78.3303 155.887 78.6943 156.335 cv
79.0583 156.783 79.2543 157.343 79.2543 157.987 cv
79.2543 158.995 78.9043 159.779 78.2183 160.325 cv
77.5183 160.871 76.5383 161.137 75.2643 161.137 cv
74.8303 161.137 74.3823 161.095 73.9343 161.011 cv
73.4863 160.941 73.0103 160.815 72.5343 160.647 cv
72.5343 159.317 li
72.9123 159.541 73.3323 159.709 73.7943 159.821 cv
74.2423 159.933 74.7183 159.989 75.2223 159.989 cv
76.0903 159.989 76.7483 159.821 77.1963 159.485 cv
77.6443 159.149 77.8823 158.645 77.8823 157.987 cv
77.8823 157.399 77.6723 156.923 77.2523 156.587 cv
76.8323 156.251 76.2443 156.069 75.4883 156.069 cv
74.2983 156.069 li
74.2983 154.935 li
75.5443 154.935 li
76.2163 154.935 76.7343 154.809 77.0983 154.529 cv
77.4623 154.263 77.6443 153.871 77.6443 153.353 cv
77.6443 152.835 77.4483 152.429 77.0843 152.149 cv
76.7063 151.869 76.1743 151.729 75.4883 151.729 cv
75.1103 151.729 74.7043 151.771 74.2703 151.855 cv
73.8363 151.939 73.3603 152.065 72.8423 152.233 cv
72.8423 151.001 li
73.3603 150.861 73.8503 150.749 74.3123 150.679 cv
74.7603 150.609 75.1943 150.567 75.6143 150.567 cv
76.6503 150.567 77.4763 150.805 78.0923 151.281 cv
78.7083 151.757 79.0163 152.401 79.0163 153.213 cv
79.0163 153.773 78.8483 154.249 78.5263 154.641 cv
78.2043 155.033 77.7423 155.313 77.1543 155.453 cv
f
84.8263 151.659 mo
84.1123 151.659 83.5803 152.009 83.2163 152.709 cv
82.8523 153.409 82.6843 154.459 82.6843 155.859 cv
82.6843 157.259 82.8523 158.309 83.2163 159.009 cv
83.5803 159.709 84.1123 160.059 84.8263 160.059 cv
85.5403 160.059 86.0723 159.709 86.4363 159.009 cv
86.7863 158.309 86.9683 157.259 86.9683 155.859 cv
86.9683 154.459 86.7863 153.409 86.4363 152.709 cv
86.0723 152.009 85.5403 151.659 84.8263 151.659 cv
84.8263 150.567 mo
85.9603 150.567 86.8283 151.029 87.4443 151.925 cv
88.0463 152.835 88.3543 154.151 88.3543 155.859 cv
88.3543 157.581 88.0463 158.897 87.4443 159.793 cv
86.8283 160.689 85.9603 161.137 84.8263 161.137 cv
83.6783 161.137 82.7963 160.689 82.1943 159.793 cv
81.5923 158.897 81.2983 157.581 81.2983 155.859 cv
81.2983 154.151 81.5923 152.835 82.1943 151.925 cv
82.7963 151.029 83.6783 150.567 84.8263 150.567 cv
f
93.8983 155.299 mo
93.2823 155.299 92.7923 155.523 92.4283 155.943 cv
92.0643 156.363 91.8823 156.951 91.8823 157.679 cv
91.8823 158.421 92.0643 159.009 92.4283 159.429 cv
92.7923 159.849 93.2823 160.059 93.8983 160.059 cv
94.5143 160.059 95.0043 159.849 95.3683 159.429 cv
95.7323 159.009 95.9143 158.421 95.9143 157.679 cv
95.9143 156.951 95.7323 156.363 95.3683 155.943 cv
95.0043 155.523 94.5143 155.299 93.8983 155.299 cv
96.6423 150.973 mo
96.6423 152.233 li
96.2923 152.065 95.9423 151.939 95.5923 151.855 cv
95.2283 151.771 94.8783 151.729 94.5423 151.729 cv
93.6183 151.729 92.9183 152.037 92.4423 152.653 cv
91.9663 153.269 91.6863 154.207 91.6303 155.439 cv
91.8963 155.047 92.2323 154.739 92.6383 154.529 cv
93.0443 154.319 93.4923 154.207 93.9823 154.207 cv
95.0043 154.207 95.8163 154.529 96.4043 155.145 cv
96.9923 155.761 97.3003 156.615 97.3003 157.679 cv
97.3003 158.729 96.9783 159.569 96.3623 160.199 cv
95.7463 160.829 94.9203 161.137 93.8983 161.137 cv
92.7223 161.137 91.8123 160.689 91.1963 159.793 cv
90.5663 158.897 90.2583 157.581 90.2583 155.859 cv
90.2583 154.249 90.6363 152.961 91.4063 152.009 cv
92.1623 151.057 93.1983 150.567 94.4863 150.567 cv
94.8223 150.567 95.1723 150.609 95.5363 150.665 cv
95.8863 150.735 96.2503 150.833 96.6423 150.973 cv
f
99.6803 159.219 mo
101.122 159.219 li
101.122 160.955 li
99.6803 160.955 li
99.6803 159.219 li
f
109.466 153.591 mo
109.466 154.767 li
109.102 154.571 108.752 154.431 108.388 154.333 cv
108.024 154.235 107.674 154.179 107.31 154.179 cv
106.498 154.179 105.854 154.445 105.406 154.963 cv
104.958 155.481 104.734 156.209 104.734 157.133 cv
104.734 158.071 104.958 158.799 105.406 159.317 cv
105.854 159.835 106.498 160.087 107.31 160.087 cv
107.674 160.087 108.024 160.045 108.388 159.947 cv
108.752 159.849 109.102 159.695 109.466 159.499 cv
109.466 160.661 li
109.102 160.829 108.738 160.955 108.374 161.025 cv
107.996 161.095 107.59 161.137 107.17 161.137 cv
106.022 161.137 105.098 160.787 104.426 160.059 cv
103.74 159.345 103.404 158.365 103.404 157.133 cv
103.404 155.887 103.74 154.907 104.426 154.193 cv
105.112 153.479 106.05 153.115 107.254 153.115 cv
107.646 153.115 108.024 153.157 108.388 153.241 cv
108.752 153.325 109.116 153.437 109.466 153.591 cv
f
118.02 156.335 mo
118.02 160.955 li
116.76 160.955 li
116.76 156.377 li
116.76 155.649 116.606 155.117 116.326 154.753 cv
116.046 154.389 115.626 154.207 115.066 154.207 cv
114.38 154.207 113.848 154.431 113.456 154.865 cv
113.064 155.299 112.868 155.887 112.868 156.629 cv
112.868 160.955 li
111.608 160.955 li
111.608 153.297 li
112.868 153.297 li
112.868 154.487 li
113.162 154.039 113.512 153.689 113.932 153.465 cv
114.338 153.241 114.814 153.115 115.346 153.115 cv
116.214 153.115 116.886 153.395 117.334 153.941 cv
117.782 154.487 118.02 155.285 118.02 156.335 cv
f
126.214 170.154 mo
122.714 170.154 li
f
126.214 170.154 mo
122.714 170.154 li
@
7.52042 167.816 mo
8.78042 167.816 li
10.3484 173.794 li
11.9164 167.816 li
13.4004 167.816 li
14.9684 173.794 li
16.5364 167.816 li
17.7964 167.816 li
15.7944 175.474 li
14.3104 175.474 li
12.6584 169.202 li
11.0064 175.474 li
9.52242 175.474 li
7.52042 167.816 li
f
18.9724 167.816 mo
20.2324 167.816 li
21.8004 173.794 li
23.3684 167.816 li
24.8524 167.816 li
26.4204 173.794 li
27.9884 167.816 li
29.2484 167.816 li
27.2464 175.474 li
25.7624 175.474 li
24.1104 169.202 li
22.4584 175.474 li
20.9744 175.474 li
18.9724 167.816 li
f
30.4244 167.816 mo
31.6844 167.816 li
33.2524 173.794 li
34.8204 167.816 li
36.3044 167.816 li
37.8724 173.794 li
39.4404 167.816 li
40.7004 167.816 li
38.6984 175.474 li
37.2144 175.474 li
35.5624 169.202 li
33.9104 175.474 li
32.4264 175.474 li
30.4244 167.816 li
f
42.7864 173.738 mo
44.2284 173.738 li
44.2284 175.474 li
42.7864 175.474 li
42.7864 173.738 li
f
52.5584 171.652 mo
52.5584 170.728 52.3624 170.014 51.9844 169.482 cv
51.5924 168.95 51.0744 168.684 50.4164 168.684 cv
49.7444 168.684 49.2264 168.95 48.8484 169.482 cv
48.4564 170.014 48.2744 170.728 48.2744 171.652 cv
48.2744 172.576 48.4564 173.304 48.8484 173.836 cv
49.2264 174.368 49.7444 174.62 50.4164 174.62 cv
51.0744 174.62 51.5924 174.368 51.9844 173.836 cv
52.3624 173.304 52.5584 172.576 52.5584 171.652 cv
48.2744 168.978 mo
48.5264 168.53 48.8624 168.194 49.2684 167.97 cv
49.6744 167.746 50.1644 167.634 50.7244 167.634 cv
51.6484 167.634 52.4044 168.012 52.9924 168.74 cv
53.5664 169.482 53.8604 170.448 53.8604 171.652 cv
53.8604 172.856 53.5664 173.836 52.9924 174.564 cv
52.4044 175.292 51.6484 175.656 50.7244 175.656 cv
50.1644 175.656 49.6744 175.544 49.2684 175.334 cv
48.8624 175.124 48.5264 174.788 48.2744 174.326 cv
48.2744 175.474 li
47.0144 175.474 li
47.0144 164.834 li
48.2744 164.834 li
48.2744 168.978 li
f
59.4324 171.624 mo
58.4104 171.624 57.7104 171.75 57.3184 171.974 cv
56.9264 172.212 56.7304 172.604 56.7304 173.164 cv
56.7304 173.612 56.8704 173.976 57.1644 174.228 cv
57.4584 174.494 57.8644 174.62 58.3684 174.62 cv
59.0684 174.62 59.6284 174.382 60.0484 173.878 cv
60.4684 173.388 60.6784 172.73 60.6784 171.904 cv
60.6784 171.624 li
59.4324 171.624 li
61.9384 171.106 mo
61.9384 175.474 li
60.6784 175.474 li
60.6784 174.312 li
60.3844 174.788 60.0204 175.124 59.6004 175.334 cv
59.1804 175.544 58.6484 175.656 58.0324 175.656 cv
57.2484 175.656 56.6184 175.446 56.1564 175.012 cv
55.6944 174.578 55.4704 173.99 55.4704 173.248 cv
55.4704 172.394 55.7504 171.75 56.3384 171.302 cv
56.9124 170.868 57.7664 170.644 58.9144 170.644 cv
60.6784 170.644 li
60.6784 170.518 li
60.6784 169.944 60.4824 169.496 60.1044 169.174 cv
59.7264 168.866 59.1944 168.698 58.5084 168.698 cv
58.0604 168.698 57.6404 168.754 57.2204 168.866 cv
56.8004 168.978 56.4084 169.132 56.0304 169.328 cv
56.0304 168.166 li
56.4784 167.998 56.9264 167.858 57.3604 167.774 cv
57.7944 167.69 58.2144 167.634 58.6344 167.634 cv
59.7404 167.634 60.5664 167.928 61.1124 168.502 cv
61.6584 169.076 61.9384 169.944 61.9384 171.106 cv
f
64.5284 167.816 mo
65.7884 167.816 li
65.7884 175.474 li
64.5284 175.474 li
64.5284 167.816 li
64.5284 164.834 mo
65.7884 164.834 li
65.7884 166.43 li
64.5284 166.43 li
64.5284 164.834 li
f
73.4604 168.978 mo
73.4604 164.834 li
74.7204 164.834 li
74.7204 175.474 li
73.4604 175.474 li
73.4604 174.326 li
73.1944 174.788 72.8584 175.124 72.4524 175.334 cv
72.0464 175.544 71.5704 175.656 71.0104 175.656 cv
70.0864 175.656 69.3304 175.292 68.7424 174.564 cv
68.1544 173.836 67.8744 172.856 67.8744 171.652 cv
67.8744 170.448 68.1544 169.482 68.7424 168.74 cv
69.3304 168.012 70.0864 167.634 71.0104 167.634 cv
71.5704 167.634 72.0464 167.746 72.4524 167.97 cv
72.8584 168.194 73.1944 168.53 73.4604 168.978 cv
69.1764 171.652 mo
69.1764 172.576 69.3584 173.304 69.7364 173.836 cv
70.1144 174.368 70.6464 174.62 71.3184 174.62 cv
71.9764 174.62 72.4944 174.368 72.8864 173.836 cv
73.2644 173.304 73.4604 172.576 73.4604 171.652 cv
73.4604 170.728 73.2644 170.014 72.8864 169.482 cv
72.4944 168.95 71.9764 168.684 71.3184 168.684 cv
70.6464 168.684 70.1144 168.95 69.7364 169.482 cv
69.3584 170.014 69.1764 170.728 69.1764 171.652 cv
f
77.1844 172.45 mo
77.1844 167.816 li
78.4444 167.816 li
78.4444 172.408 li
78.4444 173.136 78.5844 173.668 78.8644 174.032 cv
79.1444 174.396 79.5644 174.578 80.1384 174.578 cv
80.8104 174.578 81.3564 174.368 81.7484 173.934 cv
82.1404 173.5 82.3364 172.912 82.3364 172.156 cv
82.3364 167.816 li
83.5964 167.816 li
83.5964 175.474 li
82.3364 175.474 li
82.3364 174.298 li
82.0284 174.774 81.6644 175.11 81.2724 175.334 cv
80.8664 175.544 80.4044 175.656 79.8724 175.656 cv
78.9904 175.656 78.3184 175.39 77.8704 174.844 cv
77.4084 174.312 77.1844 173.514 77.1844 172.45 cv
80.3484 167.634 mo
80.3484 167.634 li
f
86.3684 173.738 mo
87.8104 173.738 li
87.8104 175.474 li
86.3684 175.474 li
86.3684 173.738 li
f
96.1544 168.11 mo
96.1544 169.286 li
95.7904 169.09 95.4404 168.95 95.0764 168.852 cv
94.7124 168.754 94.3624 168.698 93.9984 168.698 cv
93.1864 168.698 92.5424 168.964 92.0944 169.482 cv
91.6464 170 91.4224 170.728 91.4224 171.652 cv
91.4224 172.59 91.6464 173.318 92.0944 173.836 cv
92.5424 174.354 93.1864 174.606 93.9984 174.606 cv
94.3624 174.606 94.7124 174.564 95.0764 174.466 cv
95.4404 174.368 95.7904 174.214 96.1544 174.018 cv
96.1544 175.18 li
95.7904 175.348 95.4264 175.474 95.0624 175.544 cv
94.6844 175.614 94.2784 175.656 93.8584 175.656 cv
92.7104 175.656 91.7864 175.306 91.1144 174.578 cv
90.4284 173.864 90.0924 172.884 90.0924 171.652 cv
90.0924 170.406 90.4284 169.426 91.1144 168.712 cv
91.8004 167.998 92.7384 167.634 93.9424 167.634 cv
94.3344 167.634 94.7124 167.676 95.0764 167.76 cv
95.4404 167.844 95.8044 167.956 96.1544 168.11 cv
f
101.306 168.698 mo
100.634 168.698 100.102 168.964 99.7104 169.496 cv
99.3184 170.028 99.1224 170.742 99.1224 171.652 cv
99.1224 172.576 99.3044 173.29 99.6964 173.822 cv
100.088 174.354 100.62 174.606 101.306 174.606 cv
101.978 174.606 102.51 174.354 102.902 173.822 cv
103.294 173.29 103.49 172.576 103.49 171.652 cv
103.49 170.756 103.294 170.028 102.902 169.496 cv
102.51 168.964 101.978 168.698 101.306 168.698 cv
101.306 167.634 mo
102.398 167.634 103.252 167.998 103.882 168.698 cv
104.498 169.412 104.82 170.392 104.82 171.652 cv
104.82 172.912 104.498 173.892 103.882 174.592 cv
103.252 175.306 102.398 175.656 101.306 175.656 cv
100.2 175.656 99.3324 175.306 98.7164 174.592 cv
98.1004 173.892 97.7924 172.912 97.7924 171.652 cv
97.7924 170.392 98.1004 169.412 98.7164 168.698 cv
99.3324 167.998 100.2 167.634 101.306 167.634 cv
f
112.87 169.286 mo
113.178 168.726 113.556 168.32 113.99 168.04 cv
114.424 167.774 114.942 167.634 115.544 167.634 cv
116.328 167.634 116.944 167.914 117.378 168.474 cv
117.812 169.034 118.036 169.832 118.036 170.854 cv
118.036 175.474 li
116.776 175.474 li
116.776 170.896 li
116.776 170.168 116.636 169.622 116.384 169.258 cv
116.118 168.908 115.726 168.726 115.194 168.726 cv
114.536 168.726 114.018 168.95 113.64 169.384 cv
113.262 169.818 113.08 170.406 113.08 171.148 cv
113.08 175.474 li
111.82 175.474 li
111.82 170.896 li
111.82 170.168 111.68 169.622 111.428 169.258 cv
111.162 168.908 110.756 168.726 110.224 168.726 cv
109.58 168.726 109.062 168.95 108.684 169.384 cv
108.306 169.818 108.124 170.406 108.124 171.148 cv
108.124 175.474 li
106.864 175.474 li
106.864 167.816 li
108.124 167.816 li
108.124 169.006 li
108.404 168.544 108.754 168.194 109.16 167.97 cv
109.552 167.746 110.028 167.634 110.588 167.634 cv
111.148 167.634 111.61 167.774 112.002 168.054 cv
112.394 168.334 112.674 168.754 112.87 169.286 cv
f
-10.6845 102.633 mo
-7.05447 103.973 li
-7.05447 101.294 li
-10.6845 102.633 li
-11.6545 103.193 mo
-11.6545 102.074 li
-4.36446 99.2935 li
-4.36446 100.324 li
-6.23447 100.984 li
-6.23447 104.273 li
-4.36446 104.934 li
-4.36446 105.973 li
-11.6545 103.193 li
f
-9.62447 94.3335 mo
-8.78447 94.3335 li
-8.92447 94.5935 -9.02446 94.8435 -9.09446 95.1035 cv
-9.16447 95.3635 -9.20446 95.6135 -9.20446 95.8735 cv
-9.20446 96.4535 -9.01447 96.9135 -8.64447 97.2335 cv
-8.27446 97.5535 -7.75446 97.7135 -7.09446 97.7135 cv
-6.42447 97.7135 -5.90446 97.5535 -5.53447 97.2335 cv
-5.16447 96.9135 -4.98447 96.4535 -4.98447 95.8735 cv
-4.98447 95.6135 -5.01447 95.3635 -5.08447 95.1035 cv
-5.15446 94.8435 -5.26447 94.5935 -5.40446 94.3335 cv
-4.57447 94.3335 li
-4.45446 94.5935 -4.36446 94.8535 -4.31446 95.1135 cv
-4.26447 95.3835 -4.23447 95.6735 -4.23447 95.9735 cv
-4.23447 96.7935 -4.48447 97.4535 -5.00446 97.9335 cv
-5.51447 98.4235 -6.21447 98.6635 -7.09446 98.6635 cv
-7.98447 98.6635 -8.68446 98.4235 -9.19447 97.9335 cv
-9.70446 97.4435 -9.96447 96.7735 -9.96447 95.9135 cv
-9.96447 95.6335 -9.93446 95.3635 -9.87447 95.1035 cv
-9.81446 94.8435 -9.73447 94.5835 -9.62447 94.3335 cv
f
-11.3845 91.8835 mo
-9.83447 91.8835 li
-9.83447 90.0335 li
-9.13446 90.0335 li
-9.13446 91.8835 li
-6.16447 91.8835 li
-5.71447 91.8835 -5.42447 91.8235 -5.30447 91.7035 cv
-5.17447 91.5835 -5.11446 91.3335 -5.11446 90.9535 cv
-5.11446 90.0335 li
-4.36446 90.0335 li
-4.36446 90.9535 li
-4.36446 91.6535 -4.49446 92.1335 -4.75446 92.3935 cv
-5.01447 92.6535 -5.48447 92.7835 -6.16447 92.7835 cv
-9.13446 92.7835 li
-9.13446 93.4435 li
-9.83447 93.4435 li
-9.83447 92.7835 li
-11.3845 92.7835 li
-11.3845 91.8835 li
f
-6.52446 88.9435 mo
-9.83447 88.9435 li
-9.83447 88.0435 li
-6.55447 88.0435 li
-6.03447 88.0435 -5.65446 87.9435 -5.39447 87.7435 cv
-5.13446 87.5435 -5.00446 87.2435 -5.00446 86.8335 cv
-5.00446 86.3535 -5.15446 85.9635 -5.46447 85.6835 cv
-5.77446 85.4035 -6.19447 85.2635 -6.73447 85.2635 cv
-9.83447 85.2635 li
-9.83447 84.3635 li
-4.36446 84.3635 li
-4.36446 85.2635 li
-5.20446 85.2635 li
-4.86446 85.4835 -4.62447 85.7435 -4.46447 86.0235 cv
-4.31446 86.3135 -4.23447 86.6435 -4.23447 87.0235 cv
-4.23447 87.6535 -4.42447 88.1335 -4.81446 88.4535 cv
-5.19447 88.7835 -5.76447 88.9435 -6.52446 88.9435 cv
-9.96447 86.6835 mo
-9.96447 86.6835 li
f
-7.11446 80.0235 mo
-7.11446 80.7535 -7.02446 81.2535 -6.86446 81.5335 cv
-6.69447 81.8135 -6.41447 81.9535 -6.01447 81.9535 cv
-5.69447 81.9535 -5.43446 81.8535 -5.25446 81.6435 cv
-5.06446 81.4335 -4.97446 81.1435 -4.97446 80.7835 cv
-4.97446 80.2835 -5.14447 79.8835 -5.50446 79.5835 cv
-5.85447 79.2835 -6.32447 79.1335 -6.91447 79.1335 cv
-7.11446 79.1335 li
-7.11446 80.0235 li
-7.48447 78.2335 mo
-4.36446 78.2335 li
-4.36446 79.1335 li
-5.19447 79.1335 li
-4.85447 79.3435 -4.61446 79.6035 -4.46447 79.9035 cv
-4.31446 80.2035 -4.23447 80.5835 -4.23447 81.0235 cv
-4.23447 81.5835 -4.38446 82.0335 -4.69447 82.3635 cv
-5.00446 82.6935 -5.42447 82.8535 -5.95446 82.8535 cv
-6.56446 82.8535 -7.02446 82.6535 -7.34446 82.2335 cv
-7.65446 81.8235 -7.81446 81.2135 -7.81446 80.3935 cv
-7.81446 79.1335 li
-7.90446 79.1335 li
-8.31446 79.1335 -8.63446 79.2735 -8.86446 79.5435 cv
-9.08447 79.8135 -9.20446 80.1935 -9.20446 80.6835 cv
-9.20446 81.0035 -9.16447 81.3035 -9.08447 81.6035 cv
-9.00446 81.9035 -8.89447 82.1835 -8.75446 82.4535 cv
-9.58447 82.4535 li
-9.70446 82.1335 -9.80447 81.8135 -9.86446 81.5035 cv
-9.92447 81.1935 -9.96447 80.8935 -9.96447 80.5935 cv
-9.96447 79.8035 -9.75446 79.2135 -9.34446 78.8235 cv
-8.93446 78.4335 -8.31446 78.2335 -7.48447 78.2335 cv
f
-11.9645 76.3835 mo
-11.9645 75.4835 li
-4.36446 75.4835 li
-4.36446 76.3835 li
-11.9645 76.3835 li
f
grestore
gsave
316.924 170.154 mo
324.91 170.154 li
324.91 10.4374 li
316.924 10.4374 li
cp
clp
316.924 170.154 mo
316.924 169.53 li
316.924 11.0613 li
316.924 10.4374 li
324.91 10.4374 li
324.91 11.0613 li
324.91 169.53 li
324.91 170.154 li
cp
f
.01 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
316.924 170.154 mo
316.924 169.53 li
316.924 11.0613 li
316.924 10.4374 li
324.91 10.4374 li
324.91 11.0613 li
324.91 169.53 li
324.91 170.154 li
cp
@
grestore
gsave
-64.1406 314.565 mo
396.659 314.565 li
396.659 -31.0346 li
-64.1406 -31.0346 li
cp
clp
317.099 170.205 mo
325.019 170.205 li
325.019 10.3654 li
317.099 10.3654 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 64.1406 309.421 ]ct
[7.92 0 0 159.84 252.959 139.216 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 22 
/H 444 
/M[22 0 0 -444 0 444 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
li6;1lV6\%li6J6r8R$:lSRr-lf.5(oe?+oli6;1lV-Uuli6h@o&At.lRqN'lf.5's"<[kli6;1lUpIm
mf3:dlf.5&lRM6#lf%G,q+9m$li6;/lUU7fq#C!dleq)!lR(rtlehY1mmcUhli6;.lUL4e!%$t2leh"q
lQPTon_a6$lU0t]li6;-lU(:fp)r]$leUkklQ,<kqq^eulTa\Uli6;+lTP:gll>?kleLeilQ#BnrVu3<
lTFJOli6;)oK)b.lP]$gle:YclP]NuoDe.0lT"2Hli6;(r]'=*lPJmele(M]m1oX9li6;'lSe&Dli6P,
qUXsjlP&Ualdb;WpCd-3li6;$lSIi>li6n4nC6bZlO`C^ldY5UlO`C^ldP/RlONFar;Z*3lS.W7li6;"
oe6%mlOE1[ldG)NlO3Rho)J%(lRhE1li6:us"3UilO)tXld>#MmL&q#li6:slRM3-li6S&q9S@VlO)tX
lcn`Fp^-R!li6:plR2!(li6q-n'()FlNlhVlcSQ@!%.";li6:nlR(p'nc/LdlcAB;lNcbUlc8<7n-Ajr
li6:klQPR!li6XspVlG@lNZ\Tlc&04q?HKpli6:hlQ5?rli7"'mDS<3lNZ\Slb`'0rZ(5-li$.clPf'm
oDSL`lbVm*lNQVPlbN94oGHlslhp(alPSpjrVQ'\lb;[$lNHPNm(NJ6lPJjilh]q\lPB!nqZQ6\lauHu
lNHPLp:L%1lPAdhlhKeWlP03unH8+PlalBrlN?JI!4_C*lP&RdlhB_Tmh>X5lN?JHlaQ0mlN?ePq"<s]
lO`@`lh0SPq%3-/lN6DEla5silN7(Xme#hPlOiFalgsMLs0Cr%lN6DCl`f[cncJXhlgjAGlOW:_lga_Q
ormZllN6DBl`]UbquZ?hlgX5BlON4^lgX5BlON4^lgO/?n.5F-lN6D?l`'1\lN6bIp[7@HlOW:_lg=#9
q@<'+lN->=l_j%YlN.%PmHj/8lON4]lg4&9rh\ojlN->;l_EbVo)\Xflg!f1lOW:^lg"8>oV1X^lN->9
l_*PRr;l?flfm`.lON4]m-"H5l^mDOlN->8l^mVUq[MillfRN(lOE.\lfR]*r0lp]lN->6l^I,Lo`=df
lfIH#lOE.\lfIu2nsSeQlN->3l^-oGrrMKflf.5qlO<([mc+6*l]pcElN->2l]^oLq$lWjlf.5olOE.\
pu(f&l]LKAlN$8/l]M,SmgSL^leh#ilO3%Z!!)?Al]19=lN$8-nW*L,lO3"YleUlclO*=cp&OF7l\t-:
lN$8,qhjp$lO3"YleUlalO*[mli?A+l\Oj6lN$D-rS$RmlO)qXle:Z[oEt@#lN$8(l\4X3lN$b6o@`G`
lO)qXle(NUrX/'#lN$8'l\"L1m/[.dldtHRlO)qXldkWWqLIl=lN$8%l[\:.pAjjdldb<MlO)qXldbo^
n:'[1lN$8"l[%k)lN$8!lZh_'lN$G&r6jnUlO3"Yld>$AoaCL%lN$7ulZVS%lN$e.o$H]ElO3"Yld4s>
rsS3%lN$7slZ;A"mK!4dld"g9lO)qXld#*Aq/P^-lN$7qlYl(sp]0pdlcna6lO3"Ylcf<Emqq@tlN$7p
lYYtq!"/#llc\U0lO3"Yn]C[MlY>_nlN$7mlY>_nn,W@dlcJI+lO3"YlcJg5pLrk#lN$7klY#Mkq>g'd
lc8=(lO3"Ylc/s9m:GSllN$7ilXT>jrX8#llc&1"lO3"Yo>LIClXB)flN$7hlXBPsoF1$clbi$rlO3"Y
rPJ$?lX&lclN$7fls9ZulO<(ZlbVmllO34_qZ,rulWi``lN$7dp075plOE.[lbMgjlOE^knGqmhlWNN^
lN$7a!*JSilO3"Ylb2UdmgK(%lN$7`lW3<\lN$Ripq5onlOE.[lauI_q$cj'lN$7_lW*6ZlN$prm^qda
lON4\lalI^s&84mlN$7^lVm*Ync8Ldlac=YlON4\lacaeohk#blN$7[lVQmVquH3dlaQ1VlOE.[laH+S
lON4\la?%Qn.,@+lN$7YlV6[TlN$UapTs0YlOW:]la,nMq@E--lN$7VlUpIQlN$simBPtJlOW:]l`okK
r^c>clN$7TlUgCOo)SRdl`f\HlOE.[l`U"QoLJ3WlN$7RlUU7Nr;c9dl`KJBlOE.[m&U2glU:%KlN$7P
lU:7Qq[Voll`08<lOE.[l`0GAr'TcZlN$7MlU'nIo`4^dl`'2:lON4\l_jSEnj)LMlN$7JlTXVErrDEd
l_`u3lON4\m\KiXlTOPDlN$7HlTOhLq$u]jl_Ni1lOE.[pn[PXlTXVDlN$7FlTG+Tmg\R_l_3W+lON7]
!!)>YlT=DBlN$7CnN-P.lOE.[l_!K(lOEOfp&OENlT+8@lN$7Bq`++*lON4\l^mE%lOEmpli?@AlSn,?
lN$CDrLE14lOW:]l^R2uoFCX+lN$7?lSe&=lN$aLo:"u'lON4\l^6uqrXJ9)lN$7<lS[u;m/[.dl^-oo
lON4\l^.0!qD@LJlN$79lSIi9pAjjdl]pcllOE.[l]h<%n1j5=lN$76lS.W6lN$76lS.W6lN$F:r/p:u
lON4\l]LKdoa^^+lN$74lRqK4lN$dCnrW/ilOE.[l]19`rse?)lN$71lRhE2mK!4dl](3^lO<(Zl\k?c
q(1h?lN$7/lR_?1p]0pdl\XpXlOE.[l\GEfmj[Q2lN$7+lRD0/!"A/nl\=^SlOE.[nV6pqlRD-/lN$7)
lR2!.n,W@dl\4XPlON4\l\"jXpF#89lN$7&lR;'.q>g'dl[nFNlOE.[l[f'_m3_-/lN$7%lR)$0rXS5o
l[S4HlOE.[o7-RclQtj+lN$7!lQl68oFC0el[8"ClON4\rI"']lQb^*lN$6rlllERlOE.[lZqe?lOE@a
qZ,r,lQPR(lN$6qp*',QlON4\lZ_Y;lOWjmnGqlulQPR'lN$6o!$U\PlOE.[lZDG8mgf:+lN$6mlQGL'
lN$Qtpi>[BlON4\lYu/2q%!!+lN$6ilQ5@%lN$p&mVhD3lON4\lYl/2ruLD8lN$6glQ#4$nc8LdlYc#.
lOW:]lYQ;8oc39.lN$6dlPo.#quH3dlYGf*lOW:]lY>`(lO`@^lY>`(n.>L/lN$6alPo."lN$TkpLrk3
lON4\lY#N%q@E--lN$6^lP]""lN$rrm:GT$lO`@^lXK9"rYb#3lN$6[lP]!uo)SRdlXB)qlOW:]lXBQ)
oG?g(lN$6XlPJjsr;c9dlX&lllOW:]ls9ZulP8^rlN$6UlPB"#q[VollWi`klON4\lW`inr"\N-lN$6S
lPAdqo`4^dlWWTilOE.[lWEuuneLI!lN$6QlP8^orrDEdlW<BflO<(ZmT9BhlPAdplN$6OlP9"#q$lWi
lW*6blOE.[pf6rdlP/XolN$6MlP9@,mgSL^lW!0blO<+[!!)=`lP8^olN$6LnJ1p9lO<(ZlVd$`lO3Cd
p&ODUlP/XmlN$6Jq\8Q7lO3"YlVHg]lO!Ulli??IlP8^mlN$BKrD)YmlO)qXlV?a[oEt@#lN$6FlP8^l
lN$`So1\HalO)qXlV-UYrX/'#lN$6BlP8^km/[.dlUgCWlNleVlU^R\q@r6%lN$6@lP/XipAjjdlUU7T
lNc_UlULdcn.Y*nlN$6?lP&RilN$6=lP/XhlN$EBr']iblNZYTlU0tOo`k-plN$6;lOrLglN$cJnj;XT
lNc_UlTjbLrs%iplN$69lP&RgmK!4dlTXVIlNZYTlTXnQq%DutlN$66lP&Rfp]0pdlTOPHlNQSSlTP1Z
mh4pilN$65lOrOe!!MTflTFJGlNHMRnN-P.lOrLelN$63lOrLen,W@dlT+8ElNHMRlT"PMpCccplN$61
lOrLdq>g'dlSn,BlNHMRlSnhVm1S^flN$6.lOrUfrWDHdlSRo?lN?GQo/-8"lOrLclN$6-lOimpoE=I[
lSRo>lNHMRrA3mulOrLblN$6,lk0:2lN6APlS@c<lN?YWqZ,q9lOiFblN$6)p(@!1lN?GQlS.W9lN@"a
nGql/lO`@alN$6(!"eK.lN6APlS%Q8mfNFhlN$6'lOW:_lN$Q/pateClN6APlRhE6q#^-hlN$6&lON4_
lN$o9mOd`7lN?GQlR_E6rt"DrlN$6%lOW:^nc8LdlRV92lN6APlRMW=oa^9hlN$6#lON4^quH3dlRM30
lN6APlRM30lN6APlRD-0n,`FflN$6"lOE.]lN$T,pF5D;lN6APlR;'/q>p-flN$6!lON4]lN$r5m3q9/
lN6APlR;00rXA)olN$5ulOE.\o)SRdlR(p+lN6APlR)B8oF1$elN$5slOE.\r;c9dlQtj+lN-;Olm2WX
lO3"[lN$5slO34aqZ?'`lQkd)lN-;OlQbm,r!VfklN$5qlO3"Zo`4^dlQYX&lN-;OlQZ05ndFaalN$5p
lO)qZrrDEdlQPR$eH#"\rZUS7eH"nXlO!.`q#Td]lQGL"lN-;Op`K,MlO)/BlQ>F"r;bLNlQ>EulN->P
!!)=+lNu)AlQ5R&q[(dQlQ,9shuNHNlQ,9seH"nTqZu]teH"nTlNlbUli?>klNc_VlN$Amr>Y&.eH"nS
lNm+_iW/9_lNbr?q&8iClNbr?lPSpmrW(RNlPSpmf)YgNlPSpmlN-;OlPT0tq?PONlPSpmi;iNNlPJjk
eH"nOr!)WpeH"nNlNc_UlN$5clNZYUlN$Dhr"\N%lN-;OlP/Xio`3qNlP/XieH#F[neCBolN-;OlP/Xh
rrMKflN$5alNZYUmK!4dlOrLelN-;OlOrdmq$$'blN$5_lNZ>KoDn1hlNYl>lOj(!mfi"XlN$5_lNQVU
!!2BclO`@clN-;OnIPL-lNHMSlN$5]lNHMSn,W@dlON4aeH"nFo`b'neH"nElNHMSq>g'dlOE._lN-;O
lOEjsm0)_UlN$5ZlNHVVrW2<blO<(^lN-;Oo*b@%lNG`<lO3"]p]0.NlO)q[eH#OSmg8:_eH"nAli[:k
eH"nAlN6AQnGrFdlNukYlN-;OlNm1dp&ihFlNleYjT+fNlNleXeH"n?!!DQieH"n?lN?SUk5afQlN6AQ
lN$P^p]p*dlN-;OlNZYVq#K4NlNZYVeH#RQmKVtXeGt+~>

%%EndBinary
grestore
np
324.91 170.154 mo
328.41 170.154 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
324.91 170.154 mo
328.41 170.154 li
@
335.09 167.311 mo
334.58 167.311 334.2 167.561 333.94 168.061 cv
333.68 168.561 333.56 169.311 333.56 170.311 cv
333.56 171.311 333.68 172.061 333.94 172.561 cv
334.2 173.061 334.58 173.311 335.09 173.311 cv
335.6 173.311 335.98 173.061 336.24 172.561 cv
336.49 172.061 336.62 171.311 336.62 170.311 cv
336.62 169.311 336.49 168.561 336.24 168.061 cv
335.98 167.561 335.6 167.311 335.09 167.311 cv
335.09 166.531 mo
335.9 166.531 336.52 166.861 336.96 167.501 cv
337.39 168.151 337.61 169.091 337.61 170.311 cv
337.61 171.541 337.39 172.481 336.96 173.121 cv
336.52 173.761 335.9 174.081 335.09 174.081 cv
334.27 174.081 333.64 173.761 333.21 173.121 cv
332.78 172.481 332.57 171.541 332.57 170.311 cv
332.57 169.091 332.78 168.151 333.21 167.501 cv
333.64 166.861 334.27 166.531 335.09 166.531 cv
f
339.34 172.711 mo
340.37 172.711 li
340.37 173.951 li
339.34 173.951 li
339.34 172.711 li
f
344.63 167.311 mo
344.12 167.311 343.74 167.561 343.48 168.061 cv
343.22 168.561 343.1 169.311 343.1 170.311 cv
343.1 171.311 343.22 172.061 343.48 172.561 cv
343.74 173.061 344.12 173.311 344.63 173.311 cv
345.14 173.311 345.52 173.061 345.78 172.561 cv
346.03 172.061 346.16 171.311 346.16 170.311 cv
346.16 169.311 346.03 168.561 345.78 168.061 cv
345.52 167.561 345.14 167.311 344.63 167.311 cv
344.63 166.531 mo
345.44 166.531 346.06 166.861 346.5 167.501 cv
346.93 168.151 347.15 169.091 347.15 170.311 cv
347.15 171.541 346.93 172.481 346.5 173.121 cv
346.06 173.761 345.44 174.081 344.63 174.081 cv
343.81 174.081 343.18 173.761 342.75 173.121 cv
342.32 172.481 342.11 171.541 342.11 170.311 cv
342.11 169.091 342.32 168.151 342.75 167.501 cv
343.18 166.861 343.81 166.531 344.63 166.531 cv
f
324.91 138.026 mo
328.41 138.026 li
f
324.91 138.026 mo
328.41 138.026 li
@
335.09 135.183 mo
334.58 135.183 334.2 135.433 333.94 135.933 cv
333.68 136.433 333.56 137.183 333.56 138.183 cv
333.56 139.183 333.68 139.933 333.94 140.433 cv
334.2 140.933 334.58 141.183 335.09 141.183 cv
335.6 141.183 335.98 140.933 336.24 140.433 cv
336.49 139.933 336.62 139.183 336.62 138.183 cv
336.62 137.183 336.49 136.433 336.24 135.933 cv
335.98 135.433 335.6 135.183 335.09 135.183 cv
335.09 134.403 mo
335.9 134.403 336.52 134.733 336.96 135.373 cv
337.39 136.023 337.61 136.963 337.61 138.183 cv
337.61 139.413 337.39 140.353 336.96 140.993 cv
336.52 141.633 335.9 141.953 335.09 141.953 cv
334.27 141.953 333.64 141.633 333.21 140.993 cv
332.78 140.353 332.57 139.413 332.57 138.183 cv
332.57 136.963 332.78 136.023 333.21 135.373 cv
333.64 134.733 334.27 134.403 335.09 134.403 cv
f
339.34 140.583 mo
340.37 140.583 li
340.37 141.823 li
339.34 141.823 li
339.34 140.583 li
f
343.37 140.993 mo
346.81 140.993 li
346.81 141.823 li
342.18 141.823 li
342.18 140.993 li
342.55 140.613 343.06 140.093 343.71 139.433 cv
344.35 138.783 344.76 138.363 344.93 138.173 cv
345.25 137.823 345.47 137.523 345.59 137.273 cv
345.71 137.033 345.78 136.783 345.78 136.543 cv
345.78 136.163 345.64 135.843 345.37 135.603 cv
345.1 135.363 344.75 135.233 344.31 135.233 cv
344 135.233 343.67 135.293 343.33 135.393 cv
342.99 135.503 342.62 135.663 342.23 135.883 cv
342.23 134.883 li
342.63 134.723 343 134.603 343.34 134.523 cv
343.68 134.443 344 134.403 344.29 134.403 cv
345.04 134.403 345.64 134.593 346.09 134.973 cv
346.54 135.353 346.77 135.853 346.77 136.483 cv
346.77 136.783 346.71 137.073 346.6 137.333 cv
346.49 137.603 346.29 137.923 345.99 138.283 cv
345.91 138.383 345.65 138.653 345.21 139.103 cv
344.77 139.553 344.16 140.183 343.37 140.993 cv
f
324.91 105.898 mo
328.41 105.898 li
f
324.91 105.898 mo
328.41 105.898 li
@
335.09 103.055 mo
334.58 103.055 334.2 103.305 333.94 103.805 cv
333.68 104.305 333.56 105.055 333.56 106.055 cv
333.56 107.055 333.68 107.805 333.94 108.305 cv
334.2 108.805 334.58 109.055 335.09 109.055 cv
335.6 109.055 335.98 108.805 336.24 108.305 cv
336.49 107.805 336.62 107.055 336.62 106.055 cv
336.62 105.055 336.49 104.305 336.24 103.805 cv
335.98 103.305 335.6 103.055 335.09 103.055 cv
335.09 102.275 mo
335.9 102.275 336.52 102.604 336.96 103.244 cv
337.39 103.895 337.61 104.835 337.61 106.055 cv
337.61 107.285 337.39 108.225 336.96 108.865 cv
336.52 109.505 335.9 109.824 335.09 109.824 cv
334.27 109.824 333.64 109.505 333.21 108.865 cv
332.78 108.225 332.57 107.285 332.57 106.055 cv
332.57 104.835 332.78 103.895 333.21 103.244 cv
333.64 102.604 334.27 102.275 335.09 102.275 cv
f
339.34 108.454 mo
340.37 108.454 li
340.37 109.695 li
339.34 109.695 li
339.34 108.454 li
f
345.23 103.264 mo
342.74 107.154 li
345.23 107.154 li
345.23 103.264 li
344.97 102.404 mo
346.21 102.404 li
346.21 107.154 li
347.25 107.154 li
347.25 107.975 li
346.21 107.975 li
346.21 109.695 li
345.23 109.695 li
345.23 107.975 li
341.94 107.975 li
341.94 107.025 li
344.97 102.404 li
f
324.91 73.7695 mo
328.41 73.7695 li
f
324.91 73.7695 mo
328.41 73.7695 li
@
335.09 70.9263 mo
334.58 70.9263 334.2 71.1763 333.94 71.6763 cv
333.68 72.1763 333.56 72.9263 333.56 73.9263 cv
333.56 74.9263 333.68 75.6763 333.94 76.1763 cv
334.2 76.6763 334.58 76.9263 335.09 76.9263 cv
335.6 76.9263 335.98 76.6763 336.24 76.1763 cv
336.49 75.6763 336.62 74.9263 336.62 73.9263 cv
336.62 72.9263 336.49 72.1763 336.24 71.6763 cv
335.98 71.1763 335.6 70.9263 335.09 70.9263 cv
335.09 70.1463 mo
335.9 70.1463 336.52 70.4763 336.96 71.1163 cv
337.39 71.7663 337.61 72.7063 337.61 73.9263 cv
337.61 75.1563 337.39 76.0963 336.96 76.7363 cv
336.52 77.3763 335.9 77.6963 335.09 77.6963 cv
334.27 77.6963 333.64 77.3763 333.21 76.7363 cv
332.78 76.0963 332.57 75.1563 332.57 73.9263 cv
332.57 72.7063 332.78 71.7663 333.21 71.1163 cv
333.64 70.4763 334.27 70.1463 335.09 70.1463 cv
f
339.34 76.3263 mo
340.37 76.3263 li
340.37 77.5663 li
339.34 77.5663 li
339.34 76.3263 li
f
344.75 73.5263 mo
344.31 73.5263 343.96 73.6863 343.7 73.9863 cv
343.44 74.2863 343.31 74.7063 343.31 75.2263 cv
343.31 75.7563 343.44 76.1763 343.7 76.4763 cv
343.96 76.7763 344.31 76.9263 344.75 76.9263 cv
345.19 76.9263 345.54 76.7763 345.8 76.4763 cv
346.06 76.1763 346.19 75.7563 346.19 75.2263 cv
346.19 74.7063 346.06 74.2863 345.8 73.9863 cv
345.54 73.6863 345.19 73.5263 344.75 73.5263 cv
346.71 70.4363 mo
346.71 71.3363 li
346.46 71.2163 346.21 71.1263 345.96 71.0663 cv
345.7 71.0063 345.45 70.9763 345.21 70.9763 cv
344.55 70.9763 344.05 71.1963 343.71 71.6363 cv
343.37 72.0763 343.17 72.7463 343.13 73.6263 cv
343.32 73.3463 343.56 73.1263 343.85 72.9763 cv
344.14 72.8263 344.46 72.7463 344.81 72.7463 cv
345.54 72.7463 346.12 72.9763 346.54 73.4163 cv
346.96 73.8563 347.18 74.4663 347.18 75.2263 cv
347.18 75.9763 346.95 76.5763 346.51 77.0263 cv
346.07 77.4763 345.48 77.6963 344.75 77.6963 cv
343.91 77.6963 343.26 77.3763 342.82 76.7363 cv
342.37 76.0963 342.15 75.1563 342.15 73.9263 cv
342.15 72.7763 342.42 71.8563 342.97 71.1763 cv
343.51 70.4963 344.25 70.1463 345.17 70.1463 cv
345.41 70.1463 345.66 70.1763 345.92 70.2163 cv
346.17 70.2663 346.43 70.3363 346.71 70.4363 cv
f
324.91 41.6413 mo
328.41 41.6413 li
f
324.91 41.6413 mo
328.41 41.6413 li
@
335.09 38.7982 mo
334.58 38.7982 334.2 39.0482 333.94 39.5482 cv
333.68 40.0482 333.56 40.7982 333.56 41.7982 cv
333.56 42.7982 333.68 43.5482 333.94 44.0482 cv
334.2 44.5482 334.58 44.7982 335.09 44.7982 cv
335.6 44.7982 335.98 44.5482 336.24 44.0482 cv
336.49 43.5482 336.62 42.7982 336.62 41.7982 cv
336.62 40.7982 336.49 40.0482 336.24 39.5482 cv
335.98 39.0482 335.6 38.7982 335.09 38.7982 cv
335.09 38.0182 mo
335.9 38.0182 336.52 38.3482 336.96 38.9882 cv
337.39 39.6382 337.61 40.5782 337.61 41.7982 cv
337.61 43.0282 337.39 43.9682 336.96 44.6082 cv
336.52 45.2482 335.9 45.5682 335.09 45.5682 cv
334.27 45.5682 333.64 45.2482 333.21 44.6082 cv
332.78 43.9682 332.57 43.0282 332.57 41.7982 cv
332.57 40.5782 332.78 39.6382 333.21 38.9882 cv
333.64 38.3482 334.27 38.0182 335.09 38.0182 cv
f
339.34 44.1982 mo
340.37 44.1982 li
340.37 45.4382 li
339.34 45.4382 li
339.34 44.1982 li
f
344.63 41.9782 mo
344.16 41.9782 343.79 42.1082 343.52 42.3582 cv
343.25 42.6082 343.12 42.9482 343.12 43.3882 cv
343.12 43.8282 343.25 44.1782 343.52 44.4282 cv
343.79 44.6782 344.16 44.7982 344.63 44.7982 cv
345.09 44.7982 345.46 44.6782 345.73 44.4182 cv
346 44.1682 346.14 43.8282 346.14 43.3882 cv
346.14 42.9482 346 42.6082 345.74 42.3582 cv
345.47 42.1082 345.1 41.9782 344.63 41.9782 cv
343.64 41.5582 mo
343.22 41.4582 342.89 41.2582 342.65 40.9682 cv
342.41 40.6782 342.3 40.3282 342.3 39.9082 cv
342.3 39.3282 342.5 38.8682 342.92 38.5282 cv
343.33 38.1882 343.9 38.0182 344.63 38.0182 cv
345.35 38.0182 345.92 38.1882 346.34 38.5282 cv
346.75 38.8682 346.96 39.3282 346.96 39.9082 cv
346.96 40.3282 346.84 40.6782 346.6 40.9682 cv
346.36 41.2582 346.04 41.4582 345.62 41.5582 cv
346.09 41.6682 346.46 41.8882 346.73 42.2082 cv
346.99 42.5282 347.13 42.9282 347.13 43.3882 cv
347.13 44.0982 346.91 44.6382 346.48 45.0082 cv
346.04 45.3882 345.43 45.5682 344.63 45.5682 cv
343.82 45.5682 343.2 45.3882 342.77 45.0082 cv
342.34 44.6382 342.13 44.0982 342.13 43.3882 cv
342.13 42.9282 342.26 42.5282 342.53 42.2082 cv
342.79 41.8882 343.16 41.6682 343.64 41.5582 cv
343.28 39.9982 mo
343.28 40.3782 343.39 40.6782 343.63 40.8882 cv
343.87 41.0982 344.2 41.1982 344.63 41.1982 cv
345.05 41.1982 345.38 41.0982 345.62 40.8882 cv
345.86 40.6782 345.98 40.3782 345.98 39.9982 cv
345.98 39.6182 345.86 39.3282 345.62 39.1182 cv
345.38 38.9082 345.05 38.7982 344.63 38.7982 cv
344.2 38.7982 343.87 38.9082 343.63 39.1182 cv
343.39 39.3282 343.28 39.6182 343.28 39.9982 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
