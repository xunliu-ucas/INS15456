%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: heatmap-bgrua.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: Lavender
%%CreationDate: 2020/2/17, 17:40:34
%%BoundingBox: 0 0 347 306
%%HiResBoundingBox: 0 0 346.0452 305.1958
%%CropBox: 0 0 346.0452 305.1958
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 636 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-02-17T08:55:40Z"
   xmp:CreatorTool="matplotlib 3.1.1, http://matplotlib.org"
   xmp:ModifyDate="2020-02-17T08:55:40Z"
   pdf:Producer="macOS 版本 10.14.1（版号 18B75） Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -305.196 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 305.196 li
346.045 305.196 li
346.045 0 li
cp
clp
-69.3328 311.371 mo
391.467 311.371 li
391.467 -34.2294 li
-69.3328 -34.2294 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
125.959 165.725 mo
301.502 165.725 li
301.502 7.24261 li
125.959 7.24261 li
cp
f
gsave
125.959 165.725 mo
301.502 165.725 li
301.502 7.24261 li
125.959 7.24261 li
cp
clp
125.959 .0389099 mo
140.587 .0389099 li
140.587 14.4463 li
125.959 14.4463 li
125.959 .0389099 li
1 .880613 .286259 .161166 cmyk
f
140.587 .0389099 mo
155.216 .0389099 li
155.216 14.4463 li
140.587 14.4463 li
140.587 .0389099 li
.0216678 .00573739 .000244144 0 cmyk
f
155.216 .0389099 mo
169.844 .0389099 li
169.844 14.4463 li
155.216 14.4463 li
155.216 .0389099 li
f
169.844 .0389099 mo
184.473 .0389099 li
184.473 14.4463 li
169.844 14.4463 li
169.844 .0389099 li
.0241398 .00671397 .000610361 0 cmyk
f
184.473 .0389099 mo
199.102 .0389099 li
199.102 14.4463 li
184.473 14.4463 li
184.473 .0389099 li
f
199.102 .0389099 mo
213.73 .0389099 li
213.73 14.4463 li
199.102 14.4463 li
199.102 .0389099 li
.0216678 .00573739 .000244144 0 cmyk
f
213.73 .0389099 mo
228.359 .0389099 li
228.359 14.4463 li
213.73 14.4463 li
213.73 .0389099 li
f
228.359 .0389099 mo
242.987 .0389099 li
242.987 14.4463 li
228.359 14.4463 li
228.359 .0389099 li
f
242.987 .0389099 mo
257.616 .0389099 li
257.616 14.4463 li
242.987 14.4463 li
242.987 .0389099 li
f
257.616 .0389099 mo
272.244 .0389099 li
272.244 14.4463 li
257.616 14.4463 li
257.616 .0389099 li
f
272.244 .0389099 mo
286.873 .0389099 li
286.873 14.4463 li
272.244 14.4463 li
272.244 .0389099 li
f
286.873 .0389099 mo
301.502 .0389099 li
301.502 14.4463 li
286.873 14.4463 li
286.873 .0389099 li
.028809 .00823987 .0010071 0 cmyk
f
125.959 14.4463 mo
140.587 14.4463 li
140.587 28.8538 li
125.959 28.8538 li
125.959 14.4463 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 14.4463 mo
155.216 14.4463 li
155.216 28.8538 li
140.587 28.8538 li
140.587 14.4463 li
1 .880613 .286259 .161166 cmyk
f
155.216 14.4463 mo
169.844 14.4463 li
169.844 28.8538 li
155.216 28.8538 li
155.216 14.4463 li
.0216678 .00573739 .000244144 0 cmyk
f
169.844 14.4463 mo
184.473 14.4463 li
184.473 28.8538 li
169.844 28.8538 li
169.844 14.4463 li
.0241398 .00671397 .000610361 0 cmyk
f
184.473 14.4463 mo
199.102 14.4463 li
199.102 28.8538 li
184.473 28.8538 li
184.473 14.4463 li
.0216678 .00573739 .000244144 0 cmyk
f
199.102 14.4463 mo
213.73 14.4463 li
213.73 28.8538 li
199.102 28.8538 li
199.102 14.4463 li
f
213.73 14.4463 mo
228.359 14.4463 li
228.359 28.8538 li
213.73 28.8538 li
213.73 14.4463 li
f
228.359 14.4463 mo
242.987 14.4463 li
242.987 28.8538 li
228.359 28.8538 li
228.359 14.4463 li
f
242.987 14.4463 mo
257.616 14.4463 li
257.616 28.8538 li
242.987 28.8538 li
242.987 14.4463 li
.0241398 .00671397 .000610361 0 cmyk
f
257.616 14.4463 mo
272.244 14.4463 li
272.244 28.8538 li
257.616 28.8538 li
257.616 14.4463 li
.0216678 .00573739 .000244144 0 cmyk
f
272.244 14.4463 mo
286.873 14.4463 li
286.873 28.8538 li
272.244 28.8538 li
272.244 14.4463 li
f
286.873 14.4463 mo
301.502 14.4463 li
301.502 28.8538 li
286.873 28.8538 li
286.873 14.4463 li
.0241398 .00671397 .000610361 0 cmyk
f
125.959 28.8538 mo
140.587 28.8538 li
140.587 43.2613 li
125.959 43.2613 li
125.959 28.8538 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 28.8538 mo
155.216 28.8538 li
155.216 43.2613 li
140.587 43.2613 li
140.587 28.8538 li
f
155.216 28.8538 mo
169.844 28.8538 li
169.844 43.2613 li
155.216 43.2613 li
155.216 28.8538 li
1 .877806 .279423 .152712 cmyk
f
169.844 28.8538 mo
184.473 28.8538 li
184.473 43.2613 li
169.844 43.2613 li
169.844 28.8538 li
.0216678 .00573739 .000244144 0 cmyk
f
184.473 28.8538 mo
199.102 28.8538 li
199.102 43.2613 li
184.473 43.2613 li
184.473 28.8538 li
.0241398 .00671397 .000610361 0 cmyk
f
199.102 28.8538 mo
213.73 28.8538 li
213.73 43.2613 li
199.102 43.2613 li
199.102 28.8538 li
.0310369 .00894179 .00109865 0 cmyk
f
213.73 28.8538 mo
228.359 28.8538 li
228.359 43.2613 li
213.73 43.2613 li
213.73 28.8538 li
.0216678 .00573739 .000244144 0 cmyk
f
228.359 28.8538 mo
242.987 28.8538 li
242.987 43.2613 li
228.359 43.2613 li
228.359 28.8538 li
.0241398 .00671397 .000610361 0 cmyk
f
242.987 28.8538 mo
257.616 28.8538 li
257.616 43.2613 li
242.987 43.2613 li
242.987 28.8538 li
.0216678 .00573739 .000244144 0 cmyk
f
257.616 28.8538 mo
272.244 28.8538 li
272.244 43.2613 li
257.616 43.2613 li
257.616 28.8538 li
f
272.244 28.8538 mo
286.873 28.8538 li
286.873 43.2613 li
272.244 43.2613 li
272.244 28.8538 li
f
286.873 28.8538 mo
301.502 28.8538 li
301.502 43.2613 li
286.873 43.2613 li
286.873 28.8538 li
.0241398 .00671397 .000610361 0 cmyk
f
125.959 43.2613 mo
140.587 43.2613 li
140.587 57.6688 li
125.959 57.6688 li
125.959 43.2613 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 43.2613 mo
155.216 43.2613 li
155.216 57.6688 li
140.587 57.6688 li
140.587 43.2613 li
.0241398 .00671397 .000610361 0 cmyk
f
155.216 43.2613 mo
169.844 43.2613 li
169.844 57.6688 li
155.216 57.6688 li
155.216 43.2613 li
.0216678 .00573739 .000244144 0 cmyk
f
169.844 43.2613 mo
184.473 43.2613 li
184.473 57.6688 li
169.844 57.6688 li
169.844 43.2613 li
1 .869749 .255955 .123537 cmyk
f
184.473 43.2613 mo
199.102 43.2613 li
199.102 57.6688 li
184.473 57.6688 li
184.473 43.2613 li
.0216678 .00573739 .000244144 0 cmyk
f
199.102 43.2613 mo
213.73 43.2613 li
213.73 57.6688 li
199.102 57.6688 li
199.102 43.2613 li
f
213.73 43.2613 mo
228.359 43.2613 li
228.359 57.6688 li
213.73 57.6688 li
213.73 43.2613 li
f
228.359 43.2613 mo
242.987 43.2613 li
242.987 57.6688 li
228.359 57.6688 li
228.359 43.2613 li
.028809 .00823987 .0010071 0 cmyk
f
242.987 43.2613 mo
257.616 43.2613 li
257.616 57.6688 li
242.987 57.6688 li
242.987 43.2613 li
.0216678 .00573739 .000244144 0 cmyk
f
257.616 43.2613 mo
272.244 43.2613 li
272.244 57.6688 li
257.616 57.6688 li
257.616 43.2613 li
f
272.244 43.2613 mo
286.873 43.2613 li
286.873 57.6688 li
272.244 57.6688 li
272.244 43.2613 li
f
286.873 43.2613 mo
301.502 43.2613 li
301.502 57.6688 li
286.873 57.6688 li
286.873 43.2613 li
.0265202 .00753796 .000854505 0 cmyk
f
125.959 57.6688 mo
140.587 57.6688 li
140.587 72.0763 li
125.959 72.0763 li
125.959 57.6688 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 57.6688 mo
155.216 57.6688 li
155.216 72.0763 li
140.587 72.0763 li
140.587 57.6688 li
f
155.216 57.6688 mo
169.844 57.6688 li
169.844 72.0763 li
155.216 72.0763 li
155.216 57.6688 li
f
169.844 57.6688 mo
184.473 57.6688 li
184.473 72.0763 li
169.844 72.0763 li
169.844 57.6688 li
f
184.473 57.6688 mo
199.102 57.6688 li
199.102 72.0763 li
184.473 72.0763 li
184.473 57.6688 li
1 .819364 .172793 .0398871 cmyk
f
199.102 57.6688 mo
213.73 57.6688 li
213.73 72.0763 li
199.102 72.0763 li
199.102 57.6688 li
.028809 .00823987 .0010071 0 cmyk
f
213.73 57.6688 mo
228.359 57.6688 li
228.359 72.0763 li
213.73 72.0763 li
213.73 57.6688 li
f
228.359 57.6688 mo
242.987 57.6688 li
242.987 72.0763 li
228.359 72.0763 li
228.359 57.6688 li
f
242.987 57.6688 mo
257.616 57.6688 li
257.616 72.0763 li
242.987 72.0763 li
242.987 57.6688 li
.0216678 .00573739 .000244144 0 cmyk
f
257.616 57.6688 mo
272.244 57.6688 li
272.244 72.0763 li
257.616 72.0763 li
257.616 57.6688 li
f
272.244 57.6688 mo
286.873 57.6688 li
286.873 72.0763 li
272.244 72.0763 li
272.244 57.6688 li
.028809 .00823987 .0010071 0 cmyk
f
286.873 57.6688 mo
301.502 57.6688 li
301.502 72.0763 li
286.873 72.0763 li
286.873 57.6688 li
.037995 .0114137 .00164797 0 cmyk
f
125.959 72.0763 mo
140.587 72.0763 li
140.587 86.4837 li
125.959 86.4837 li
125.959 72.0763 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 72.0763 mo
155.216 72.0763 li
155.216 86.4837 li
140.587 86.4837 li
140.587 72.0763 li
f
155.216 72.0763 mo
169.844 72.0763 li
169.844 86.4837 li
155.216 86.4837 li
155.216 72.0763 li
f
169.844 72.0763 mo
184.473 72.0763 li
184.473 86.4837 li
169.844 86.4837 li
169.844 72.0763 li
f
184.473 72.0763 mo
199.102 72.0763 li
199.102 86.4837 li
184.473 86.4837 li
184.473 72.0763 li
f
199.102 72.0763 mo
213.73 72.0763 li
213.73 86.4837 li
199.102 86.4837 li
199.102 72.0763 li
1 .877806 .279423 .152712 cmyk
f
213.73 72.0763 mo
228.359 72.0763 li
228.359 86.4837 li
213.73 86.4837 li
213.73 72.0763 li
.035584 .0104982 .00140383 0 cmyk
f
228.359 72.0763 mo
242.987 72.0763 li
242.987 86.4837 li
228.359 86.4837 li
228.359 72.0763 li
.0216678 .00573739 .000244144 0 cmyk
f
242.987 72.0763 mo
257.616 72.0763 li
257.616 86.4837 li
242.987 86.4837 li
242.987 72.0763 li
f
257.616 72.0763 mo
272.244 72.0763 li
272.244 86.4837 li
257.616 86.4837 li
257.616 72.0763 li
f
272.244 72.0763 mo
286.873 72.0763 li
286.873 86.4837 li
272.244 86.4837 li
272.244 72.0763 li
f
286.873 72.0763 mo
301.502 72.0763 li
301.502 86.4837 li
286.873 86.4837 li
286.873 72.0763 li
f
125.959 86.4837 mo
140.587 86.4837 li
140.587 100.891 li
125.959 100.891 li
125.959 86.4837 li
f
140.587 86.4837 mo
155.216 86.4837 li
155.216 100.891 li
140.587 100.891 li
140.587 86.4837 li
f
155.216 86.4837 mo
169.844 86.4837 li
169.844 100.891 li
155.216 100.891 li
155.216 86.4837 li
f
169.844 86.4837 mo
184.473 86.4837 li
184.473 100.891 li
169.844 100.891 li
169.844 86.4837 li
f
184.473 86.4837 mo
199.102 86.4837 li
199.102 100.891 li
184.473 100.891 li
184.473 86.4837 li
f
199.102 86.4837 mo
213.73 86.4837 li
213.73 100.891 li
199.102 100.891 li
199.102 86.4837 li
f
213.73 86.4837 mo
228.359 86.4837 li
228.359 100.891 li
213.73 100.891 li
213.73 86.4837 li
1 .880613 .286259 .161166 cmyk
f
228.359 86.4837 mo
242.987 86.4837 li
242.987 100.891 li
228.359 100.891 li
228.359 86.4837 li
.028809 .00823987 .0010071 0 cmyk
f
242.987 86.4837 mo
257.616 86.4837 li
257.616 100.891 li
242.987 100.891 li
242.987 86.4837 li
.0216678 .00573739 .000244144 0 cmyk
f
257.616 86.4837 mo
272.244 86.4837 li
272.244 100.891 li
257.616 100.891 li
257.616 86.4837 li
f
272.244 86.4837 mo
286.873 86.4837 li
286.873 100.891 li
272.244 100.891 li
272.244 86.4837 li
f
286.873 86.4837 mo
301.502 86.4837 li
301.502 100.891 li
286.873 100.891 li
286.873 86.4837 li
.0265202 .00753796 .000854505 0 cmyk
f
125.959 100.891 mo
140.587 100.891 li
140.587 115.299 li
125.959 115.299 li
125.959 100.891 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 100.891 mo
155.216 100.891 li
155.216 115.299 li
140.587 115.299 li
140.587 100.891 li
f
155.216 100.891 mo
169.844 100.891 li
169.844 115.299 li
155.216 115.299 li
155.216 100.891 li
f
169.844 100.891 mo
184.473 100.891 li
184.473 115.299 li
169.844 115.299 li
169.844 100.891 li
.0265202 .00753796 .000854505 0 cmyk
f
184.473 100.891 mo
199.102 100.891 li
199.102 115.299 li
184.473 115.299 li
184.473 100.891 li
.0216678 .00573739 .000244144 0 cmyk
f
199.102 100.891 mo
213.73 100.891 li
213.73 115.299 li
199.102 115.299 li
199.102 100.891 li
f
213.73 100.891 mo
228.359 100.891 li
228.359 115.299 li
213.73 115.299 li
213.73 100.891 li
.146853 .0462043 .00579843 0 cmyk
f
228.359 100.891 mo
242.987 100.891 li
242.987 115.299 li
228.359 115.299 li
228.359 100.891 li
.759793 .368139 .0449226 0 cmyk
f
242.987 100.891 mo
257.616 100.891 li
257.616 115.299 li
242.987 115.299 li
242.987 100.891 li
.0216678 .00573739 .000244144 0 cmyk
f
257.616 100.891 mo
272.244 100.891 li
272.244 115.299 li
257.616 115.299 li
257.616 100.891 li
f
272.244 100.891 mo
286.873 100.891 li
286.873 115.299 li
272.244 115.299 li
272.244 100.891 li
f
286.873 100.891 mo
301.502 100.891 li
301.502 115.299 li
286.873 115.299 li
286.873 100.891 li
.149935 .0474556 .00616464 0 cmyk
f
125.959 115.299 mo
140.587 115.299 li
140.587 129.706 li
125.959 129.706 li
125.959 115.299 li
.0216678 .00573739 .000244144 0 cmyk
f
140.587 115.299 mo
155.216 115.299 li
155.216 129.706 li
140.587 129.706 li
140.587 115.299 li
f
155.216 115.299 mo
169.844 115.299 li
169.844 129.706 li
155.216 129.706 li
155.216 115.299 li
f
169.844 115.299 mo
184.473 115.299 li
184.473 129.706 li
169.844 129.706 li
169.844 115.299 li
f
184.473 115.299 mo
199.102 115.299 li
199.102 129.706 li
184.473 129.706 li
184.473 115.299 li
f
199.102 115.299 mo
213.73 115.299 li
213.73 129.706 li
199.102 129.706 li
199.102 115.299 li
f
213.73 115.299 mo
228.359 115.299 li
228.359 129.706 li
213.73 129.706 li
213.73 115.299 li
.0241398 .00671397 .000610361 0 cmyk
f
228.359 115.299 mo
242.987 115.299 li
242.987 129.706 li
228.359 129.706 li
228.359 115.299 li
.0216678 .00573739 .000244144 0 cmyk
f
242.987 115.299 mo
257.616 115.299 li
257.616 129.706 li
242.987 129.706 li
242.987 115.299 li
1 .885771 .300633 .203677 cmyk
f
257.616 115.299 mo
272.244 115.299 li
272.244 129.706 li
257.616 129.706 li
257.616 115.299 li
.0216678 .00573739 .000244144 0 cmyk
f
272.244 115.299 mo
286.873 115.299 li
286.873 129.706 li
272.244 129.706 li
272.244 115.299 li
f
286.873 115.299 mo
301.502 115.299 li
301.502 129.706 li
286.873 129.706 li
286.873 115.299 li
f
125.959 129.706 mo
140.587 129.706 li
140.587 144.114 li
125.959 144.114 li
125.959 129.706 li
.0241398 .00671397 .000610361 0 cmyk
f
140.587 129.706 mo
155.216 129.706 li
155.216 144.114 li
140.587 144.114 li
140.587 129.706 li
.0216678 .00573739 .000244144 0 cmyk
f
155.216 129.706 mo
169.844 129.706 li
169.844 144.114 li
155.216 144.114 li
155.216 129.706 li
f
169.844 129.706 mo
184.473 129.706 li
184.473 144.114 li
169.844 144.114 li
169.844 129.706 li
f
184.473 129.706 mo
199.102 129.706 li
199.102 144.114 li
184.473 144.114 li
184.473 129.706 li
f
199.102 129.706 mo
213.73 129.706 li
213.73 144.114 li
199.102 144.114 li
199.102 129.706 li
f
213.73 129.706 mo
228.359 129.706 li
228.359 144.114 li
213.73 144.114 li
213.73 129.706 li
f
228.359 129.706 mo
242.987 129.706 li
242.987 144.114 li
228.359 144.114 li
228.359 129.706 li
f
242.987 129.706 mo
257.616 129.706 li
257.616 144.114 li
242.987 144.114 li
242.987 129.706 li
f
257.616 129.706 mo
272.244 129.706 li
272.244 144.114 li
257.616 144.114 li
257.616 129.706 li
1 .884916 .298192 .192264 cmyk
f
272.244 129.706 mo
286.873 129.706 li
286.873 144.114 li
272.244 144.114 li
272.244 129.706 li
.0216678 .00573739 .000244144 0 cmyk
f
286.873 129.706 mo
301.502 129.706 li
301.502 144.114 li
286.873 144.114 li
286.873 129.706 li
f
125.959 144.114 mo
140.587 144.114 li
140.587 158.521 li
125.959 158.521 li
125.959 144.114 li
.0241398 .00671397 .000610361 0 cmyk
f
140.587 144.114 mo
155.216 144.114 li
155.216 158.521 li
140.587 158.521 li
140.587 144.114 li
.0216678 .00573739 .000244144 0 cmyk
f
155.216 144.114 mo
169.844 144.114 li
169.844 158.521 li
155.216 158.521 li
155.216 144.114 li
f
169.844 144.114 mo
184.473 144.114 li
184.473 158.521 li
169.844 158.521 li
169.844 144.114 li
f
184.473 144.114 mo
199.102 144.114 li
199.102 158.521 li
184.473 158.521 li
184.473 144.114 li
f
199.102 144.114 mo
213.73 144.114 li
213.73 158.521 li
199.102 158.521 li
199.102 144.114 li
f
213.73 144.114 mo
228.359 144.114 li
228.359 158.521 li
213.73 158.521 li
213.73 144.114 li
f
228.359 144.114 mo
242.987 144.114 li
242.987 158.521 li
228.359 158.521 li
228.359 144.114 li
f
242.987 144.114 mo
257.616 144.114 li
257.616 158.521 li
242.987 158.521 li
242.987 144.114 li
f
257.616 144.114 mo
272.244 144.114 li
272.244 158.521 li
257.616 158.521 li
257.616 144.114 li
f
272.244 144.114 mo
286.873 144.114 li
286.873 158.521 li
272.244 158.521 li
272.244 144.114 li
1 .885771 .300633 .203677 cmyk
f
286.873 144.114 mo
301.502 144.114 li
301.502 158.521 li
286.873 158.521 li
286.873 144.114 li
.0216678 .00573739 .000244144 0 cmyk
f
125.959 158.521 mo
140.587 158.521 li
140.587 172.929 li
125.959 172.929 li
125.959 158.521 li
f
140.587 158.521 mo
155.216 158.521 li
155.216 172.929 li
140.587 172.929 li
140.587 158.521 li
f
155.216 158.521 mo
169.844 158.521 li
169.844 172.929 li
155.216 172.929 li
155.216 158.521 li
f
169.844 158.521 mo
184.473 158.521 li
184.473 172.929 li
169.844 172.929 li
169.844 158.521 li
f
184.473 158.521 mo
199.102 158.521 li
199.102 172.929 li
184.473 172.929 li
184.473 158.521 li
f
199.102 158.521 mo
213.73 158.521 li
213.73 172.929 li
199.102 172.929 li
199.102 158.521 li
f
213.73 158.521 mo
228.359 158.521 li
228.359 172.929 li
213.73 172.929 li
213.73 158.521 li
.028809 .00823987 .0010071 0 cmyk
f
228.359 158.521 mo
242.987 158.521 li
242.987 172.929 li
228.359 172.929 li
228.359 158.521 li
.0690623 .0205081 .00317388 0 cmyk
f
242.987 158.521 mo
257.616 158.521 li
257.616 172.929 li
242.987 172.929 li
242.987 158.521 li
.0216678 .00573739 .000244144 0 cmyk
f
257.616 158.521 mo
272.244 158.521 li
272.244 172.929 li
257.616 172.929 li
257.616 158.521 li
f
272.244 158.521 mo
286.873 158.521 li
286.873 172.929 li
272.244 172.929 li
272.244 158.521 li
f
286.873 158.521 mo
301.502 158.521 li
301.502 172.929 li
286.873 172.929 li
286.873 158.521 li
1 .826993 .18436 .051667 cmyk
f
grestore
gsave
-69.3328 311.371 mo
391.467 311.371 li
391.467 -34.2294 li
-69.3328 -34.2294 li
cp
clp
133.273 165.725 mo
133.273 169.225 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
133.273 165.725 mo
133.273 169.225 li
@
133.29 269.22 mo
133.29 270.242 133.416 270.942 133.64 271.334 cv
133.878 271.726 134.27 271.922 134.83 271.922 cv
135.278 271.922 135.642 271.782 135.894 271.488 cv
136.16 271.194 136.286 270.788 136.286 270.284 cv
136.286 269.584 136.048 269.024 135.544 268.604 cv
135.054 268.184 134.396 267.974 133.57 267.974 cv
133.29 267.974 li
133.29 269.22 li
132.772 266.714 mo
137.14 266.714 li
137.14 267.974 li
135.978 267.974 li
136.454 268.268 136.79 268.632 137 269.052 cv
137.21 269.472 137.322 270.004 137.322 270.62 cv
137.322 271.404 137.112 272.034 136.678 272.496 cv
136.244 272.958 135.656 273.182 134.914 273.182 cv
134.06 273.182 133.416 272.902 132.968 272.314 cv
132.534 271.74 132.31 270.886 132.31 269.738 cv
132.31 267.974 li
132.184 267.974 li
131.61 267.974 131.162 268.17 130.84 268.548 cv
130.532 268.926 130.364 269.458 130.364 270.144 cv
130.364 270.592 130.42 271.012 130.532 271.432 cv
130.644 271.852 130.798 272.244 130.994 272.622 cv
129.832 272.622 li
129.664 272.174 129.524 271.726 129.44 271.292 cv
129.356 270.858 129.3 270.438 129.3 270.018 cv
129.3 268.912 129.594 268.086 130.168 267.54 cv
130.742 266.994 131.61 266.714 132.772 266.714 cv
f
135.992 262.906 mo
140.038 262.906 li
140.038 264.166 li
129.482 264.166 li
129.482 262.906 li
130.644 262.906 li
130.196 262.654 129.86 262.318 129.636 261.912 cv
129.412 261.506 129.3 261.016 129.3 260.456 cv
129.3 259.532 129.678 258.776 130.406 258.188 cv
131.148 257.614 132.114 257.32 133.318 257.32 cv
134.522 257.32 135.502 257.614 136.23 258.188 cv
136.958 258.776 137.322 259.532 137.322 260.456 cv
137.322 261.016 137.21 261.506 137 261.912 cv
136.79 262.318 136.454 262.654 135.992 262.906 cv
133.318 258.622 mo
132.394 258.622 131.68 258.818 131.148 259.196 cv
130.616 259.588 130.35 260.106 130.35 260.764 cv
130.35 261.436 130.616 261.954 131.148 262.332 cv
131.68 262.724 132.394 262.906 133.318 262.906 cv
134.242 262.906 134.97 262.724 135.502 262.332 cv
136.034 261.954 136.286 261.436 136.286 260.764 cv
136.286 260.106 136.034 259.588 135.502 259.196 cv
134.97 258.818 134.242 258.622 133.318 258.622 cv
f
129.482 255.234 mo
129.482 253.974 li
137.14 253.974 li
137.14 255.234 li
129.482 255.234 li
126.5 255.234 mo
126.5 253.974 li
128.096 253.974 li
128.096 255.234 li
126.5 255.234 li
f
135.404 251.16 mo
135.404 249.718 li
137.14 249.718 li
137.14 251.16 li
135.404 251.16 li
f
133.318 241.388 mo
132.394 241.388 131.68 241.584 131.148 241.962 cv
130.616 242.354 130.35 242.872 130.35 243.53 cv
130.35 244.202 130.616 244.72 131.148 245.098 cv
131.68 245.49 132.394 245.672 133.318 245.672 cv
134.242 245.672 134.97 245.49 135.502 245.098 cv
136.034 244.72 136.286 244.202 136.286 243.53 cv
136.286 242.872 136.034 242.354 135.502 241.962 cv
134.97 241.584 134.242 241.388 133.318 241.388 cv
130.644 245.672 mo
130.196 245.42 129.86 245.084 129.636 244.678 cv
129.412 244.272 129.3 243.782 129.3 243.222 cv
129.3 242.298 129.678 241.542 130.406 240.954 cv
131.148 240.38 132.114 240.086 133.318 240.086 cv
134.522 240.086 135.502 240.38 136.23 240.954 cv
136.958 241.542 137.322 242.298 137.322 243.222 cv
137.322 243.782 137.21 244.272 137 244.678 cv
136.79 245.084 136.454 245.42 135.992 245.672 cv
137.14 245.672 li
137.14 246.932 li
126.5 246.932 li
126.5 245.672 li
130.644 245.672 li
f
129.482 238 mo
129.482 236.74 li
137.14 236.74 li
137.14 238 li
129.482 238 li
126.5 238 mo
126.5 236.74 li
128.096 236.74 li
128.096 238 li
126.5 238 li
f
126.5 234.108 mo
126.5 232.848 li
137.14 232.848 li
137.14 234.108 li
126.5 234.108 li
f
129.482 230.216 mo
129.482 228.956 li
137.14 228.956 li
137.14 230.216 li
129.482 230.216 li
126.5 230.216 mo
126.5 228.956 li
128.096 228.956 li
128.096 230.216 li
126.5 230.216 li
f
133.318 220.822 mo
132.394 220.822 131.68 221.018 131.148 221.396 cv
130.616 221.788 130.35 222.306 130.35 222.964 cv
130.35 223.636 130.616 224.154 131.148 224.532 cv
131.68 224.924 132.394 225.106 133.318 225.106 cv
134.242 225.106 134.97 224.924 135.502 224.532 cv
136.034 224.154 136.286 223.636 136.286 222.964 cv
136.286 222.306 136.034 221.788 135.502 221.396 cv
134.97 221.018 134.242 220.822 133.318 220.822 cv
130.644 225.106 mo
130.196 224.854 129.86 224.518 129.636 224.112 cv
129.412 223.706 129.3 223.216 129.3 222.656 cv
129.3 221.732 129.678 220.976 130.406 220.388 cv
131.148 219.814 132.114 219.52 133.318 219.52 cv
134.522 219.52 135.502 219.814 136.23 220.388 cv
136.958 220.976 137.322 221.732 137.322 222.656 cv
137.322 223.216 137.21 223.706 137 224.112 cv
136.79 224.518 136.454 224.854 135.992 225.106 cv
137.14 225.106 li
137.14 226.366 li
126.5 226.366 li
126.5 225.106 li
130.644 225.106 li
f
129.482 217.434 mo
129.482 216.174 li
137.14 216.174 li
137.14 217.434 li
129.482 217.434 li
126.5 217.434 mo
126.5 216.174 li
128.096 216.174 li
128.096 217.434 li
126.5 217.434 li
f
126.5 213.542 mo
126.5 212.282 li
137.14 212.282 li
137.14 213.542 li
126.5 213.542 li
f
129.482 209.65 mo
129.482 208.39 li
137.14 208.39 li
137.14 209.65 li
129.482 209.65 li
126.5 209.65 mo
126.5 208.39 li
128.096 208.39 li
128.096 209.65 li
126.5 209.65 li
f
135.404 205.576 mo
135.404 204.134 li
137.14 204.134 li
137.14 205.576 li
135.404 205.576 li
f
129.776 195.79 mo
130.952 195.79 li
130.756 196.154 130.616 196.504 130.518 196.868 cv
130.42 197.232 130.364 197.582 130.364 197.946 cv
130.364 198.758 130.63 199.402 131.148 199.85 cv
131.666 200.298 132.394 200.522 133.318 200.522 cv
134.256 200.522 134.984 200.298 135.502 199.85 cv
136.02 199.402 136.272 198.758 136.272 197.946 cv
136.272 197.582 136.23 197.232 136.132 196.868 cv
136.034 196.504 135.88 196.154 135.684 195.79 cv
136.846 195.79 li
137.014 196.154 137.14 196.518 137.21 196.882 cv
137.28 197.26 137.322 197.666 137.322 198.086 cv
137.322 199.234 136.972 200.158 136.244 200.83 cv
135.53 201.516 134.55 201.852 133.318 201.852 cv
132.072 201.852 131.092 201.516 130.378 200.83 cv
129.664 200.144 129.3 199.206 129.3 198.002 cv
129.3 197.61 129.342 197.232 129.426 196.868 cv
129.51 196.504 129.622 196.14 129.776 195.79 cv
f
130.364 190.638 mo
130.364 191.31 130.63 191.842 131.162 192.234 cv
131.694 192.626 132.408 192.822 133.318 192.822 cv
134.242 192.822 134.956 192.64 135.488 192.248 cv
136.02 191.856 136.272 191.324 136.272 190.638 cv
136.272 189.966 136.02 189.434 135.488 189.042 cv
134.956 188.65 134.242 188.454 133.318 188.454 cv
132.422 188.454 131.694 188.65 131.162 189.042 cv
130.63 189.434 130.364 189.966 130.364 190.638 cv
129.3 190.638 mo
129.3 189.546 129.664 188.692 130.364 188.062 cv
131.078 187.446 132.058 187.124 133.318 187.124 cv
134.578 187.124 135.558 187.446 136.258 188.062 cv
136.972 188.692 137.322 189.546 137.322 190.638 cv
137.322 191.744 136.972 192.612 136.258 193.228 cv
135.558 193.844 134.578 194.152 133.318 194.152 cv
132.058 194.152 131.078 193.844 130.364 193.228 cv
129.664 192.612 129.3 191.744 129.3 190.638 cv
f
130.952 179.074 mo
130.392 178.766 129.986 178.388 129.706 177.954 cv
129.44 177.52 129.3 177.002 129.3 176.4 cv
129.3 175.616 129.58 175 130.14 174.566 cv
130.7 174.132 131.498 173.908 132.52 173.908 cv
137.14 173.908 li
137.14 175.168 li
132.562 175.168 li
131.834 175.168 131.288 175.308 130.924 175.56 cv
130.574 175.826 130.392 176.218 130.392 176.75 cv
130.392 177.408 130.616 177.926 131.05 178.304 cv
131.484 178.682 132.072 178.864 132.814 178.864 cv
137.14 178.864 li
137.14 180.124 li
132.562 180.124 li
131.834 180.124 131.288 180.264 130.924 180.516 cv
130.574 180.782 130.392 181.188 130.392 181.72 cv
130.392 182.364 130.616 182.882 131.05 183.26 cv
131.484 183.638 132.072 183.82 132.814 183.82 cv
137.14 183.82 li
137.14 185.08 li
129.482 185.08 li
129.482 183.82 li
130.672 183.82 li
130.21 183.54 129.86 183.19 129.636 182.784 cv
129.412 182.392 129.3 181.916 129.3 181.356 cv
129.3 180.796 129.44 180.334 129.72 179.942 cv
130 179.55 130.42 179.27 130.952 179.074 cv
f
147.902 165.725 mo
147.902 169.225 li
f
147.902 165.725 mo
147.902 169.225 li
@
147.919 256.173 mo
147.919 257.195 148.045 257.895 148.269 258.287 cv
148.507 258.679 148.899 258.875 149.459 258.875 cv
149.907 258.875 150.271 258.735 150.523 258.441 cv
150.789 258.147 150.915 257.741 150.915 257.237 cv
150.915 256.537 150.677 255.977 150.173 255.557 cv
149.683 255.137 149.025 254.927 148.199 254.927 cv
147.919 254.927 li
147.919 256.173 li
147.401 253.667 mo
151.769 253.667 li
151.769 254.927 li
150.607 254.927 li
151.083 255.221 151.419 255.585 151.629 256.005 cv
151.839 256.425 151.951 256.957 151.951 257.573 cv
151.951 258.357 151.741 258.987 151.307 259.449 cv
150.873 259.911 150.285 260.135 149.543 260.135 cv
148.689 260.135 148.045 259.855 147.597 259.267 cv
147.163 258.693 146.939 257.839 146.939 256.691 cv
146.939 254.927 li
146.813 254.927 li
146.239 254.927 145.791 255.123 145.469 255.501 cv
145.161 255.879 144.993 256.411 144.993 257.097 cv
144.993 257.545 145.049 257.965 145.161 258.385 cv
145.273 258.805 145.427 259.197 145.623 259.575 cv
144.461 259.575 li
144.293 259.127 144.153 258.679 144.069 258.245 cv
143.985 257.811 143.929 257.391 143.929 256.971 cv
143.929 255.865 144.223 255.039 144.797 254.493 cv
145.371 253.947 146.239 253.667 147.401 253.667 cv
f
150.621 249.859 mo
154.667 249.859 li
154.667 251.119 li
144.111 251.119 li
144.111 249.859 li
145.273 249.859 li
144.825 249.607 144.489 249.271 144.265 248.865 cv
144.041 248.459 143.929 247.969 143.929 247.409 cv
143.929 246.485 144.307 245.729 145.035 245.141 cv
145.777 244.567 146.743 244.273 147.947 244.273 cv
149.151 244.273 150.131 244.567 150.859 245.141 cv
151.587 245.729 151.951 246.485 151.951 247.409 cv
151.951 247.969 151.839 248.459 151.629 248.865 cv
151.419 249.271 151.083 249.607 150.621 249.859 cv
147.947 245.575 mo
147.023 245.575 146.309 245.771 145.777 246.149 cv
145.245 246.541 144.979 247.059 144.979 247.717 cv
144.979 248.389 145.245 248.907 145.777 249.285 cv
146.309 249.677 147.023 249.859 147.947 249.859 cv
148.871 249.859 149.599 249.677 150.131 249.285 cv
150.663 248.907 150.915 248.389 150.915 247.717 cv
150.915 247.059 150.663 246.541 150.131 246.149 cv
149.599 245.771 148.871 245.575 147.947 245.575 cv
f
144.111 242.187 mo
144.111 240.927 li
151.769 240.927 li
151.769 242.187 li
144.111 242.187 li
141.129 242.187 mo
141.129 240.927 li
142.725 240.927 li
142.725 242.187 li
141.129 242.187 li
f
150.033 238.113 mo
150.033 236.671 li
151.769 236.671 li
151.769 238.113 li
150.033 238.113 li
f
144.111 234.571 mo
144.111 233.311 li
150.089 231.743 li
144.111 230.175 li
144.111 228.691 li
150.089 227.123 li
144.111 225.555 li
144.111 224.295 li
151.769 226.297 li
151.769 227.781 li
145.497 229.433 li
151.769 231.085 li
151.769 232.569 li
144.111 234.571 li
f
147.625 215.839 mo
148.241 215.839 li
148.241 221.621 li
149.109 221.565 149.781 221.313 150.229 220.837 cv
150.677 220.375 150.901 219.731 150.901 218.891 cv
150.901 218.415 150.845 217.939 150.733 217.491 cv
150.621 217.043 150.439 216.581 150.187 216.133 cv
151.377 216.133 li
151.573 216.581 151.727 217.043 151.811 217.519 cv
151.895 217.995 151.951 218.485 151.951 218.961 cv
151.951 220.193 151.601 221.159 150.901 221.873 cv
150.201 222.587 149.235 222.937 148.017 222.937 cv
146.771 222.937 145.777 222.601 145.035 221.929 cv
144.307 221.257 143.929 220.333 143.929 219.185 cv
143.929 218.149 144.265 217.337 144.923 216.735 cv
145.595 216.147 146.491 215.839 147.625 215.839 cv
147.261 217.099 mo
146.575 217.113 146.029 217.309 145.609 217.673 cv
145.203 218.051 144.993 218.555 144.993 219.171 cv
144.993 219.871 145.203 220.431 145.595 220.851 cv
145.987 221.271 146.547 221.523 147.261 221.579 cv
147.261 217.099 li
f
144.111 213.781 mo
144.111 212.521 li
151.769 212.521 li
151.769 213.781 li
144.111 213.781 li
141.129 213.781 mo
141.129 212.521 li
142.725 212.521 li
142.725 213.781 li
141.129 213.781 li
f
147.947 204.387 mo
147.023 204.387 146.309 204.583 145.777 204.961 cv
145.245 205.353 144.979 205.871 144.979 206.529 cv
144.979 207.201 145.245 207.719 145.777 208.097 cv
146.309 208.489 147.023 208.671 147.947 208.671 cv
148.871 208.671 149.599 208.489 150.131 208.097 cv
150.663 207.719 150.915 207.201 150.915 206.529 cv
150.915 205.871 150.663 205.353 150.131 204.961 cv
149.599 204.583 148.871 204.387 147.947 204.387 cv
145.273 208.671 mo
144.825 208.419 144.489 208.083 144.265 207.677 cv
144.041 207.271 143.929 206.781 143.929 206.221 cv
143.929 205.297 144.307 204.541 145.035 203.953 cv
145.777 203.379 146.743 203.085 147.947 203.085 cv
149.151 203.085 150.131 203.379 150.859 203.953 cv
151.587 204.541 151.951 205.297 151.951 206.221 cv
151.951 206.781 151.839 207.271 151.629 207.677 cv
151.419 208.083 151.083 208.419 150.621 208.671 cv
151.769 208.671 li
151.769 209.931 li
141.129 209.931 li
141.129 208.671 li
145.273 208.671 li
f
144.993 198.031 mo
144.993 198.703 145.259 199.235 145.791 199.627 cv
146.323 200.019 147.037 200.215 147.947 200.215 cv
148.871 200.215 149.585 200.033 150.117 199.641 cv
150.649 199.249 150.901 198.717 150.901 198.031 cv
150.901 197.359 150.649 196.827 150.117 196.435 cv
149.585 196.043 148.871 195.847 147.947 195.847 cv
147.051 195.847 146.323 196.043 145.791 196.435 cv
145.259 196.827 144.993 197.359 144.993 198.031 cv
143.929 198.031 mo
143.929 196.939 144.293 196.085 144.993 195.455 cv
145.707 194.839 146.687 194.517 147.947 194.517 cv
149.207 194.517 150.187 194.839 150.887 195.455 cv
151.601 196.085 151.951 196.939 151.951 198.031 cv
151.951 199.137 151.601 200.005 150.887 200.621 cv
150.187 201.237 149.207 201.545 147.947 201.545 cv
146.687 201.545 145.707 201.237 144.993 200.621 cv
144.293 200.005 143.929 199.137 143.929 198.031 cv
f
150.033 192.249 mo
150.033 190.807 li
151.769 190.807 li
151.769 192.249 li
150.033 192.249 li
f
144.405 182.463 mo
145.581 182.463 li
145.385 182.827 145.245 183.177 145.147 183.541 cv
145.049 183.905 144.993 184.255 144.993 184.619 cv
144.993 185.431 145.259 186.075 145.777 186.523 cv
146.295 186.971 147.023 187.195 147.947 187.195 cv
148.885 187.195 149.613 186.971 150.131 186.523 cv
150.649 186.075 150.901 185.431 150.901 184.619 cv
150.901 184.255 150.859 183.905 150.761 183.541 cv
150.663 183.177 150.509 182.827 150.313 182.463 cv
151.475 182.463 li
151.643 182.827 151.769 183.191 151.839 183.555 cv
151.909 183.933 151.951 184.339 151.951 184.759 cv
151.951 185.907 151.601 186.831 150.873 187.503 cv
150.159 188.189 149.179 188.525 147.947 188.525 cv
146.701 188.525 145.721 188.189 145.007 187.503 cv
144.293 186.817 143.929 185.879 143.929 184.675 cv
143.929 184.283 143.971 183.905 144.055 183.541 cv
144.139 183.177 144.251 182.813 144.405 182.463 cv
f
147.149 173.909 mo
151.769 173.909 li
151.769 175.169 li
147.191 175.169 li
146.463 175.169 145.931 175.323 145.567 175.603 cv
145.203 175.883 145.021 176.303 145.021 176.863 cv
145.021 177.549 145.245 178.081 145.679 178.473 cv
146.113 178.865 146.701 179.061 147.443 179.061 cv
151.769 179.061 li
151.769 180.321 li
144.111 180.321 li
144.111 179.061 li
145.301 179.061 li
144.853 178.767 144.503 178.417 144.279 177.997 cv
144.055 177.591 143.929 177.115 143.929 176.583 cv
143.929 175.715 144.209 175.043 144.755 174.595 cv
145.301 174.147 146.099 173.909 147.149 173.909 cv
f
162.53 165.725 mo
162.53 169.225 li
f
162.53 165.725 mo
162.53 169.225 li
@
159.033 251.83 mo
160.209 251.83 li
160.013 252.194 159.873 252.544 159.775 252.908 cv
159.677 253.272 159.621 253.622 159.621 253.986 cv
159.621 254.798 159.887 255.442 160.405 255.89 cv
160.923 256.338 161.651 256.562 162.575 256.562 cv
163.513 256.562 164.241 256.338 164.759 255.89 cv
165.277 255.442 165.529 254.798 165.529 253.986 cv
165.529 253.622 165.487 253.272 165.389 252.908 cv
165.291 252.544 165.137 252.194 164.941 251.83 cv
166.103 251.83 li
166.271 252.194 166.397 252.558 166.467 252.922 cv
166.537 253.3 166.579 253.706 166.579 254.126 cv
166.579 255.274 166.229 256.198 165.501 256.87 cv
164.787 257.556 163.807 257.892 162.575 257.892 cv
161.329 257.892 160.349 257.556 159.635 256.87 cv
158.921 256.184 158.557 255.246 158.557 254.042 cv
158.557 253.65 158.599 253.272 158.683 252.908 cv
158.767 252.544 158.879 252.18 159.033 251.83 cv
f
161.777 243.276 mo
166.397 243.276 li
166.397 244.536 li
161.819 244.536 li
161.091 244.536 160.559 244.69 160.195 244.97 cv
159.831 245.25 159.649 245.67 159.649 246.23 cv
159.649 246.916 159.873 247.448 160.307 247.84 cv
160.741 248.232 161.329 248.428 162.071 248.428 cv
166.397 248.428 li
166.397 249.688 li
158.739 249.688 li
158.739 248.428 li
159.929 248.428 li
159.481 248.134 159.131 247.784 158.907 247.364 cv
158.683 246.958 158.557 246.482 158.557 245.95 cv
158.557 245.082 158.837 244.41 159.383 243.962 cv
159.929 243.514 160.727 243.276 161.777 243.276 cv
f
164.661 240.588 mo
164.661 239.146 li
166.397 239.146 li
166.397 240.588 li
164.661 240.588 li
f
162.575 230.816 mo
161.651 230.816 160.937 231.012 160.405 231.39 cv
159.873 231.782 159.607 232.3 159.607 232.958 cv
159.607 233.63 159.873 234.148 160.405 234.526 cv
160.937 234.918 161.651 235.1 162.575 235.1 cv
163.499 235.1 164.227 234.918 164.759 234.526 cv
165.291 234.148 165.543 233.63 165.543 232.958 cv
165.543 232.3 165.291 231.782 164.759 231.39 cv
164.227 231.012 163.499 230.816 162.575 230.816 cv
159.901 235.1 mo
159.453 234.848 159.117 234.512 158.893 234.106 cv
158.669 233.7 158.557 233.21 158.557 232.65 cv
158.557 231.726 158.935 230.97 159.663 230.382 cv
160.405 229.808 161.371 229.514 162.575 229.514 cv
163.779 229.514 164.759 229.808 165.487 230.382 cv
166.215 230.97 166.579 231.726 166.579 232.65 cv
166.579 233.21 166.467 233.7 166.257 234.106 cv
166.047 234.512 165.711 234.848 165.249 235.1 cv
166.397 235.1 li
166.397 236.36 li
155.757 236.36 li
155.757 235.1 li
159.901 235.1 li
f
158.739 227.428 mo
158.739 226.168 li
166.397 226.168 li
166.397 227.428 li
158.739 227.428 li
155.757 227.428 mo
155.757 226.168 li
157.353 226.168 li
157.353 227.428 li
155.757 227.428 li
f
161.777 217.166 mo
166.397 217.166 li
166.397 218.426 li
161.819 218.426 li
161.091 218.426 160.559 218.58 160.195 218.86 cv
159.831 219.14 159.649 219.56 159.649 220.12 cv
159.649 220.806 159.873 221.338 160.307 221.73 cv
160.741 222.122 161.329 222.318 162.071 222.318 cv
166.397 222.318 li
166.397 223.578 li
158.739 223.578 li
158.739 222.318 li
159.929 222.318 li
159.481 222.024 159.131 221.674 158.907 221.254 cv
158.683 220.848 158.557 220.372 158.557 219.84 cv
158.557 218.972 158.837 218.3 159.383 217.852 cv
159.929 217.404 160.727 217.166 161.777 217.166 cv
f
162.477 209.62 mo
161.581 209.62 160.867 209.816 160.363 210.18 cv
159.859 210.558 159.607 211.09 159.607 211.762 cv
159.607 212.434 159.859 212.966 160.363 213.344 cv
160.867 213.722 161.581 213.904 162.477 213.904 cv
163.387 213.904 164.087 213.722 164.591 213.344 cv
165.095 212.966 165.347 212.434 165.347 211.762 cv
165.347 211.09 165.095 210.558 164.591 210.18 cv
164.087 209.816 163.387 209.62 162.477 209.62 cv
165.445 208.36 mo
166.733 208.36 167.699 208.654 168.343 209.228 cv
168.973 209.816 169.295 210.698 169.295 211.888 cv
169.295 212.336 169.253 212.742 169.197 213.134 cv
169.127 213.526 169.029 213.918 168.889 214.282 cv
167.671 214.282 li
167.867 213.918 168.007 213.554 168.105 213.19 cv
168.203 212.826 168.259 212.462 168.259 212.084 cv
168.259 211.272 168.035 210.656 167.615 210.236 cv
167.181 209.83 166.537 209.62 165.669 209.62 cv
165.053 209.62 li
165.501 209.886 165.837 210.222 166.061 210.628 cv
166.285 211.034 166.397 211.51 166.397 212.07 cv
166.397 213.022 166.047 213.778 165.333 214.352 cv
164.619 214.926 163.667 215.206 162.477 215.206 cv
161.301 215.206 160.349 214.926 159.635 214.352 cv
158.921 213.778 158.557 213.022 158.557 212.07 cv
158.557 211.51 158.669 211.034 158.893 210.628 cv
159.117 210.222 159.453 209.886 159.901 209.62 cv
158.739 209.62 li
158.739 208.36 li
165.445 208.36 li
f
164.661 205.588 mo
164.661 204.146 li
166.397 204.146 li
166.397 205.588 li
164.661 205.588 li
f
159.033 195.802 mo
160.209 195.802 li
160.013 196.166 159.873 196.516 159.775 196.88 cv
159.677 197.244 159.621 197.594 159.621 197.958 cv
159.621 198.77 159.887 199.414 160.405 199.862 cv
160.923 200.31 161.651 200.534 162.575 200.534 cv
163.513 200.534 164.241 200.31 164.759 199.862 cv
165.277 199.414 165.529 198.77 165.529 197.958 cv
165.529 197.594 165.487 197.244 165.389 196.88 cv
165.291 196.516 165.137 196.166 164.941 195.802 cv
166.103 195.802 li
166.271 196.166 166.397 196.53 166.467 196.894 cv
166.537 197.272 166.579 197.678 166.579 198.098 cv
166.579 199.246 166.229 200.17 165.501 200.842 cv
164.787 201.528 163.807 201.864 162.575 201.864 cv
161.329 201.864 160.349 201.528 159.635 200.842 cv
158.921 200.156 158.557 199.218 158.557 198.014 cv
158.557 197.622 158.599 197.244 158.683 196.88 cv
158.767 196.516 158.879 196.152 159.033 195.802 cv
f
159.621 190.65 mo
159.621 191.322 159.887 191.854 160.419 192.246 cv
160.951 192.638 161.665 192.834 162.575 192.834 cv
163.499 192.834 164.213 192.652 164.745 192.26 cv
165.277 191.868 165.529 191.336 165.529 190.65 cv
165.529 189.978 165.277 189.446 164.745 189.054 cv
164.213 188.662 163.499 188.466 162.575 188.466 cv
161.679 188.466 160.951 188.662 160.419 189.054 cv
159.887 189.446 159.621 189.978 159.621 190.65 cv
158.557 190.65 mo
158.557 189.558 158.921 188.704 159.621 188.074 cv
160.335 187.458 161.315 187.136 162.575 187.136 cv
163.835 187.136 164.815 187.458 165.515 188.074 cv
166.229 188.704 166.579 189.558 166.579 190.65 cv
166.579 191.756 166.229 192.624 165.515 193.24 cv
164.815 193.856 163.835 194.164 162.575 194.164 cv
161.315 194.164 160.335 193.856 159.621 193.24 cv
158.921 192.624 158.557 191.756 158.557 190.65 cv
f
160.209 179.086 mo
159.649 178.778 159.243 178.4 158.963 177.966 cv
158.697 177.532 158.557 177.014 158.557 176.412 cv
158.557 175.628 158.837 175.012 159.397 174.578 cv
159.957 174.144 160.755 173.92 161.777 173.92 cv
166.397 173.92 li
166.397 175.18 li
161.819 175.18 li
161.091 175.18 160.545 175.32 160.181 175.572 cv
159.831 175.838 159.649 176.23 159.649 176.762 cv
159.649 177.42 159.873 177.938 160.307 178.316 cv
160.741 178.694 161.329 178.876 162.071 178.876 cv
166.397 178.876 li
166.397 180.136 li
161.819 180.136 li
161.091 180.136 160.545 180.276 160.181 180.528 cv
159.831 180.794 159.649 181.2 159.649 181.732 cv
159.649 182.376 159.873 182.894 160.307 183.272 cv
160.741 183.65 161.329 183.832 162.071 183.832 cv
166.397 183.832 li
166.397 185.092 li
158.739 185.092 li
158.739 183.832 li
159.929 183.832 li
159.467 183.552 159.117 183.202 158.893 182.796 cv
158.669 182.404 158.557 181.928 158.557 181.368 cv
158.557 180.808 158.697 180.346 158.977 179.954 cv
159.257 179.562 159.677 179.282 160.209 179.086 cv
f
177.159 165.725 mo
177.159 169.225 li
f
177.159 165.725 mo
177.159 169.225 li
@
176.406 265.492 mo
181.026 265.492 li
181.026 266.752 li
176.448 266.752 li
175.72 266.752 175.188 266.906 174.824 267.186 cv
174.46 267.466 174.278 267.886 174.278 268.446 cv
174.278 269.132 174.502 269.664 174.936 270.056 cv
175.37 270.448 175.958 270.644 176.7 270.644 cv
181.026 270.644 li
181.026 271.904 li
170.386 271.904 li
170.386 270.644 li
174.558 270.644 li
174.11 270.35 173.76 270 173.536 269.58 cv
173.312 269.174 173.186 268.698 173.186 268.166 cv
173.186 267.298 173.466 266.626 174.012 266.178 cv
174.558 265.73 175.356 265.492 176.406 265.492 cv
f
174.838 257.022 mo
174.278 256.714 173.872 256.336 173.592 255.902 cv
173.326 255.468 173.186 254.95 173.186 254.348 cv
173.186 253.564 173.466 252.948 174.026 252.514 cv
174.586 252.08 175.384 251.856 176.406 251.856 cv
181.026 251.856 li
181.026 253.116 li
176.448 253.116 li
175.72 253.116 175.174 253.256 174.81 253.508 cv
174.46 253.774 174.278 254.166 174.278 254.698 cv
174.278 255.356 174.502 255.874 174.936 256.252 cv
175.37 256.63 175.958 256.812 176.7 256.812 cv
181.026 256.812 li
181.026 258.072 li
176.448 258.072 li
175.72 258.072 175.174 258.212 174.81 258.464 cv
174.46 258.73 174.278 259.136 174.278 259.668 cv
174.278 260.312 174.502 260.83 174.936 261.208 cv
175.37 261.586 175.958 261.768 176.7 261.768 cv
181.026 261.768 li
181.026 263.028 li
173.368 263.028 li
173.368 261.768 li
174.558 261.768 li
174.096 261.488 173.746 261.138 173.522 260.732 cv
173.298 260.34 173.186 259.864 173.186 259.304 cv
173.186 258.744 173.326 258.282 173.606 257.89 cv
173.886 257.498 174.306 257.218 174.838 257.022 cv
f
179.29 249.168 mo
179.29 247.726 li
181.026 247.726 li
181.026 249.168 li
179.29 249.168 li
f
177.204 239.396 mo
176.28 239.396 175.566 239.592 175.034 239.97 cv
174.502 240.362 174.236 240.88 174.236 241.538 cv
174.236 242.21 174.502 242.728 175.034 243.106 cv
175.566 243.498 176.28 243.68 177.204 243.68 cv
178.128 243.68 178.856 243.498 179.388 243.106 cv
179.92 242.728 180.172 242.21 180.172 241.538 cv
180.172 240.88 179.92 240.362 179.388 239.97 cv
178.856 239.592 178.128 239.396 177.204 239.396 cv
174.53 243.68 mo
174.082 243.428 173.746 243.092 173.522 242.686 cv
173.298 242.28 173.186 241.79 173.186 241.23 cv
173.186 240.306 173.564 239.55 174.292 238.962 cv
175.034 238.388 176 238.094 177.204 238.094 cv
178.408 238.094 179.388 238.388 180.116 238.962 cv
180.844 239.55 181.208 240.306 181.208 241.23 cv
181.208 241.79 181.096 242.28 180.886 242.686 cv
180.676 243.092 180.34 243.428 179.878 243.68 cv
181.026 243.68 li
181.026 244.94 li
170.386 244.94 li
170.386 243.68 li
174.53 243.68 li
f
177.176 232.522 mo
177.176 233.544 177.302 234.244 177.526 234.636 cv
177.764 235.028 178.156 235.224 178.716 235.224 cv
179.164 235.224 179.528 235.084 179.78 234.79 cv
180.046 234.496 180.172 234.09 180.172 233.586 cv
180.172 232.886 179.934 232.326 179.43 231.906 cv
178.94 231.486 178.282 231.276 177.456 231.276 cv
177.176 231.276 li
177.176 232.522 li
176.658 230.016 mo
181.026 230.016 li
181.026 231.276 li
179.864 231.276 li
180.34 231.57 180.676 231.934 180.886 232.354 cv
181.096 232.774 181.208 233.306 181.208 233.922 cv
181.208 234.706 180.998 235.336 180.564 235.798 cv
180.13 236.26 179.542 236.484 178.8 236.484 cv
177.946 236.484 177.302 236.204 176.854 235.616 cv
176.42 235.042 176.196 234.188 176.196 233.04 cv
176.196 231.276 li
176.07 231.276 li
175.496 231.276 175.048 231.472 174.726 231.85 cv
174.418 232.228 174.25 232.76 174.25 233.446 cv
174.25 233.894 174.306 234.314 174.418 234.734 cv
174.53 235.154 174.684 235.546 174.88 235.924 cv
173.718 235.924 li
173.55 235.476 173.41 235.028 173.326 234.594 cv
173.242 234.16 173.186 233.74 173.186 233.32 cv
173.186 232.214 173.48 231.388 174.054 230.842 cv
174.628 230.296 175.496 230.016 176.658 230.016 cv
f
173.368 227.426 mo
173.368 226.166 li
181.026 226.166 li
181.026 227.426 li
173.368 227.426 li
170.386 227.426 mo
170.386 226.166 li
171.982 226.166 li
171.982 227.426 li
170.386 227.426 li
f
174.53 218.494 mo
170.386 218.494 li
170.386 217.234 li
181.026 217.234 li
181.026 218.494 li
179.878 218.494 li
180.34 218.76 180.676 219.096 180.886 219.502 cv
181.096 219.908 181.208 220.384 181.208 220.944 cv
181.208 221.868 180.844 222.624 180.116 223.212 cv
179.388 223.8 178.408 224.08 177.204 224.08 cv
176 224.08 175.034 223.8 174.292 223.212 cv
173.564 222.624 173.186 221.868 173.186 220.944 cv
173.186 220.384 173.298 219.908 173.522 219.502 cv
173.746 219.096 174.082 218.76 174.53 218.494 cv
177.204 222.778 mo
178.128 222.778 178.856 222.596 179.388 222.218 cv
179.92 221.84 180.172 221.308 180.172 220.636 cv
180.172 219.978 179.92 219.46 179.388 219.068 cv
178.856 218.69 178.128 218.494 177.204 218.494 cv
176.28 218.494 175.566 218.69 175.034 219.068 cv
174.502 219.46 174.236 219.978 174.236 220.636 cv
174.236 221.308 174.502 221.84 175.034 222.218 cv
175.566 222.596 176.28 222.778 177.204 222.778 cv
f
178.002 214.77 mo
173.368 214.77 li
173.368 213.51 li
177.96 213.51 li
178.688 213.51 179.22 213.37 179.584 213.09 cv
179.948 212.81 180.13 212.39 180.13 211.816 cv
180.13 211.144 179.92 210.598 179.486 210.206 cv
179.052 209.814 178.464 209.618 177.708 209.618 cv
173.368 209.618 li
173.368 208.358 li
181.026 208.358 li
181.026 209.618 li
179.85 209.618 li
180.326 209.926 180.662 210.29 180.886 210.682 cv
181.096 211.088 181.208 211.55 181.208 212.082 cv
181.208 212.964 180.942 213.636 180.396 214.084 cv
179.864 214.546 179.066 214.77 178.002 214.77 cv
173.186 211.606 mo
173.186 211.606 li
f
179.29 205.586 mo
179.29 204.144 li
181.026 204.144 li
181.026 205.586 li
179.29 205.586 li
f
173.662 195.8 mo
174.838 195.8 li
174.642 196.164 174.502 196.514 174.404 196.878 cv
174.306 197.242 174.25 197.592 174.25 197.956 cv
174.25 198.768 174.516 199.412 175.034 199.86 cv
175.552 200.308 176.28 200.532 177.204 200.532 cv
178.142 200.532 178.87 200.308 179.388 199.86 cv
179.906 199.412 180.158 198.768 180.158 197.956 cv
180.158 197.592 180.116 197.242 180.018 196.878 cv
179.92 196.514 179.766 196.164 179.57 195.8 cv
180.732 195.8 li
180.9 196.164 181.026 196.528 181.096 196.892 cv
181.166 197.27 181.208 197.676 181.208 198.096 cv
181.208 199.244 180.858 200.168 180.13 200.84 cv
179.416 201.526 178.436 201.862 177.204 201.862 cv
175.958 201.862 174.978 201.526 174.264 200.84 cv
173.55 200.154 173.186 199.216 173.186 198.012 cv
173.186 197.62 173.228 197.242 173.312 196.878 cv
173.396 196.514 173.508 196.15 173.662 195.8 cv
f
174.25 190.648 mo
174.25 191.32 174.516 191.852 175.048 192.244 cv
175.58 192.636 176.294 192.832 177.204 192.832 cv
178.128 192.832 178.842 192.65 179.374 192.258 cv
179.906 191.866 180.158 191.334 180.158 190.648 cv
180.158 189.976 179.906 189.444 179.374 189.052 cv
178.842 188.66 178.128 188.464 177.204 188.464 cv
176.308 188.464 175.58 188.66 175.048 189.052 cv
174.516 189.444 174.25 189.976 174.25 190.648 cv
173.186 190.648 mo
173.186 189.556 173.55 188.702 174.25 188.072 cv
174.964 187.456 175.944 187.134 177.204 187.134 cv
178.464 187.134 179.444 187.456 180.144 188.072 cv
180.858 188.702 181.208 189.556 181.208 190.648 cv
181.208 191.754 180.858 192.622 180.144 193.238 cv
179.444 193.854 178.464 194.162 177.204 194.162 cv
175.944 194.162 174.964 193.854 174.25 193.238 cv
173.55 192.622 173.186 191.754 173.186 190.648 cv
f
174.838 179.084 mo
174.278 178.776 173.872 178.398 173.592 177.964 cv
173.326 177.53 173.186 177.012 173.186 176.41 cv
173.186 175.626 173.466 175.01 174.026 174.576 cv
174.586 174.142 175.384 173.918 176.406 173.918 cv
181.026 173.918 li
181.026 175.178 li
176.448 175.178 li
175.72 175.178 175.174 175.318 174.81 175.57 cv
174.46 175.836 174.278 176.228 174.278 176.76 cv
174.278 177.418 174.502 177.936 174.936 178.314 cv
175.37 178.692 175.958 178.874 176.7 178.874 cv
181.026 178.874 li
181.026 180.134 li
176.448 180.134 li
175.72 180.134 175.174 180.274 174.81 180.526 cv
174.46 180.792 174.278 181.198 174.278 181.73 cv
174.278 182.374 174.502 182.892 174.936 183.27 cv
175.37 183.648 175.958 183.83 176.7 183.83 cv
181.026 183.83 li
181.026 185.09 li
173.368 185.09 li
173.368 183.83 li
174.558 183.83 li
174.096 183.55 173.746 183.2 173.522 182.794 cv
173.298 182.402 173.186 181.926 173.186 181.366 cv
173.186 180.806 173.326 180.344 173.606 179.952 cv
173.886 179.56 174.306 179.28 174.838 179.084 cv
f
191.787 165.725 mo
191.787 169.225 li
f
191.787 165.725 mo
191.787 169.225 li
@
189.466 282.945 mo
188.906 282.637 188.5 282.259 188.22 281.825 cv
187.954 281.391 187.814 280.873 187.814 280.271 cv
187.814 279.487 188.094 278.871 188.654 278.437 cv
189.214 278.003 190.012 277.779 191.034 277.779 cv
195.654 277.779 li
195.654 279.039 li
191.076 279.039 li
190.348 279.039 189.802 279.179 189.438 279.431 cv
189.088 279.697 188.906 280.089 188.906 280.621 cv
188.906 281.279 189.13 281.797 189.564 282.175 cv
189.998 282.553 190.586 282.735 191.328 282.735 cv
195.654 282.735 li
195.654 283.995 li
191.076 283.995 li
190.348 283.995 189.802 284.135 189.438 284.387 cv
189.088 284.653 188.906 285.059 188.906 285.591 cv
188.906 286.235 189.13 286.753 189.564 287.131 cv
189.998 287.509 190.586 287.691 191.328 287.691 cv
195.654 287.691 li
195.654 288.951 li
187.996 288.951 li
187.996 287.691 li
189.186 287.691 li
188.724 287.411 188.374 287.061 188.15 286.655 cv
187.926 286.263 187.814 285.787 187.814 285.227 cv
187.814 284.667 187.954 284.205 188.234 283.813 cv
188.514 283.421 188.934 283.141 189.466 282.945 cv
f
188.878 272.305 mo
188.878 272.977 189.144 273.509 189.676 273.901 cv
190.208 274.293 190.922 274.489 191.832 274.489 cv
192.756 274.489 193.47 274.307 194.002 273.915 cv
194.534 273.523 194.786 272.991 194.786 272.305 cv
194.786 271.633 194.534 271.101 194.002 270.709 cv
193.47 270.317 192.756 270.121 191.832 270.121 cv
190.936 270.121 190.208 270.317 189.676 270.709 cv
189.144 271.101 188.878 271.633 188.878 272.305 cv
187.814 272.305 mo
187.814 271.213 188.178 270.359 188.878 269.729 cv
189.592 269.113 190.572 268.791 191.832 268.791 cv
193.092 268.791 194.072 269.113 194.772 269.729 cv
195.486 270.359 195.836 271.213 195.836 272.305 cv
195.836 273.411 195.486 274.279 194.772 274.895 cv
194.072 275.511 193.092 275.819 191.832 275.819 cv
190.572 275.819 189.592 275.511 188.878 274.895 cv
188.178 274.279 187.814 273.411 187.814 272.305 cv
f
191.832 261.203 mo
190.908 261.203 190.194 261.399 189.662 261.777 cv
189.13 262.169 188.864 262.687 188.864 263.345 cv
188.864 264.017 189.13 264.535 189.662 264.913 cv
190.194 265.305 190.908 265.487 191.832 265.487 cv
192.756 265.487 193.484 265.305 194.016 264.913 cv
194.548 264.535 194.8 264.017 194.8 263.345 cv
194.8 262.687 194.548 262.169 194.016 261.777 cv
193.484 261.399 192.756 261.203 191.832 261.203 cv
189.158 265.487 mo
188.71 265.235 188.374 264.899 188.15 264.493 cv
187.926 264.087 187.814 263.597 187.814 263.037 cv
187.814 262.113 188.192 261.357 188.92 260.769 cv
189.662 260.195 190.628 259.901 191.832 259.901 cv
193.036 259.901 194.016 260.195 194.744 260.769 cv
195.472 261.357 195.836 262.113 195.836 263.037 cv
195.836 263.597 195.724 264.087 195.514 264.493 cv
195.304 264.899 194.968 265.235 194.506 265.487 cv
195.654 265.487 li
195.654 266.747 li
185.014 266.747 li
185.014 265.487 li
189.158 265.487 li
f
187.996 257.815 mo
187.996 256.555 li
195.654 256.555 li
195.654 257.815 li
187.996 257.815 li
185.014 257.815 mo
185.014 256.555 li
186.61 256.555 li
186.61 257.815 li
185.014 257.815 li
f
185.014 253.923 mo
185.014 252.663 li
195.654 252.663 li
195.654 253.923 li
185.014 253.923 li
f
191.51 243.479 mo
192.126 243.479 li
192.126 249.261 li
192.994 249.205 193.666 248.953 194.114 248.477 cv
194.562 248.015 194.786 247.371 194.786 246.531 cv
194.786 246.055 194.73 245.579 194.618 245.131 cv
194.506 244.683 194.324 244.221 194.072 243.773 cv
195.262 243.773 li
195.458 244.221 195.612 244.683 195.696 245.159 cv
195.78 245.635 195.836 246.125 195.836 246.601 cv
195.836 247.833 195.486 248.799 194.786 249.513 cv
194.086 250.227 193.12 250.577 191.902 250.577 cv
190.656 250.577 189.662 250.241 188.92 249.569 cv
188.192 248.897 187.814 247.973 187.814 246.825 cv
187.814 245.789 188.15 244.977 188.808 244.375 cv
189.48 243.787 190.376 243.479 191.51 243.479 cv
191.146 244.739 mo
190.46 244.753 189.914 244.949 189.494 245.313 cv
189.088 245.691 188.878 246.195 188.878 246.811 cv
188.878 247.511 189.088 248.071 189.48 248.491 cv
189.872 248.911 190.432 249.163 191.146 249.219 cv
191.146 244.739 li
f
193.918 241.239 mo
193.918 239.797 li
195.654 239.797 li
195.654 241.239 li
193.918 241.239 li
f
194.492 236.549 mo
194.492 234.295 li
186.708 234.295 li
187.198 236.745 li
185.938 236.745 li
185.448 234.309 li
185.448 232.923 li
194.492 232.923 li
194.492 230.669 li
195.654 230.669 li
195.654 236.549 li
194.492 236.549 li
f
194.492 226.693 mo
194.492 221.877 li
195.654 221.877 li
195.654 228.359 li
194.492 228.359 li
193.96 227.841 193.232 227.127 192.308 226.217 cv
191.398 225.321 190.81 224.747 190.544 224.509 cv
190.054 224.061 189.634 223.753 189.284 223.585 cv
188.948 223.417 188.598 223.319 188.262 223.319 cv
187.73 223.319 187.282 223.515 186.946 223.893 cv
186.61 224.271 186.428 224.761 186.428 225.377 cv
186.428 225.811 186.512 226.273 186.652 226.749 cv
186.806 227.225 187.03 227.743 187.338 228.289 cv
185.938 228.289 li
185.714 227.729 185.546 227.211 185.434 226.735 cv
185.322 226.259 185.266 225.811 185.266 225.405 cv
185.266 224.355 185.532 223.515 186.064 222.885 cv
186.596 222.255 187.296 221.933 188.178 221.933 cv
188.598 221.933 189.004 222.017 189.368 222.171 cv
189.746 222.325 190.194 222.605 190.698 223.025 cv
190.838 223.137 191.216 223.501 191.846 224.117 cv
192.476 224.733 193.358 225.587 194.492 226.693 cv
f
190.152 214.793 mo
190.292 214.135 190.586 213.617 191.034 213.253 cv
191.482 212.889 192.042 212.693 192.686 212.693 cv
193.694 212.693 194.478 213.043 195.024 213.729 cv
195.57 214.429 195.836 215.409 195.836 216.683 cv
195.836 217.117 195.794 217.565 195.71 218.013 cv
195.64 218.461 195.514 218.937 195.346 219.413 cv
194.016 219.413 li
194.24 219.035 194.408 218.615 194.52 218.153 cv
194.632 217.705 194.688 217.229 194.688 216.725 cv
194.688 215.857 194.52 215.199 194.184 214.751 cv
193.848 214.303 193.344 214.065 192.686 214.065 cv
192.098 214.065 191.622 214.275 191.286 214.695 cv
190.95 215.115 190.768 215.703 190.768 216.459 cv
190.768 217.649 li
189.634 217.649 li
189.634 216.403 li
189.634 215.731 189.508 215.213 189.228 214.849 cv
188.962 214.485 188.57 214.303 188.052 214.303 cv
187.534 214.303 187.128 214.499 186.848 214.863 cv
186.568 215.241 186.428 215.773 186.428 216.459 cv
186.428 216.837 186.47 217.243 186.554 217.677 cv
186.638 218.111 186.764 218.587 186.932 219.105 cv
185.7 219.105 li
185.56 218.587 185.448 218.097 185.378 217.635 cv
185.308 217.187 185.266 216.753 185.266 216.333 cv
185.266 215.297 185.504 214.471 185.98 213.855 cv
186.456 213.239 187.1 212.931 187.912 212.931 cv
188.472 212.931 188.948 213.099 189.34 213.421 cv
189.732 213.743 190.012 214.205 190.152 214.793 cv
f
186.358 207.121 mo
186.358 207.835 186.708 208.367 187.408 208.731 cv
188.108 209.095 189.158 209.263 190.558 209.263 cv
191.958 209.263 193.008 209.095 193.708 208.731 cv
194.408 208.367 194.758 207.835 194.758 207.121 cv
194.758 206.407 194.408 205.875 193.708 205.511 cv
193.008 205.161 191.958 204.979 190.558 204.979 cv
189.158 204.979 188.108 205.161 187.408 205.511 cv
186.708 205.875 186.358 206.407 186.358 207.121 cv
185.266 207.121 mo
185.266 205.987 185.728 205.119 186.624 204.503 cv
187.534 203.901 188.85 203.593 190.558 203.593 cv
192.28 203.593 193.596 203.901 194.492 204.503 cv
195.388 205.119 195.836 205.987 195.836 207.121 cv
195.836 208.269 195.388 209.151 194.492 209.753 cv
193.596 210.355 192.28 210.649 190.558 210.649 cv
188.85 210.649 187.534 210.355 186.624 209.753 cv
185.728 209.151 185.266 208.269 185.266 207.121 cv
f
189.998 198.049 mo
189.998 198.665 190.222 199.155 190.642 199.519 cv
191.062 199.883 191.65 200.065 192.378 200.065 cv
193.12 200.065 193.708 199.883 194.128 199.519 cv
194.548 199.155 194.758 198.665 194.758 198.049 cv
194.758 197.433 194.548 196.943 194.128 196.579 cv
193.708 196.215 193.12 196.033 192.378 196.033 cv
191.65 196.033 191.062 196.215 190.642 196.579 cv
190.222 196.943 189.998 197.433 189.998 198.049 cv
185.672 195.305 mo
186.932 195.305 li
186.764 195.655 186.638 196.005 186.554 196.355 cv
186.47 196.719 186.428 197.069 186.428 197.405 cv
186.428 198.329 186.736 199.029 187.352 199.505 cv
187.968 199.981 188.906 200.261 190.138 200.317 cv
189.746 200.051 189.438 199.715 189.228 199.309 cv
189.018 198.903 188.906 198.455 188.906 197.965 cv
188.906 196.943 189.228 196.131 189.844 195.543 cv
190.46 194.955 191.314 194.647 192.378 194.647 cv
193.428 194.647 194.268 194.969 194.898 195.585 cv
195.528 196.201 195.836 197.027 195.836 198.049 cv
195.836 199.225 195.388 200.135 194.492 200.751 cv
193.596 201.381 192.28 201.689 190.558 201.689 cv
188.948 201.689 187.66 201.311 186.708 200.541 cv
185.756 199.785 185.266 198.749 185.266 197.461 cv
185.266 197.125 185.308 196.775 185.364 196.411 cv
185.434 196.061 185.532 195.697 185.672 195.305 cv
f
193.918 192.267 mo
193.918 190.825 li
195.654 190.825 li
195.654 192.267 li
193.918 192.267 li
f
188.29 182.481 mo
189.466 182.481 li
189.27 182.845 189.13 183.195 189.032 183.559 cv
188.934 183.923 188.878 184.273 188.878 184.637 cv
188.878 185.449 189.144 186.093 189.662 186.541 cv
190.18 186.989 190.908 187.213 191.832 187.213 cv
192.77 187.213 193.498 186.989 194.016 186.541 cv
194.534 186.093 194.786 185.449 194.786 184.637 cv
194.786 184.273 194.744 183.923 194.646 183.559 cv
194.548 183.195 194.394 182.845 194.198 182.481 cv
195.36 182.481 li
195.528 182.845 195.654 183.209 195.724 183.573 cv
195.794 183.951 195.836 184.357 195.836 184.777 cv
195.836 185.925 195.486 186.849 194.758 187.521 cv
194.044 188.207 193.064 188.543 191.832 188.543 cv
190.586 188.543 189.606 188.207 188.892 187.521 cv
188.178 186.835 187.814 185.897 187.814 184.693 cv
187.814 184.301 187.856 183.923 187.94 183.559 cv
188.024 183.195 188.136 182.831 188.29 182.481 cv
f
191.034 173.927 mo
195.654 173.927 li
195.654 175.187 li
191.076 175.187 li
190.348 175.187 189.816 175.341 189.452 175.621 cv
189.088 175.901 188.906 176.321 188.906 176.881 cv
188.906 177.567 189.13 178.099 189.564 178.491 cv
189.998 178.883 190.586 179.079 191.328 179.079 cv
195.654 179.079 li
195.654 180.339 li
187.996 180.339 li
187.996 179.079 li
189.186 179.079 li
188.738 178.785 188.388 178.435 188.164 178.015 cv
187.94 177.609 187.814 177.133 187.814 176.601 cv
187.814 175.733 188.094 175.061 188.64 174.613 cv
189.186 174.165 189.984 173.927 191.034 173.927 cv
f
206.416 165.725 mo
206.416 169.225 li
f
206.416 165.725 mo
206.416 169.225 li
@
204.095 272.382 mo
203.535 272.074 203.129 271.696 202.849 271.262 cv
202.583 270.828 202.443 270.31 202.443 269.708 cv
202.443 268.924 202.723 268.308 203.283 267.874 cv
203.843 267.44 204.641 267.216 205.663 267.216 cv
210.283 267.216 li
210.283 268.476 li
205.705 268.476 li
204.977 268.476 204.431 268.616 204.067 268.868 cv
203.717 269.134 203.535 269.526 203.535 270.058 cv
203.535 270.716 203.759 271.234 204.193 271.612 cv
204.627 271.99 205.215 272.172 205.957 272.172 cv
210.283 272.172 li
210.283 273.432 li
205.705 273.432 li
204.977 273.432 204.431 273.572 204.067 273.824 cv
203.717 274.09 203.535 274.496 203.535 275.028 cv
203.535 275.672 203.759 276.19 204.193 276.568 cv
204.627 276.946 205.215 277.128 205.957 277.128 cv
210.283 277.128 li
210.283 278.388 li
202.625 278.388 li
202.625 277.128 li
203.815 277.128 li
203.353 276.848 203.003 276.498 202.779 276.092 cv
202.555 275.7 202.443 275.224 202.443 274.664 cv
202.443 274.104 202.583 273.642 202.863 273.25 cv
203.143 272.858 203.563 272.578 204.095 272.382 cv
f
207.259 264.836 mo
202.625 264.836 li
202.625 263.576 li
207.217 263.576 li
207.945 263.576 208.477 263.436 208.841 263.156 cv
209.205 262.876 209.387 262.456 209.387 261.882 cv
209.387 261.21 209.177 260.664 208.743 260.272 cv
208.309 259.88 207.721 259.684 206.965 259.684 cv
202.625 259.684 li
202.625 258.424 li
210.283 258.424 li
210.283 259.684 li
209.107 259.684 li
209.583 259.992 209.919 260.356 210.143 260.748 cv
210.353 261.154 210.465 261.616 210.465 262.148 cv
210.465 263.03 210.199 263.702 209.653 264.15 cv
209.121 264.612 208.323 264.836 207.259 264.836 cv
202.443 261.672 mo
202.443 261.672 li
f
202.849 250.948 mo
204.039 250.948 li
203.871 251.312 203.731 251.676 203.633 252.054 cv
203.549 252.446 203.493 252.838 203.493 253.244 cv
203.493 253.874 203.591 254.35 203.787 254.658 cv
203.983 254.966 204.263 255.12 204.641 255.12 cv
204.935 255.12 205.159 255.008 205.327 254.784 cv
205.495 254.56 205.663 254.112 205.803 253.44 cv
205.901 253.006 li
206.097 252.11 206.377 251.48 206.713 251.102 cv
207.063 250.738 207.553 250.542 208.169 250.542 cv
208.883 250.542 209.443 250.822 209.849 251.382 cv
210.269 251.942 210.465 252.726 210.465 253.706 cv
210.465 254.126 210.423 254.546 210.353 254.994 cv
210.283 255.442 210.171 255.904 210.003 256.394 cv
208.701 256.394 li
208.953 255.932 209.135 255.47 209.247 255.022 cv
209.373 254.574 209.429 254.126 209.429 253.678 cv
209.429 253.09 209.331 252.628 209.135 252.306 cv
208.939 251.998 208.645 251.83 208.267 251.83 cv
207.931 251.83 207.665 251.956 207.483 252.18 cv
207.301 252.404 207.119 252.908 206.951 253.692 cv
206.853 254.126 li
206.685 254.91 206.433 255.484 206.097 255.82 cv
205.761 256.17 205.299 256.338 204.697 256.338 cv
203.983 256.338 203.423 256.086 203.031 255.582 cv
202.639 255.078 202.443 254.35 202.443 253.398 cv
202.443 252.936 202.485 252.502 202.555 252.082 cv
202.625 251.676 202.723 251.298 202.849 250.948 cv
f
202.625 248.54 mo
202.625 247.28 li
210.283 247.28 li
210.283 248.54 li
202.625 248.54 li
199.643 248.54 mo
199.643 247.28 li
201.239 247.28 li
201.239 248.54 li
199.643 248.54 li
f
202.919 239.132 mo
204.095 239.132 li
203.899 239.496 203.759 239.846 203.661 240.21 cv
203.563 240.574 203.507 240.924 203.507 241.288 cv
203.507 242.1 203.773 242.744 204.291 243.192 cv
204.809 243.64 205.537 243.864 206.461 243.864 cv
207.399 243.864 208.127 243.64 208.645 243.192 cv
209.163 242.744 209.415 242.1 209.415 241.288 cv
209.415 240.924 209.373 240.574 209.275 240.21 cv
209.177 239.846 209.023 239.496 208.827 239.132 cv
209.989 239.132 li
210.157 239.496 210.283 239.86 210.353 240.224 cv
210.423 240.602 210.465 241.008 210.465 241.428 cv
210.465 242.576 210.115 243.5 209.387 244.172 cv
208.673 244.858 207.693 245.194 206.461 245.194 cv
205.215 245.194 204.235 244.858 203.521 244.172 cv
202.807 243.486 202.443 242.548 202.443 241.344 cv
202.443 240.952 202.485 240.574 202.569 240.21 cv
202.653 239.846 202.765 239.482 202.919 239.132 cv
f
208.547 236.766 mo
208.547 235.324 li
210.283 235.324 li
210.283 236.766 li
208.547 236.766 li
f
209.121 232.076 mo
209.121 229.822 li
201.337 229.822 li
201.827 232.272 li
200.567 232.272 li
200.077 229.836 li
200.077 228.45 li
209.121 228.45 li
209.121 226.196 li
210.283 226.196 li
210.283 232.076 li
209.121 232.076 li
f
204.627 220.288 mo
204.627 220.904 204.851 221.394 205.271 221.758 cv
205.691 222.122 206.279 222.304 207.007 222.304 cv
207.749 222.304 208.337 222.122 208.757 221.758 cv
209.177 221.394 209.387 220.904 209.387 220.288 cv
209.387 219.672 209.177 219.182 208.757 218.818 cv
208.337 218.454 207.749 218.272 207.007 218.272 cv
206.279 218.272 205.691 218.454 205.271 218.818 cv
204.851 219.182 204.627 219.672 204.627 220.288 cv
200.301 217.544 mo
201.561 217.544 li
201.393 217.894 201.267 218.244 201.183 218.594 cv
201.099 218.958 201.057 219.308 201.057 219.644 cv
201.057 220.568 201.365 221.268 201.981 221.744 cv
202.597 222.22 203.535 222.5 204.767 222.556 cv
204.375 222.29 204.067 221.954 203.857 221.548 cv
203.647 221.142 203.535 220.694 203.535 220.204 cv
203.535 219.182 203.857 218.37 204.473 217.782 cv
205.089 217.194 205.943 216.886 207.007 216.886 cv
208.057 216.886 208.897 217.208 209.527 217.824 cv
210.157 218.44 210.465 219.266 210.465 220.288 cv
210.465 221.464 210.017 222.374 209.121 222.99 cv
208.225 223.62 206.909 223.928 205.187 223.928 cv
203.577 223.928 202.289 223.55 201.337 222.78 cv
200.385 222.024 199.895 220.988 199.895 219.7 cv
199.895 219.364 199.937 219.014 199.993 218.65 cv
200.063 218.3 200.161 217.936 200.301 217.544 cv
f
204.781 210.32 mo
204.921 209.662 205.215 209.144 205.663 208.78 cv
206.111 208.416 206.671 208.22 207.315 208.22 cv
208.323 208.22 209.107 208.57 209.653 209.256 cv
210.199 209.956 210.465 210.936 210.465 212.21 cv
210.465 212.644 210.423 213.092 210.339 213.54 cv
210.269 213.988 210.143 214.464 209.975 214.94 cv
208.645 214.94 li
208.869 214.562 209.037 214.142 209.149 213.68 cv
209.261 213.232 209.317 212.756 209.317 212.252 cv
209.317 211.384 209.149 210.726 208.813 210.278 cv
208.477 209.83 207.973 209.592 207.315 209.592 cv
206.727 209.592 206.251 209.802 205.915 210.222 cv
205.579 210.642 205.397 211.23 205.397 211.986 cv
205.397 213.176 li
204.263 213.176 li
204.263 211.93 li
204.263 211.258 204.137 210.74 203.857 210.376 cv
203.591 210.012 203.199 209.83 202.681 209.83 cv
202.163 209.83 201.757 210.026 201.477 210.39 cv
201.197 210.768 201.057 211.3 201.057 211.986 cv
201.057 212.364 201.099 212.77 201.183 213.204 cv
201.267 213.638 201.393 214.114 201.561 214.632 cv
200.329 214.632 li
200.189 214.114 200.077 213.624 200.007 213.162 cv
199.937 212.714 199.895 212.28 199.895 211.86 cv
199.895 210.824 200.133 209.998 200.609 209.382 cv
201.085 208.766 201.729 208.458 202.541 208.458 cv
203.101 208.458 203.577 208.626 203.969 208.948 cv
204.361 209.27 204.641 209.732 204.781 210.32 cv
f
208.547 205.602 mo
208.547 204.16 li
210.283 204.16 li
210.283 205.602 li
208.547 205.602 li
f
202.919 195.816 mo
204.095 195.816 li
203.899 196.18 203.759 196.53 203.661 196.894 cv
203.563 197.258 203.507 197.608 203.507 197.972 cv
203.507 198.784 203.773 199.428 204.291 199.876 cv
204.809 200.324 205.537 200.548 206.461 200.548 cv
207.399 200.548 208.127 200.324 208.645 199.876 cv
209.163 199.428 209.415 198.784 209.415 197.972 cv
209.415 197.608 209.373 197.258 209.275 196.894 cv
209.177 196.53 209.023 196.18 208.827 195.816 cv
209.989 195.816 li
210.157 196.18 210.283 196.544 210.353 196.908 cv
210.423 197.286 210.465 197.692 210.465 198.112 cv
210.465 199.26 210.115 200.184 209.387 200.856 cv
208.673 201.542 207.693 201.878 206.461 201.878 cv
205.215 201.878 204.235 201.542 203.521 200.856 cv
202.807 200.17 202.443 199.232 202.443 198.028 cv
202.443 197.636 202.485 197.258 202.569 196.894 cv
202.653 196.53 202.765 196.166 202.919 195.816 cv
f
203.507 190.664 mo
203.507 191.336 203.773 191.868 204.305 192.26 cv
204.837 192.652 205.551 192.848 206.461 192.848 cv
207.385 192.848 208.099 192.666 208.631 192.274 cv
209.163 191.882 209.415 191.35 209.415 190.664 cv
209.415 189.992 209.163 189.46 208.631 189.068 cv
208.099 188.676 207.385 188.48 206.461 188.48 cv
205.565 188.48 204.837 188.676 204.305 189.068 cv
203.773 189.46 203.507 189.992 203.507 190.664 cv
202.443 190.664 mo
202.443 189.572 202.807 188.718 203.507 188.088 cv
204.221 187.472 205.201 187.15 206.461 187.15 cv
207.721 187.15 208.701 187.472 209.401 188.088 cv
210.115 188.718 210.465 189.572 210.465 190.664 cv
210.465 191.77 210.115 192.638 209.401 193.254 cv
208.701 193.87 207.721 194.178 206.461 194.178 cv
205.201 194.178 204.221 193.87 203.507 193.254 cv
202.807 192.638 202.443 191.77 202.443 190.664 cv
f
204.095 179.1 mo
203.535 178.792 203.129 178.414 202.849 177.98 cv
202.583 177.546 202.443 177.028 202.443 176.426 cv
202.443 175.642 202.723 175.026 203.283 174.592 cv
203.843 174.158 204.641 173.934 205.663 173.934 cv
210.283 173.934 li
210.283 175.194 li
205.705 175.194 li
204.977 175.194 204.431 175.334 204.067 175.586 cv
203.717 175.852 203.535 176.244 203.535 176.776 cv
203.535 177.434 203.759 177.952 204.193 178.33 cv
204.627 178.708 205.215 178.89 205.957 178.89 cv
210.283 178.89 li
210.283 180.15 li
205.705 180.15 li
204.977 180.15 204.431 180.29 204.067 180.542 cv
203.717 180.808 203.535 181.214 203.535 181.746 cv
203.535 182.39 203.759 182.908 204.193 183.286 cv
204.627 183.664 205.215 183.846 205.957 183.846 cv
210.283 183.846 li
210.283 185.106 li
202.625 185.106 li
202.625 183.846 li
203.815 183.846 li
203.353 183.566 203.003 183.216 202.779 182.81 cv
202.555 182.418 202.443 181.942 202.443 181.382 cv
202.443 180.822 202.583 180.36 202.863 179.968 cv
203.143 179.576 203.563 179.296 204.095 179.1 cv
f
221.044 165.725 mo
221.044 169.225 li
f
221.044 165.725 mo
221.044 169.225 li
@
223.764 274.472 mo
227.81 274.472 li
227.81 275.732 li
217.254 275.732 li
217.254 274.472 li
218.416 274.472 li
217.968 274.22 217.632 273.884 217.408 273.478 cv
217.184 273.072 217.072 272.582 217.072 272.022 cv
217.072 271.098 217.45 270.342 218.178 269.754 cv
218.92 269.18 219.886 268.886 221.09 268.886 cv
222.294 268.886 223.274 269.18 224.002 269.754 cv
224.73 270.342 225.094 271.098 225.094 272.022 cv
225.094 272.582 224.982 273.072 224.772 273.478 cv
224.562 273.884 224.226 274.22 223.764 274.472 cv
221.09 270.188 mo
220.166 270.188 219.452 270.384 218.92 270.762 cv
218.388 271.154 218.122 271.672 218.122 272.33 cv
218.122 273.002 218.388 273.52 218.92 273.898 cv
219.452 274.29 220.166 274.472 221.09 274.472 cv
222.014 274.472 222.742 274.29 223.274 273.898 cv
223.806 273.52 224.058 273.002 224.058 272.33 cv
224.058 271.672 223.806 271.154 223.274 270.762 cv
222.742 270.384 222.014 270.188 221.09 270.188 cv
f
221.062 263.314 mo
221.062 264.336 221.188 265.036 221.412 265.428 cv
221.65 265.82 222.042 266.016 222.602 266.016 cv
223.05 266.016 223.414 265.876 223.666 265.582 cv
223.932 265.288 224.058 264.882 224.058 264.378 cv
224.058 263.678 223.82 263.118 223.316 262.698 cv
222.826 262.278 222.168 262.068 221.342 262.068 cv
221.062 262.068 li
221.062 263.314 li
220.544 260.808 mo
224.912 260.808 li
224.912 262.068 li
223.75 262.068 li
224.226 262.362 224.562 262.726 224.772 263.146 cv
224.982 263.566 225.094 264.098 225.094 264.714 cv
225.094 265.498 224.884 266.128 224.45 266.59 cv
224.016 267.052 223.428 267.276 222.686 267.276 cv
221.832 267.276 221.188 266.996 220.74 266.408 cv
220.306 265.834 220.082 264.98 220.082 263.832 cv
220.082 262.068 li
219.956 262.068 li
219.382 262.068 218.934 262.264 218.612 262.642 cv
218.304 263.02 218.136 263.552 218.136 264.238 cv
218.136 264.686 218.192 265.106 218.304 265.526 cv
218.416 265.946 218.57 266.338 218.766 266.716 cv
217.604 266.716 li
217.436 266.268 217.296 265.82 217.212 265.386 cv
217.128 264.952 217.072 264.532 217.072 264.112 cv
217.072 263.006 217.366 262.18 217.94 261.634 cv
218.514 261.088 219.382 260.808 220.544 260.808 cv
f
220.292 251.848 mo
224.912 251.848 li
224.912 253.108 li
220.334 253.108 li
219.606 253.108 219.074 253.262 218.71 253.542 cv
218.346 253.822 218.164 254.242 218.164 254.802 cv
218.164 255.488 218.388 256.02 218.822 256.412 cv
219.256 256.804 219.844 257 220.586 257 cv
224.912 257 li
224.912 258.26 li
217.254 258.26 li
217.254 257 li
218.444 257 li
217.996 256.706 217.646 256.356 217.422 255.936 cv
217.198 255.53 217.072 255.054 217.072 254.522 cv
217.072 253.654 217.352 252.982 217.898 252.534 cv
218.444 252.086 219.242 251.848 220.292 251.848 cv
f
223.176 249.16 mo
223.176 247.718 li
224.912 247.718 li
224.912 249.16 li
223.176 249.16 li
f
221.09 239.388 mo
220.166 239.388 219.452 239.584 218.92 239.962 cv
218.388 240.354 218.122 240.872 218.122 241.53 cv
218.122 242.202 218.388 242.72 218.92 243.098 cv
219.452 243.49 220.166 243.672 221.09 243.672 cv
222.014 243.672 222.742 243.49 223.274 243.098 cv
223.806 242.72 224.058 242.202 224.058 241.53 cv
224.058 240.872 223.806 240.354 223.274 239.962 cv
222.742 239.584 222.014 239.388 221.09 239.388 cv
218.416 243.672 mo
217.968 243.42 217.632 243.084 217.408 242.678 cv
217.184 242.272 217.072 241.782 217.072 241.222 cv
217.072 240.298 217.45 239.542 218.178 238.954 cv
218.92 238.38 219.886 238.086 221.09 238.086 cv
222.294 238.086 223.274 238.38 224.002 238.954 cv
224.73 239.542 225.094 240.298 225.094 241.222 cv
225.094 241.782 224.982 242.272 224.772 242.678 cv
224.562 243.084 224.226 243.42 223.764 243.672 cv
224.912 243.672 li
224.912 244.932 li
214.272 244.932 li
214.272 243.672 li
218.416 243.672 li
f
221.062 232.514 mo
221.062 233.536 221.188 234.236 221.412 234.628 cv
221.65 235.02 222.042 235.216 222.602 235.216 cv
223.05 235.216 223.414 235.076 223.666 234.782 cv
223.932 234.488 224.058 234.082 224.058 233.578 cv
224.058 232.878 223.82 232.318 223.316 231.898 cv
222.826 231.478 222.168 231.268 221.342 231.268 cv
221.062 231.268 li
221.062 232.514 li
220.544 230.008 mo
224.912 230.008 li
224.912 231.268 li
223.75 231.268 li
224.226 231.562 224.562 231.926 224.772 232.346 cv
224.982 232.766 225.094 233.298 225.094 233.914 cv
225.094 234.698 224.884 235.328 224.45 235.79 cv
224.016 236.252 223.428 236.476 222.686 236.476 cv
221.832 236.476 221.188 236.196 220.74 235.608 cv
220.306 235.034 220.082 234.18 220.082 233.032 cv
220.082 231.268 li
219.956 231.268 li
219.382 231.268 218.934 231.464 218.612 231.842 cv
218.304 232.22 218.136 232.752 218.136 233.438 cv
218.136 233.886 218.192 234.306 218.304 234.726 cv
218.416 235.146 218.57 235.538 218.766 235.916 cv
217.604 235.916 li
217.436 235.468 217.296 235.02 217.212 234.586 cv
217.128 234.152 217.072 233.732 217.072 233.312 cv
217.072 232.206 217.366 231.38 217.94 230.834 cv
218.514 230.288 219.382 230.008 220.544 230.008 cv
f
217.254 227.418 mo
217.254 226.158 li
224.912 226.158 li
224.912 227.418 li
217.254 227.418 li
214.272 227.418 mo
214.272 226.158 li
215.868 226.158 li
215.868 227.418 li
214.272 227.418 li
f
218.416 218.486 mo
214.272 218.486 li
214.272 217.226 li
224.912 217.226 li
224.912 218.486 li
223.764 218.486 li
224.226 218.752 224.562 219.088 224.772 219.494 cv
224.982 219.9 225.094 220.376 225.094 220.936 cv
225.094 221.86 224.73 222.616 224.002 223.204 cv
223.274 223.792 222.294 224.072 221.09 224.072 cv
219.886 224.072 218.92 223.792 218.178 223.204 cv
217.45 222.616 217.072 221.86 217.072 220.936 cv
217.072 220.376 217.184 219.9 217.408 219.494 cv
217.632 219.088 217.968 218.752 218.416 218.486 cv
221.09 222.77 mo
222.014 222.77 222.742 222.588 223.274 222.21 cv
223.806 221.832 224.058 221.3 224.058 220.628 cv
224.058 219.97 223.806 219.452 223.274 219.06 cv
222.742 218.682 222.014 218.486 221.09 218.486 cv
220.166 218.486 219.452 218.682 218.92 219.06 cv
218.388 219.452 218.122 219.97 218.122 220.628 cv
218.122 221.3 218.388 221.832 218.92 222.21 cv
219.452 222.588 220.166 222.77 221.09 222.77 cv
f
221.888 214.762 mo
217.254 214.762 li
217.254 213.502 li
221.846 213.502 li
222.574 213.502 223.106 213.362 223.47 213.082 cv
223.834 212.802 224.016 212.382 224.016 211.808 cv
224.016 211.136 223.806 210.59 223.372 210.198 cv
222.938 209.806 222.35 209.61 221.594 209.61 cv
217.254 209.61 li
217.254 208.35 li
224.912 208.35 li
224.912 209.61 li
223.736 209.61 li
224.212 209.918 224.548 210.282 224.772 210.674 cv
224.982 211.08 225.094 211.542 225.094 212.074 cv
225.094 212.956 224.828 213.628 224.282 214.076 cv
223.75 214.538 222.952 214.762 221.888 214.762 cv
217.072 211.598 mo
217.072 211.598 li
f
223.176 205.578 mo
223.176 204.136 li
224.912 204.136 li
224.912 205.578 li
223.176 205.578 li
f
217.548 195.792 mo
218.724 195.792 li
218.528 196.156 218.388 196.506 218.29 196.87 cv
218.192 197.234 218.136 197.584 218.136 197.948 cv
218.136 198.76 218.402 199.404 218.92 199.852 cv
219.438 200.3 220.166 200.524 221.09 200.524 cv
222.028 200.524 222.756 200.3 223.274 199.852 cv
223.792 199.404 224.044 198.76 224.044 197.948 cv
224.044 197.584 224.002 197.234 223.904 196.87 cv
223.806 196.506 223.652 196.156 223.456 195.792 cv
224.618 195.792 li
224.786 196.156 224.912 196.52 224.982 196.884 cv
225.052 197.262 225.094 197.668 225.094 198.088 cv
225.094 199.236 224.744 200.16 224.016 200.832 cv
223.302 201.518 222.322 201.854 221.09 201.854 cv
219.844 201.854 218.864 201.518 218.15 200.832 cv
217.436 200.146 217.072 199.208 217.072 198.004 cv
217.072 197.612 217.114 197.234 217.198 196.87 cv
217.282 196.506 217.394 196.142 217.548 195.792 cv
f
218.136 190.64 mo
218.136 191.312 218.402 191.844 218.934 192.236 cv
219.466 192.628 220.18 192.824 221.09 192.824 cv
222.014 192.824 222.728 192.642 223.26 192.25 cv
223.792 191.858 224.044 191.326 224.044 190.64 cv
224.044 189.968 223.792 189.436 223.26 189.044 cv
222.728 188.652 222.014 188.456 221.09 188.456 cv
220.194 188.456 219.466 188.652 218.934 189.044 cv
218.402 189.436 218.136 189.968 218.136 190.64 cv
217.072 190.64 mo
217.072 189.548 217.436 188.694 218.136 188.064 cv
218.85 187.448 219.83 187.126 221.09 187.126 cv
222.35 187.126 223.33 187.448 224.03 188.064 cv
224.744 188.694 225.094 189.548 225.094 190.64 cv
225.094 191.746 224.744 192.614 224.03 193.23 cv
223.33 193.846 222.35 194.154 221.09 194.154 cv
219.83 194.154 218.85 193.846 218.136 193.23 cv
217.436 192.614 217.072 191.746 217.072 190.64 cv
f
218.724 179.076 mo
218.164 178.768 217.758 178.39 217.478 177.956 cv
217.212 177.522 217.072 177.004 217.072 176.402 cv
217.072 175.618 217.352 175.002 217.912 174.568 cv
218.472 174.134 219.27 173.91 220.292 173.91 cv
224.912 173.91 li
224.912 175.17 li
220.334 175.17 li
219.606 175.17 219.06 175.31 218.696 175.562 cv
218.346 175.828 218.164 176.22 218.164 176.752 cv
218.164 177.41 218.388 177.928 218.822 178.306 cv
219.256 178.684 219.844 178.866 220.586 178.866 cv
224.912 178.866 li
224.912 180.126 li
220.334 180.126 li
219.606 180.126 219.06 180.266 218.696 180.518 cv
218.346 180.784 218.164 181.19 218.164 181.722 cv
218.164 182.366 218.388 182.884 218.822 183.262 cv
219.256 183.64 219.844 183.822 220.586 183.822 cv
224.912 183.822 li
224.912 185.082 li
217.254 185.082 li
217.254 183.822 li
218.444 183.822 li
217.982 183.542 217.632 183.192 217.408 182.786 cv
217.184 182.394 217.072 181.918 217.072 181.358 cv
217.072 180.798 217.212 180.336 217.492 179.944 cv
217.772 179.552 218.192 179.272 218.724 179.076 cv
f
235.673 165.725 mo
235.673 169.225 li
f
235.673 165.725 mo
235.673 169.225 li
@
238.392 272.878 mo
242.438 272.878 li
242.438 274.138 li
231.882 274.138 li
231.882 272.878 li
233.044 272.878 li
232.596 272.626 232.26 272.29 232.036 271.884 cv
231.812 271.478 231.7 270.988 231.7 270.428 cv
231.7 269.504 232.078 268.748 232.806 268.16 cv
233.548 267.586 234.514 267.292 235.718 267.292 cv
236.922 267.292 237.902 267.586 238.63 268.16 cv
239.358 268.748 239.722 269.504 239.722 270.428 cv
239.722 270.988 239.61 271.478 239.4 271.884 cv
239.19 272.29 238.854 272.626 238.392 272.878 cv
235.718 268.594 mo
234.794 268.594 234.08 268.79 233.548 269.168 cv
233.016 269.56 232.75 270.078 232.75 270.736 cv
232.75 271.408 233.016 271.926 233.548 272.304 cv
234.08 272.696 234.794 272.878 235.718 272.878 cv
236.642 272.878 237.37 272.696 237.902 272.304 cv
238.434 271.926 238.686 271.408 238.686 270.736 cv
238.686 270.078 238.434 269.56 237.902 269.168 cv
237.37 268.79 236.642 268.594 235.718 268.594 cv
f
232.764 262.238 mo
232.764 262.91 233.03 263.442 233.562 263.834 cv
234.094 264.226 234.808 264.422 235.718 264.422 cv
236.642 264.422 237.356 264.24 237.888 263.848 cv
238.42 263.456 238.672 262.924 238.672 262.238 cv
238.672 261.566 238.42 261.034 237.888 260.642 cv
237.356 260.25 236.642 260.054 235.718 260.054 cv
234.822 260.054 234.094 260.25 233.562 260.642 cv
233.03 261.034 232.764 261.566 232.764 262.238 cv
231.7 262.238 mo
231.7 261.146 232.064 260.292 232.764 259.662 cv
233.478 259.046 234.458 258.724 235.718 258.724 cv
236.978 258.724 237.958 259.046 238.658 259.662 cv
239.372 260.292 239.722 261.146 239.722 262.238 cv
239.722 263.344 239.372 264.212 238.658 264.828 cv
237.958 265.444 236.978 265.752 235.718 265.752 cv
234.458 265.752 233.478 265.444 232.764 264.828 cv
232.064 264.212 231.7 263.344 231.7 262.238 cv
f
232.106 251.752 mo
233.296 251.752 li
233.128 252.116 232.988 252.48 232.89 252.858 cv
232.806 253.25 232.75 253.642 232.75 254.048 cv
232.75 254.678 232.848 255.154 233.044 255.462 cv
233.24 255.77 233.52 255.924 233.898 255.924 cv
234.192 255.924 234.416 255.812 234.584 255.588 cv
234.752 255.364 234.92 254.916 235.06 254.244 cv
235.158 253.81 li
235.354 252.914 235.634 252.284 235.97 251.906 cv
236.32 251.542 236.81 251.346 237.426 251.346 cv
238.14 251.346 238.7 251.626 239.106 252.186 cv
239.526 252.746 239.722 253.53 239.722 254.51 cv
239.722 254.93 239.68 255.35 239.61 255.798 cv
239.54 256.246 239.428 256.708 239.26 257.198 cv
237.958 257.198 li
238.21 256.736 238.392 256.274 238.504 255.826 cv
238.63 255.378 238.686 254.93 238.686 254.482 cv
238.686 253.894 238.588 253.432 238.392 253.11 cv
238.196 252.802 237.902 252.634 237.524 252.634 cv
237.188 252.634 236.922 252.76 236.74 252.984 cv
236.558 253.208 236.376 253.712 236.208 254.496 cv
236.11 254.93 li
235.942 255.714 235.69 256.288 235.354 256.624 cv
235.018 256.974 234.556 257.142 233.954 257.142 cv
233.24 257.142 232.68 256.89 232.288 256.386 cv
231.896 255.882 231.7 255.154 231.7 254.202 cv
231.7 253.74 231.742 253.306 231.812 252.886 cv
231.882 252.48 231.98 252.102 232.106 251.752 cv
f
237.804 249.162 mo
237.804 247.72 li
239.54 247.72 li
239.54 249.162 li
237.804 249.162 li
f
235.718 239.39 mo
234.794 239.39 234.08 239.586 233.548 239.964 cv
233.016 240.356 232.75 240.874 232.75 241.532 cv
232.75 242.204 233.016 242.722 233.548 243.1 cv
234.08 243.492 234.794 243.674 235.718 243.674 cv
236.642 243.674 237.37 243.492 237.902 243.1 cv
238.434 242.722 238.686 242.204 238.686 241.532 cv
238.686 240.874 238.434 240.356 237.902 239.964 cv
237.37 239.586 236.642 239.39 235.718 239.39 cv
233.044 243.674 mo
232.596 243.422 232.26 243.086 232.036 242.68 cv
231.812 242.274 231.7 241.784 231.7 241.224 cv
231.7 240.3 232.078 239.544 232.806 238.956 cv
233.548 238.382 234.514 238.088 235.718 238.088 cv
236.922 238.088 237.902 238.382 238.63 238.956 cv
239.358 239.544 239.722 240.3 239.722 241.224 cv
239.722 241.784 239.61 242.274 239.4 242.68 cv
239.19 243.086 238.854 243.422 238.392 243.674 cv
239.54 243.674 li
239.54 244.934 li
228.9 244.934 li
228.9 243.674 li
233.044 243.674 li
f
235.69 232.516 mo
235.69 233.538 235.816 234.238 236.04 234.63 cv
236.278 235.022 236.67 235.218 237.23 235.218 cv
237.678 235.218 238.042 235.078 238.294 234.784 cv
238.56 234.49 238.686 234.084 238.686 233.58 cv
238.686 232.88 238.448 232.32 237.944 231.9 cv
237.454 231.48 236.796 231.27 235.97 231.27 cv
235.69 231.27 li
235.69 232.516 li
235.172 230.01 mo
239.54 230.01 li
239.54 231.27 li
238.378 231.27 li
238.854 231.564 239.19 231.928 239.4 232.348 cv
239.61 232.768 239.722 233.3 239.722 233.916 cv
239.722 234.7 239.512 235.33 239.078 235.792 cv
238.644 236.254 238.056 236.478 237.314 236.478 cv
236.46 236.478 235.816 236.198 235.368 235.61 cv
234.934 235.036 234.71 234.182 234.71 233.034 cv
234.71 231.27 li
234.584 231.27 li
234.01 231.27 233.562 231.466 233.24 231.844 cv
232.932 232.222 232.764 232.754 232.764 233.44 cv
232.764 233.888 232.82 234.308 232.932 234.728 cv
233.044 235.148 233.198 235.54 233.394 235.918 cv
232.232 235.918 li
232.064 235.47 231.924 235.022 231.84 234.588 cv
231.756 234.154 231.7 233.734 231.7 233.314 cv
231.7 232.208 231.994 231.382 232.568 230.836 cv
233.142 230.29 234.01 230.01 235.172 230.01 cv
f
231.882 227.42 mo
231.882 226.16 li
239.54 226.16 li
239.54 227.42 li
231.882 227.42 li
228.9 227.42 mo
228.9 226.16 li
230.496 226.16 li
230.496 227.42 li
228.9 227.42 li
f
233.044 218.488 mo
228.9 218.488 li
228.9 217.228 li
239.54 217.228 li
239.54 218.488 li
238.392 218.488 li
238.854 218.754 239.19 219.09 239.4 219.496 cv
239.61 219.902 239.722 220.378 239.722 220.938 cv
239.722 221.862 239.358 222.618 238.63 223.206 cv
237.902 223.794 236.922 224.074 235.718 224.074 cv
234.514 224.074 233.548 223.794 232.806 223.206 cv
232.078 222.618 231.7 221.862 231.7 220.938 cv
231.7 220.378 231.812 219.902 232.036 219.496 cv
232.26 219.09 232.596 218.754 233.044 218.488 cv
235.718 222.772 mo
236.642 222.772 237.37 222.59 237.902 222.212 cv
238.434 221.834 238.686 221.302 238.686 220.63 cv
238.686 219.972 238.434 219.454 237.902 219.062 cv
237.37 218.684 236.642 218.488 235.718 218.488 cv
234.794 218.488 234.08 218.684 233.548 219.062 cv
233.016 219.454 232.75 219.972 232.75 220.63 cv
232.75 221.302 233.016 221.834 233.548 222.212 cv
234.08 222.59 234.794 222.772 235.718 222.772 cv
f
236.516 214.764 mo
231.882 214.764 li
231.882 213.504 li
236.474 213.504 li
237.202 213.504 237.734 213.364 238.098 213.084 cv
238.462 212.804 238.644 212.384 238.644 211.81 cv
238.644 211.138 238.434 210.592 238 210.2 cv
237.566 209.808 236.978 209.612 236.222 209.612 cv
231.882 209.612 li
231.882 208.352 li
239.54 208.352 li
239.54 209.612 li
238.364 209.612 li
238.84 209.92 239.176 210.284 239.4 210.676 cv
239.61 211.082 239.722 211.544 239.722 212.076 cv
239.722 212.958 239.456 213.63 238.91 214.078 cv
238.378 214.54 237.58 214.764 236.516 214.764 cv
231.7 211.6 mo
231.7 211.6 li
f
237.804 205.58 mo
237.804 204.138 li
239.54 204.138 li
239.54 205.58 li
237.804 205.58 li
f
232.176 195.794 mo
233.352 195.794 li
233.156 196.158 233.016 196.508 232.918 196.872 cv
232.82 197.236 232.764 197.586 232.764 197.95 cv
232.764 198.762 233.03 199.406 233.548 199.854 cv
234.066 200.302 234.794 200.526 235.718 200.526 cv
236.656 200.526 237.384 200.302 237.902 199.854 cv
238.42 199.406 238.672 198.762 238.672 197.95 cv
238.672 197.586 238.63 197.236 238.532 196.872 cv
238.434 196.508 238.28 196.158 238.084 195.794 cv
239.246 195.794 li
239.414 196.158 239.54 196.522 239.61 196.886 cv
239.68 197.264 239.722 197.67 239.722 198.09 cv
239.722 199.238 239.372 200.162 238.644 200.834 cv
237.93 201.52 236.95 201.856 235.718 201.856 cv
234.472 201.856 233.492 201.52 232.778 200.834 cv
232.064 200.148 231.7 199.21 231.7 198.006 cv
231.7 197.614 231.742 197.236 231.826 196.872 cv
231.91 196.508 232.022 196.144 232.176 195.794 cv
f
232.764 190.642 mo
232.764 191.314 233.03 191.846 233.562 192.238 cv
234.094 192.63 234.808 192.826 235.718 192.826 cv
236.642 192.826 237.356 192.644 237.888 192.252 cv
238.42 191.86 238.672 191.328 238.672 190.642 cv
238.672 189.97 238.42 189.438 237.888 189.046 cv
237.356 188.654 236.642 188.458 235.718 188.458 cv
234.822 188.458 234.094 188.654 233.562 189.046 cv
233.03 189.438 232.764 189.97 232.764 190.642 cv
231.7 190.642 mo
231.7 189.55 232.064 188.696 232.764 188.066 cv
233.478 187.45 234.458 187.128 235.718 187.128 cv
236.978 187.128 237.958 187.45 238.658 188.066 cv
239.372 188.696 239.722 189.55 239.722 190.642 cv
239.722 191.748 239.372 192.616 238.658 193.232 cv
237.958 193.848 236.978 194.156 235.718 194.156 cv
234.458 194.156 233.478 193.848 232.764 193.232 cv
232.064 192.616 231.7 191.748 231.7 190.642 cv
f
233.352 179.078 mo
232.792 178.77 232.386 178.392 232.106 177.958 cv
231.84 177.524 231.7 177.006 231.7 176.404 cv
231.7 175.62 231.98 175.004 232.54 174.57 cv
233.1 174.136 233.898 173.912 234.92 173.912 cv
239.54 173.912 li
239.54 175.172 li
234.962 175.172 li
234.234 175.172 233.688 175.312 233.324 175.564 cv
232.974 175.83 232.792 176.222 232.792 176.754 cv
232.792 177.412 233.016 177.93 233.45 178.308 cv
233.884 178.686 234.472 178.868 235.214 178.868 cv
239.54 178.868 li
239.54 180.128 li
234.962 180.128 li
234.234 180.128 233.688 180.268 233.324 180.52 cv
232.974 180.786 232.792 181.192 232.792 181.724 cv
232.792 182.368 233.016 182.886 233.45 183.264 cv
233.884 183.642 234.472 183.824 235.214 183.824 cv
239.54 183.824 li
239.54 185.084 li
231.882 185.084 li
231.882 183.824 li
233.072 183.824 li
232.61 183.544 232.26 183.194 232.036 182.788 cv
231.812 182.396 231.7 181.92 231.7 181.36 cv
231.7 180.8 231.84 180.338 232.12 179.946 cv
232.4 179.554 232.82 179.274 233.352 179.078 cv
f
250.302 165.725 mo
250.302 169.225 li
f
250.302 165.725 mo
250.302 169.225 li
@
250.347 254.325 mo
251.271 254.325 251.999 254.143 252.531 253.765 cv
253.063 253.387 253.315 252.855 253.315 252.183 cv
253.315 251.525 253.063 251.007 252.531 250.615 cv
251.999 250.237 251.271 250.041 250.347 250.041 cv
249.423 250.041 248.709 250.237 248.177 250.615 cv
247.645 251.007 247.379 251.525 247.379 252.183 cv
247.379 252.855 247.645 253.387 248.177 253.765 cv
248.709 254.143 249.423 254.325 250.347 254.325 cv
253.021 250.041 mo
253.483 250.307 253.819 250.643 254.029 251.049 cv
254.239 251.455 254.351 251.931 254.351 252.491 cv
254.351 253.415 253.987 254.171 253.259 254.759 cv
252.531 255.347 251.551 255.627 250.347 255.627 cv
249.143 255.627 248.177 255.347 247.435 254.759 cv
246.707 254.171 246.329 253.415 246.329 252.491 cv
246.329 251.931 246.441 251.455 246.665 251.049 cv
246.889 250.643 247.225 250.307 247.673 250.041 cv
246.511 250.041 li
246.511 248.781 li
257.067 248.781 li
257.067 250.041 li
253.021 250.041 li
f
246.511 246.191 mo
246.511 244.931 li
254.169 244.931 li
254.169 246.191 li
246.511 246.191 li
243.529 246.191 mo
243.529 244.931 li
245.125 244.931 li
245.125 246.191 li
243.529 246.191 li
f
249.549 235.929 mo
254.169 235.929 li
254.169 237.189 li
249.591 237.189 li
248.863 237.189 248.331 237.343 247.967 237.623 cv
247.603 237.903 247.421 238.323 247.421 238.883 cv
247.421 239.569 247.645 240.101 248.079 240.493 cv
248.513 240.885 249.101 241.081 249.843 241.081 cv
254.169 241.081 li
254.169 242.341 li
246.511 242.341 li
246.511 241.081 li
247.701 241.081 li
247.253 240.787 246.903 240.437 246.679 240.017 cv
246.455 239.611 246.329 239.135 246.329 238.603 cv
246.329 237.735 246.609 237.063 247.155 236.615 cv
247.701 236.167 248.499 235.929 249.549 235.929 cv
f
250.249 228.383 mo
249.353 228.383 248.639 228.579 248.135 228.943 cv
247.631 229.321 247.379 229.853 247.379 230.525 cv
247.379 231.197 247.631 231.729 248.135 232.107 cv
248.639 232.485 249.353 232.667 250.249 232.667 cv
251.159 232.667 251.859 232.485 252.363 232.107 cv
252.867 231.729 253.119 231.197 253.119 230.525 cv
253.119 229.853 252.867 229.321 252.363 228.943 cv
251.859 228.579 251.159 228.383 250.249 228.383 cv
253.217 227.123 mo
254.505 227.123 255.471 227.417 256.115 227.991 cv
256.745 228.579 257.067 229.461 257.067 230.651 cv
257.067 231.099 257.025 231.505 256.969 231.897 cv
256.899 232.289 256.801 232.681 256.661 233.045 cv
255.443 233.045 li
255.639 232.681 255.779 232.317 255.877 231.953 cv
255.975 231.589 256.031 231.225 256.031 230.847 cv
256.031 230.035 255.807 229.419 255.387 228.999 cv
254.953 228.593 254.309 228.383 253.441 228.383 cv
252.825 228.383 li
253.273 228.649 253.609 228.985 253.833 229.391 cv
254.057 229.797 254.169 230.273 254.169 230.833 cv
254.169 231.785 253.819 232.541 253.105 233.115 cv
252.391 233.689 251.439 233.969 250.249 233.969 cv
249.073 233.969 248.121 233.689 247.407 233.115 cv
246.693 232.541 246.329 231.785 246.329 230.833 cv
246.329 230.273 246.441 229.797 246.665 229.391 cv
246.889 228.985 247.225 228.649 247.673 228.383 cv
246.511 228.383 li
246.511 227.123 li
253.217 227.123 li
f
252.433 224.351 mo
252.433 222.909 li
254.169 222.909 li
254.169 224.351 li
252.433 224.351 li
f
246.511 220.809 mo
246.511 219.549 li
252.489 217.981 li
246.511 216.413 li
246.511 214.929 li
252.489 213.361 li
246.511 211.793 li
246.511 210.533 li
254.169 212.535 li
254.169 214.019 li
247.897 215.671 li
254.169 217.323 li
254.169 218.807 li
246.511 220.809 li
f
253.021 207.411 mo
257.067 207.411 li
257.067 208.671 li
246.511 208.671 li
246.511 207.411 li
247.673 207.411 li
247.225 207.159 246.889 206.823 246.665 206.417 cv
246.441 206.011 246.329 205.521 246.329 204.961 cv
246.329 204.037 246.707 203.281 247.435 202.693 cv
248.177 202.119 249.143 201.825 250.347 201.825 cv
251.551 201.825 252.531 202.119 253.259 202.693 cv
253.987 203.281 254.351 204.037 254.351 204.961 cv
254.351 205.521 254.239 206.011 254.029 206.417 cv
253.819 206.823 253.483 207.159 253.021 207.411 cv
250.347 203.127 mo
249.423 203.127 248.709 203.323 248.177 203.701 cv
247.645 204.093 247.379 204.611 247.379 205.269 cv
247.379 205.941 247.645 206.459 248.177 206.837 cv
248.709 207.229 249.423 207.411 250.347 207.411 cv
251.271 207.411 251.999 207.229 252.531 206.837 cv
253.063 206.459 253.315 205.941 253.315 205.269 cv
253.315 204.611 253.063 204.093 252.531 203.701 cv
251.999 203.323 251.271 203.127 250.347 203.127 cv
f
246.735 194.853 mo
247.925 194.853 li
247.757 195.217 247.617 195.581 247.519 195.959 cv
247.435 196.351 247.379 196.743 247.379 197.149 cv
247.379 197.779 247.477 198.255 247.673 198.563 cv
247.869 198.871 248.149 199.025 248.527 199.025 cv
248.821 199.025 249.045 198.913 249.213 198.689 cv
249.381 198.465 249.549 198.017 249.689 197.345 cv
249.787 196.911 li
249.983 196.015 250.263 195.385 250.599 195.007 cv
250.949 194.643 251.439 194.447 252.055 194.447 cv
252.769 194.447 253.329 194.727 253.735 195.287 cv
254.155 195.847 254.351 196.631 254.351 197.611 cv
254.351 198.031 254.309 198.451 254.239 198.899 cv
254.169 199.347 254.057 199.809 253.889 200.299 cv
252.587 200.299 li
252.839 199.837 253.021 199.375 253.133 198.927 cv
253.259 198.479 253.315 198.031 253.315 197.583 cv
253.315 196.995 253.217 196.533 253.021 196.211 cv
252.825 195.903 252.531 195.735 252.153 195.735 cv
251.817 195.735 251.551 195.861 251.369 196.085 cv
251.187 196.309 251.005 196.813 250.837 197.597 cv
250.739 198.031 li
250.571 198.815 250.319 199.389 249.983 199.725 cv
249.647 200.075 249.185 200.243 248.583 200.243 cv
247.869 200.243 247.309 199.991 246.917 199.487 cv
246.525 198.983 246.329 198.255 246.329 197.303 cv
246.329 196.841 246.371 196.407 246.441 195.987 cv
246.511 195.581 246.609 195.203 246.735 194.853 cv
f
252.433 192.263 mo
252.433 190.821 li
254.169 190.821 li
254.169 192.263 li
252.433 192.263 li
f
246.805 182.477 mo
247.981 182.477 li
247.785 182.841 247.645 183.191 247.547 183.555 cv
247.449 183.919 247.393 184.269 247.393 184.633 cv
247.393 185.445 247.659 186.089 248.177 186.537 cv
248.695 186.985 249.423 187.209 250.347 187.209 cv
251.285 187.209 252.013 186.985 252.531 186.537 cv
253.049 186.089 253.301 185.445 253.301 184.633 cv
253.301 184.269 253.259 183.919 253.161 183.555 cv
253.063 183.191 252.909 182.841 252.713 182.477 cv
253.875 182.477 li
254.043 182.841 254.169 183.205 254.239 183.569 cv
254.309 183.947 254.351 184.353 254.351 184.773 cv
254.351 185.921 254.001 186.845 253.273 187.517 cv
252.559 188.203 251.579 188.539 250.347 188.539 cv
249.101 188.539 248.121 188.203 247.407 187.517 cv
246.693 186.831 246.329 185.893 246.329 184.689 cv
246.329 184.297 246.371 183.919 246.455 183.555 cv
246.539 183.191 246.651 182.827 246.805 182.477 cv
f
249.549 173.923 mo
254.169 173.923 li
254.169 175.183 li
249.591 175.183 li
248.863 175.183 248.331 175.337 247.967 175.617 cv
247.603 175.897 247.421 176.317 247.421 176.877 cv
247.421 177.563 247.645 178.095 248.079 178.487 cv
248.513 178.879 249.101 179.075 249.843 179.075 cv
254.169 179.075 li
254.169 180.335 li
246.511 180.335 li
246.511 179.075 li
247.701 179.075 li
247.253 178.781 246.903 178.431 246.679 178.011 cv
246.455 177.605 246.329 177.129 246.329 176.597 cv
246.329 175.729 246.609 175.057 247.155 174.609 cv
247.701 174.161 248.499 173.923 249.549 173.923 cv
f
264.93 165.725 mo
264.93 169.225 li
f
264.93 165.725 mo
264.93 169.225 li
@
261.363 226.023 mo
262.553 226.023 li
262.385 226.387 262.245 226.751 262.147 227.129 cv
262.063 227.521 262.007 227.913 262.007 228.319 cv
262.007 228.949 262.105 229.425 262.301 229.733 cv
262.497 230.041 262.777 230.195 263.155 230.195 cv
263.449 230.195 263.673 230.083 263.841 229.859 cv
264.009 229.635 264.177 229.187 264.317 228.515 cv
264.415 228.081 li
264.611 227.185 264.891 226.555 265.227 226.177 cv
265.577 225.813 266.067 225.617 266.683 225.617 cv
267.397 225.617 267.957 225.897 268.363 226.457 cv
268.783 227.017 268.979 227.801 268.979 228.781 cv
268.979 229.201 268.937 229.621 268.867 230.069 cv
268.797 230.517 268.685 230.979 268.517 231.469 cv
267.215 231.469 li
267.467 231.007 267.649 230.545 267.761 230.097 cv
267.887 229.649 267.943 229.201 267.943 228.753 cv
267.943 228.165 267.845 227.703 267.649 227.381 cv
267.453 227.073 267.159 226.905 266.781 226.905 cv
266.445 226.905 266.179 227.031 265.997 227.255 cv
265.815 227.479 265.633 227.983 265.465 228.767 cv
265.367 229.201 li
265.199 229.985 264.947 230.559 264.611 230.895 cv
264.275 231.245 263.813 231.413 263.211 231.413 cv
262.497 231.413 261.937 231.161 261.545 230.657 cv
261.153 230.153 260.957 229.425 260.957 228.473 cv
260.957 228.011 260.999 227.577 261.069 227.157 cv
261.139 226.751 261.237 226.373 261.363 226.023 cv
f
267.061 223.433 mo
267.061 221.991 li
268.797 221.991 li
268.797 223.433 li
267.061 223.433 li
f
263.295 214.795 mo
263.435 214.137 263.729 213.619 264.177 213.255 cv
264.625 212.891 265.185 212.695 265.829 212.695 cv
266.837 212.695 267.621 213.045 268.167 213.731 cv
268.713 214.431 268.979 215.411 268.979 216.685 cv
268.979 217.119 268.937 217.567 268.853 218.015 cv
268.783 218.463 268.657 218.939 268.489 219.415 cv
267.159 219.415 li
267.383 219.037 267.551 218.617 267.663 218.155 cv
267.775 217.707 267.831 217.231 267.831 216.727 cv
267.831 215.859 267.663 215.201 267.327 214.753 cv
266.991 214.305 266.487 214.067 265.829 214.067 cv
265.241 214.067 264.765 214.277 264.429 214.697 cv
264.093 215.117 263.911 215.705 263.911 216.461 cv
263.911 217.651 li
262.777 217.651 li
262.777 216.405 li
262.777 215.733 262.651 215.215 262.371 214.851 cv
262.105 214.487 261.713 214.305 261.195 214.305 cv
260.677 214.305 260.271 214.501 259.991 214.865 cv
259.711 215.243 259.571 215.775 259.571 216.461 cv
259.571 216.839 259.613 217.245 259.697 217.679 cv
259.781 218.113 259.907 218.589 260.075 219.107 cv
258.843 219.107 li
258.703 218.589 258.591 218.099 258.521 217.637 cv
258.451 217.189 258.409 216.755 258.409 216.335 cv
258.409 215.299 258.647 214.473 259.123 213.857 cv
259.599 213.241 260.243 212.933 261.055 212.933 cv
261.615 212.933 262.091 213.101 262.483 213.423 cv
262.875 213.745 263.155 214.207 263.295 214.795 cv
f
263.141 206.955 mo
263.141 207.571 263.365 208.061 263.785 208.425 cv
264.205 208.789 264.793 208.971 265.521 208.971 cv
266.263 208.971 266.851 208.789 267.271 208.425 cv
267.691 208.061 267.901 207.571 267.901 206.955 cv
267.901 206.339 267.691 205.849 267.271 205.485 cv
266.851 205.121 266.263 204.939 265.521 204.939 cv
264.793 204.939 264.205 205.121 263.785 205.485 cv
263.365 205.849 263.141 206.339 263.141 206.955 cv
258.815 204.211 mo
260.075 204.211 li
259.907 204.561 259.781 204.911 259.697 205.261 cv
259.613 205.625 259.571 205.975 259.571 206.311 cv
259.571 207.235 259.879 207.935 260.495 208.411 cv
261.111 208.887 262.049 209.167 263.281 209.223 cv
262.889 208.957 262.581 208.621 262.371 208.215 cv
262.161 207.809 262.049 207.361 262.049 206.871 cv
262.049 205.849 262.371 205.037 262.987 204.449 cv
263.603 203.861 264.457 203.553 265.521 203.553 cv
266.571 203.553 267.411 203.875 268.041 204.491 cv
268.671 205.107 268.979 205.933 268.979 206.955 cv
268.979 208.131 268.531 209.041 267.635 209.657 cv
266.739 210.287 265.423 210.595 263.701 210.595 cv
262.091 210.595 260.803 210.217 259.851 209.447 cv
258.899 208.691 258.409 207.655 258.409 206.367 cv
258.409 206.031 258.451 205.681 258.507 205.317 cv
258.577 204.967 258.675 204.603 258.815 204.211 cv
f
259.501 198.219 mo
259.501 198.933 259.851 199.465 260.551 199.829 cv
261.251 200.193 262.301 200.361 263.701 200.361 cv
265.101 200.361 266.151 200.193 266.851 199.829 cv
267.551 199.465 267.901 198.933 267.901 198.219 cv
267.901 197.505 267.551 196.973 266.851 196.609 cv
266.151 196.259 265.101 196.077 263.701 196.077 cv
262.301 196.077 261.251 196.259 260.551 196.609 cv
259.851 196.973 259.501 197.505 259.501 198.219 cv
258.409 198.219 mo
258.409 197.085 258.871 196.217 259.767 195.601 cv
260.677 194.999 261.993 194.691 263.701 194.691 cv
265.423 194.691 266.739 194.999 267.635 195.601 cv
268.531 196.217 268.979 197.085 268.979 198.219 cv
268.979 199.367 268.531 200.249 267.635 200.851 cv
266.739 201.453 265.423 201.747 263.701 201.747 cv
261.993 201.747 260.677 201.453 259.767 200.851 cv
258.871 200.249 258.409 199.367 258.409 198.219 cv
f
267.061 192.269 mo
267.061 190.827 li
268.797 190.827 li
268.797 192.269 li
267.061 192.269 li
f
261.433 182.483 mo
262.609 182.483 li
262.413 182.847 262.273 183.197 262.175 183.561 cv
262.077 183.925 262.021 184.275 262.021 184.639 cv
262.021 185.451 262.287 186.095 262.805 186.543 cv
263.323 186.991 264.051 187.215 264.975 187.215 cv
265.913 187.215 266.641 186.991 267.159 186.543 cv
267.677 186.095 267.929 185.451 267.929 184.639 cv
267.929 184.275 267.887 183.925 267.789 183.561 cv
267.691 183.197 267.537 182.847 267.341 182.483 cv
268.503 182.483 li
268.671 182.847 268.797 183.211 268.867 183.575 cv
268.937 183.953 268.979 184.359 268.979 184.779 cv
268.979 185.927 268.629 186.851 267.901 187.523 cv
267.187 188.209 266.207 188.545 264.975 188.545 cv
263.729 188.545 262.749 188.209 262.035 187.523 cv
261.321 186.837 260.957 185.899 260.957 184.695 cv
260.957 184.303 260.999 183.925 261.083 183.561 cv
261.167 183.197 261.279 182.833 261.433 182.483 cv
f
264.177 173.929 mo
268.797 173.929 li
268.797 175.189 li
264.219 175.189 li
263.491 175.189 262.959 175.343 262.595 175.623 cv
262.231 175.903 262.049 176.323 262.049 176.883 cv
262.049 177.569 262.273 178.101 262.707 178.493 cv
263.141 178.885 263.729 179.081 264.471 179.081 cv
268.797 179.081 li
268.797 180.341 li
261.139 180.341 li
261.139 179.081 li
262.329 179.081 li
261.881 178.787 261.531 178.437 261.307 178.017 cv
261.083 177.611 260.957 177.135 260.957 176.603 cv
260.957 175.735 261.237 175.063 261.783 174.615 cv
262.329 174.167 263.127 173.929 264.177 173.929 cv
f
279.559 165.725 mo
279.559 169.225 li
f
279.559 165.725 mo
279.559 169.225 li
@
275.768 276.496 mo
275.768 275.236 li
281.746 273.668 li
275.768 272.1 li
275.768 270.616 li
281.746 269.048 li
275.768 267.48 li
275.768 266.22 li
283.426 268.222 li
283.426 269.706 li
277.154 271.358 li
283.426 273.01 li
283.426 274.494 li
275.768 276.496 li
f
275.768 265.044 mo
275.768 263.784 li
281.746 262.216 li
275.768 260.648 li
275.768 259.164 li
281.746 257.596 li
275.768 256.028 li
275.768 254.768 li
283.426 256.77 li
283.426 258.254 li
277.154 259.906 li
283.426 261.558 li
283.426 263.042 li
275.768 265.044 li
f
275.768 253.592 mo
275.768 252.332 li
281.746 250.764 li
275.768 249.196 li
275.768 247.712 li
281.746 246.144 li
275.768 244.576 li
275.768 243.316 li
283.426 245.318 li
283.426 246.802 li
277.154 248.454 li
283.426 250.106 li
283.426 251.59 li
275.768 253.592 li
f
281.69 241.23 mo
281.69 239.788 li
283.426 239.788 li
283.426 241.23 li
281.69 241.23 li
f
282.264 236.54 mo
282.264 234.286 li
274.48 234.286 li
274.97 236.736 li
273.71 236.736 li
273.22 234.3 li
273.22 232.914 li
282.264 232.914 li
282.264 230.66 li
283.426 230.66 li
283.426 236.54 li
282.264 236.54 li
f
282.264 226.684 mo
282.264 221.868 li
283.426 221.868 li
283.426 228.35 li
282.264 228.35 li
281.732 227.832 281.004 227.118 280.08 226.208 cv
279.17 225.312 278.582 224.738 278.316 224.5 cv
277.826 224.052 277.406 223.744 277.056 223.576 cv
276.72 223.408 276.37 223.31 276.034 223.31 cv
275.502 223.31 275.054 223.506 274.718 223.884 cv
274.382 224.262 274.2 224.752 274.2 225.368 cv
274.2 225.802 274.284 226.264 274.424 226.74 cv
274.578 227.216 274.802 227.734 275.11 228.28 cv
273.71 228.28 li
273.486 227.72 273.318 227.202 273.206 226.726 cv
273.094 226.25 273.038 225.802 273.038 225.396 cv
273.038 224.346 273.304 223.506 273.836 222.876 cv
274.368 222.246 275.068 221.924 275.95 221.924 cv
276.37 221.924 276.776 222.008 277.14 222.162 cv
277.518 222.316 277.966 222.596 278.47 223.016 cv
278.61 223.128 278.988 223.492 279.618 224.108 cv
280.248 224.724 281.13 225.578 282.264 226.684 cv
f
277.924 214.784 mo
278.064 214.126 278.358 213.608 278.806 213.244 cv
279.254 212.88 279.814 212.684 280.458 212.684 cv
281.466 212.684 282.25 213.034 282.796 213.72 cv
283.342 214.42 283.608 215.4 283.608 216.674 cv
283.608 217.108 283.566 217.556 283.482 218.004 cv
283.412 218.452 283.286 218.928 283.118 219.404 cv
281.788 219.404 li
282.012 219.026 282.18 218.606 282.292 218.144 cv
282.404 217.696 282.46 217.22 282.46 216.716 cv
282.46 215.848 282.292 215.19 281.956 214.742 cv
281.62 214.294 281.116 214.056 280.458 214.056 cv
279.87 214.056 279.394 214.266 279.058 214.686 cv
278.722 215.106 278.54 215.694 278.54 216.45 cv
278.54 217.64 li
277.406 217.64 li
277.406 216.394 li
277.406 215.722 277.28 215.204 277 214.84 cv
276.734 214.476 276.342 214.294 275.824 214.294 cv
275.306 214.294 274.9 214.49 274.62 214.854 cv
274.34 215.232 274.2 215.764 274.2 216.45 cv
274.2 216.828 274.242 217.234 274.326 217.668 cv
274.41 218.102 274.536 218.578 274.704 219.096 cv
273.472 219.096 li
273.332 218.578 273.22 218.088 273.15 217.626 cv
273.08 217.178 273.038 216.744 273.038 216.324 cv
273.038 215.288 273.276 214.462 273.752 213.846 cv
274.228 213.23 274.872 212.922 275.684 212.922 cv
276.244 212.922 276.72 213.09 277.112 213.412 cv
277.504 213.734 277.784 214.196 277.924 214.784 cv
f
274.13 207.112 mo
274.13 207.826 274.48 208.358 275.18 208.722 cv
275.88 209.086 276.93 209.254 278.33 209.254 cv
279.73 209.254 280.78 209.086 281.48 208.722 cv
282.18 208.358 282.53 207.826 282.53 207.112 cv
282.53 206.398 282.18 205.866 281.48 205.502 cv
280.78 205.152 279.73 204.97 278.33 204.97 cv
276.93 204.97 275.88 205.152 275.18 205.502 cv
274.48 205.866 274.13 206.398 274.13 207.112 cv
273.038 207.112 mo
273.038 205.978 273.5 205.11 274.396 204.494 cv
275.306 203.892 276.622 203.584 278.33 203.584 cv
280.052 203.584 281.368 203.892 282.264 204.494 cv
283.16 205.11 283.608 205.978 283.608 207.112 cv
283.608 208.26 283.16 209.142 282.264 209.744 cv
281.368 210.346 280.052 210.64 278.33 210.64 cv
276.622 210.64 275.306 210.346 274.396 209.744 cv
273.5 209.142 273.038 208.26 273.038 207.112 cv
f
277.77 198.04 mo
277.77 198.656 277.994 199.146 278.414 199.51 cv
278.834 199.874 279.422 200.056 280.15 200.056 cv
280.892 200.056 281.48 199.874 281.9 199.51 cv
282.32 199.146 282.53 198.656 282.53 198.04 cv
282.53 197.424 282.32 196.934 281.9 196.57 cv
281.48 196.206 280.892 196.024 280.15 196.024 cv
279.422 196.024 278.834 196.206 278.414 196.57 cv
277.994 196.934 277.77 197.424 277.77 198.04 cv
273.444 195.296 mo
274.704 195.296 li
274.536 195.646 274.41 195.996 274.326 196.346 cv
274.242 196.71 274.2 197.06 274.2 197.396 cv
274.2 198.32 274.508 199.02 275.124 199.496 cv
275.74 199.972 276.678 200.252 277.91 200.308 cv
277.518 200.042 277.21 199.706 277 199.3 cv
276.79 198.894 276.678 198.446 276.678 197.956 cv
276.678 196.934 277 196.122 277.616 195.534 cv
278.232 194.946 279.086 194.638 280.15 194.638 cv
281.2 194.638 282.04 194.96 282.67 195.576 cv
283.3 196.192 283.608 197.018 283.608 198.04 cv
283.608 199.216 283.16 200.126 282.264 200.742 cv
281.368 201.372 280.052 201.68 278.33 201.68 cv
276.72 201.68 275.432 201.302 274.48 200.532 cv
273.528 199.776 273.038 198.74 273.038 197.452 cv
273.038 197.116 273.08 196.766 273.136 196.402 cv
273.206 196.052 273.304 195.688 273.444 195.296 cv
f
281.69 192.258 mo
281.69 190.816 li
283.426 190.816 li
283.426 192.258 li
281.69 192.258 li
f
276.062 182.472 mo
277.238 182.472 li
277.042 182.836 276.902 183.186 276.804 183.55 cv
276.706 183.914 276.65 184.264 276.65 184.628 cv
276.65 185.44 276.916 186.084 277.434 186.532 cv
277.952 186.98 278.68 187.204 279.604 187.204 cv
280.542 187.204 281.27 186.98 281.788 186.532 cv
282.306 186.084 282.558 185.44 282.558 184.628 cv
282.558 184.264 282.516 183.914 282.418 183.55 cv
282.32 183.186 282.166 182.836 281.97 182.472 cv
283.132 182.472 li
283.3 182.836 283.426 183.2 283.496 183.564 cv
283.566 183.942 283.608 184.348 283.608 184.768 cv
283.608 185.916 283.258 186.84 282.53 187.512 cv
281.816 188.198 280.836 188.534 279.604 188.534 cv
278.358 188.534 277.378 188.198 276.664 187.512 cv
275.95 186.826 275.586 185.888 275.586 184.684 cv
275.586 184.292 275.628 183.914 275.712 183.55 cv
275.796 183.186 275.908 182.822 276.062 182.472 cv
f
278.806 173.918 mo
283.426 173.918 li
283.426 175.178 li
278.848 175.178 li
278.12 175.178 277.588 175.332 277.224 175.612 cv
276.86 175.892 276.678 176.312 276.678 176.872 cv
276.678 177.558 276.902 178.09 277.336 178.482 cv
277.77 178.874 278.358 179.07 279.1 179.07 cv
283.426 179.07 li
283.426 180.33 li
275.768 180.33 li
275.768 179.07 li
276.958 179.07 li
276.51 178.776 276.16 178.426 275.936 178.006 cv
275.712 177.6 275.586 177.124 275.586 176.592 cv
275.586 175.724 275.866 175.052 276.412 174.604 cv
276.958 174.156 277.756 173.918 278.806 173.918 cv
f
294.187 165.725 mo
294.187 169.225 li
f
294.187 165.725 mo
294.187 169.225 li
@
290.396 284.418 mo
290.396 283.158 li
296.374 281.59 li
290.396 280.022 li
290.396 278.538 li
296.374 276.97 li
290.396 275.402 li
290.396 274.142 li
298.054 276.144 li
298.054 277.628 li
291.782 279.28 li
298.054 280.932 li
298.054 282.416 li
290.396 284.418 li
f
290.396 272.966 mo
290.396 271.706 li
296.374 270.138 li
290.396 268.57 li
290.396 267.086 li
296.374 265.518 li
290.396 263.95 li
290.396 262.69 li
298.054 264.692 li
298.054 266.176 li
291.782 267.828 li
298.054 269.48 li
298.054 270.964 li
290.396 272.966 li
f
290.396 261.514 mo
290.396 260.254 li
296.374 258.686 li
290.396 257.118 li
290.396 255.634 li
296.374 254.066 li
290.396 252.498 li
290.396 251.238 li
298.054 253.24 li
298.054 254.724 li
291.782 256.376 li
298.054 258.028 li
298.054 259.512 li
290.396 261.514 li
f
296.318 249.152 mo
296.318 247.71 li
298.054 247.71 li
298.054 249.152 li
296.318 249.152 li
f
294.232 239.38 mo
293.308 239.38 292.594 239.576 292.062 239.954 cv
291.53 240.346 291.264 240.864 291.264 241.522 cv
291.264 242.194 291.53 242.712 292.062 243.09 cv
292.594 243.482 293.308 243.664 294.232 243.664 cv
295.156 243.664 295.884 243.482 296.416 243.09 cv
296.948 242.712 297.2 242.194 297.2 241.522 cv
297.2 240.864 296.948 240.346 296.416 239.954 cv
295.884 239.576 295.156 239.38 294.232 239.38 cv
291.558 243.664 mo
291.11 243.412 290.774 243.076 290.55 242.67 cv
290.326 242.264 290.214 241.774 290.214 241.214 cv
290.214 240.29 290.592 239.534 291.32 238.946 cv
292.062 238.372 293.028 238.078 294.232 238.078 cv
295.436 238.078 296.416 238.372 297.144 238.946 cv
297.872 239.534 298.236 240.29 298.236 241.214 cv
298.236 241.774 298.124 242.264 297.914 242.67 cv
297.704 243.076 297.368 243.412 296.906 243.664 cv
298.054 243.664 li
298.054 244.924 li
287.414 244.924 li
287.414 243.664 li
291.558 243.664 li
f
294.204 232.506 mo
294.204 233.528 294.33 234.228 294.554 234.62 cv
294.792 235.012 295.184 235.208 295.744 235.208 cv
296.192 235.208 296.556 235.068 296.808 234.774 cv
297.074 234.48 297.2 234.074 297.2 233.57 cv
297.2 232.87 296.962 232.31 296.458 231.89 cv
295.968 231.47 295.31 231.26 294.484 231.26 cv
294.204 231.26 li
294.204 232.506 li
293.686 230 mo
298.054 230 li
298.054 231.26 li
296.892 231.26 li
297.368 231.554 297.704 231.918 297.914 232.338 cv
298.124 232.758 298.236 233.29 298.236 233.906 cv
298.236 234.69 298.026 235.32 297.592 235.782 cv
297.158 236.244 296.57 236.468 295.828 236.468 cv
294.974 236.468 294.33 236.188 293.882 235.6 cv
293.448 235.026 293.224 234.172 293.224 233.024 cv
293.224 231.26 li
293.098 231.26 li
292.524 231.26 292.076 231.456 291.754 231.834 cv
291.446 232.212 291.278 232.744 291.278 233.43 cv
291.278 233.878 291.334 234.298 291.446 234.718 cv
291.558 235.138 291.712 235.53 291.908 235.908 cv
290.746 235.908 li
290.578 235.46 290.438 235.012 290.354 234.578 cv
290.27 234.144 290.214 233.724 290.214 233.304 cv
290.214 232.198 290.508 231.372 291.082 230.826 cv
291.656 230.28 292.524 230 293.686 230 cv
f
290.396 227.41 mo
290.396 226.15 li
298.054 226.15 li
298.054 227.41 li
290.396 227.41 li
287.414 227.41 mo
287.414 226.15 li
289.01 226.15 li
289.01 227.41 li
287.414 227.41 li
f
291.558 218.478 mo
287.414 218.478 li
287.414 217.218 li
298.054 217.218 li
298.054 218.478 li
296.906 218.478 li
297.368 218.744 297.704 219.08 297.914 219.486 cv
298.124 219.892 298.236 220.368 298.236 220.928 cv
298.236 221.852 297.872 222.608 297.144 223.196 cv
296.416 223.784 295.436 224.064 294.232 224.064 cv
293.028 224.064 292.062 223.784 291.32 223.196 cv
290.592 222.608 290.214 221.852 290.214 220.928 cv
290.214 220.368 290.326 219.892 290.55 219.486 cv
290.774 219.08 291.11 218.744 291.558 218.478 cv
294.232 222.762 mo
295.156 222.762 295.884 222.58 296.416 222.202 cv
296.948 221.824 297.2 221.292 297.2 220.62 cv
297.2 219.962 296.948 219.444 296.416 219.052 cv
295.884 218.674 295.156 218.478 294.232 218.478 cv
293.308 218.478 292.594 218.674 292.062 219.052 cv
291.53 219.444 291.264 219.962 291.264 220.62 cv
291.264 221.292 291.53 221.824 292.062 222.202 cv
292.594 222.58 293.308 222.762 294.232 222.762 cv
f
295.03 214.754 mo
290.396 214.754 li
290.396 213.494 li
294.988 213.494 li
295.716 213.494 296.248 213.354 296.612 213.074 cv
296.976 212.794 297.158 212.374 297.158 211.8 cv
297.158 211.128 296.948 210.582 296.514 210.19 cv
296.08 209.798 295.492 209.602 294.736 209.602 cv
290.396 209.602 li
290.396 208.342 li
298.054 208.342 li
298.054 209.602 li
296.878 209.602 li
297.354 209.91 297.69 210.274 297.914 210.666 cv
298.124 211.072 298.236 211.534 298.236 212.066 cv
298.236 212.948 297.97 213.62 297.424 214.068 cv
296.892 214.53 296.094 214.754 295.03 214.754 cv
290.214 211.59 mo
290.214 211.59 li
f
296.318 205.57 mo
296.318 204.128 li
298.054 204.128 li
298.054 205.57 li
296.318 205.57 li
f
290.69 195.784 mo
291.866 195.784 li
291.67 196.148 291.53 196.498 291.432 196.862 cv
291.334 197.226 291.278 197.576 291.278 197.94 cv
291.278 198.752 291.544 199.396 292.062 199.844 cv
292.58 200.292 293.308 200.516 294.232 200.516 cv
295.17 200.516 295.898 200.292 296.416 199.844 cv
296.934 199.396 297.186 198.752 297.186 197.94 cv
297.186 197.576 297.144 197.226 297.046 196.862 cv
296.948 196.498 296.794 196.148 296.598 195.784 cv
297.76 195.784 li
297.928 196.148 298.054 196.512 298.124 196.876 cv
298.194 197.254 298.236 197.66 298.236 198.08 cv
298.236 199.228 297.886 200.152 297.158 200.824 cv
296.444 201.51 295.464 201.846 294.232 201.846 cv
292.986 201.846 292.006 201.51 291.292 200.824 cv
290.578 200.138 290.214 199.2 290.214 197.996 cv
290.214 197.604 290.256 197.226 290.34 196.862 cv
290.424 196.498 290.536 196.134 290.69 195.784 cv
f
291.278 190.632 mo
291.278 191.304 291.544 191.836 292.076 192.228 cv
292.608 192.62 293.322 192.816 294.232 192.816 cv
295.156 192.816 295.87 192.634 296.402 192.242 cv
296.934 191.85 297.186 191.318 297.186 190.632 cv
297.186 189.96 296.934 189.428 296.402 189.036 cv
295.87 188.644 295.156 188.448 294.232 188.448 cv
293.336 188.448 292.608 188.644 292.076 189.036 cv
291.544 189.428 291.278 189.96 291.278 190.632 cv
290.214 190.632 mo
290.214 189.54 290.578 188.686 291.278 188.056 cv
291.992 187.44 292.972 187.118 294.232 187.118 cv
295.492 187.118 296.472 187.44 297.172 188.056 cv
297.886 188.686 298.236 189.54 298.236 190.632 cv
298.236 191.738 297.886 192.606 297.172 193.222 cv
296.472 193.838 295.492 194.146 294.232 194.146 cv
292.972 194.146 291.992 193.838 291.278 193.222 cv
290.578 192.606 290.214 191.738 290.214 190.632 cv
f
291.866 179.068 mo
291.306 178.76 290.9 178.382 290.62 177.948 cv
290.354 177.514 290.214 176.996 290.214 176.394 cv
290.214 175.61 290.494 174.994 291.054 174.56 cv
291.614 174.126 292.412 173.902 293.434 173.902 cv
298.054 173.902 li
298.054 175.162 li
293.476 175.162 li
292.748 175.162 292.202 175.302 291.838 175.554 cv
291.488 175.82 291.306 176.212 291.306 176.744 cv
291.306 177.402 291.53 177.92 291.964 178.298 cv
292.398 178.676 292.986 178.858 293.728 178.858 cv
298.054 178.858 li
298.054 180.118 li
293.476 180.118 li
292.748 180.118 292.202 180.258 291.838 180.51 cv
291.488 180.776 291.306 181.182 291.306 181.714 cv
291.306 182.358 291.53 182.876 291.964 183.254 cv
292.398 183.632 292.986 183.814 293.728 183.814 cv
298.054 183.814 li
298.054 185.074 li
290.396 185.074 li
290.396 183.814 li
291.586 183.814 li
291.124 183.534 290.774 183.184 290.55 182.778 cv
290.326 182.386 290.214 181.91 290.214 181.35 cv
290.214 180.79 290.354 180.328 290.634 179.936 cv
290.914 179.544 291.334 179.264 291.866 179.068 cv
f
209.861 294.229 mo
209.421 294.989 209.101 295.729 208.891 296.459 cv
208.671 297.189 208.571 297.929 208.571 298.679 cv
208.571 299.439 208.671 300.179 208.891 300.909 cv
209.101 301.649 209.421 302.379 209.861 303.129 cv
209.081 303.129 li
208.591 302.359 208.221 301.619 207.981 300.879 cv
207.741 300.139 207.621 299.409 207.621 298.679 cv
207.621 297.959 207.741 297.229 207.981 296.489 cv
208.221 295.749 208.581 294.999 209.081 294.229 cv
209.861 294.229 li
f
214.091 299.069 mo
213.361 299.069 212.861 299.159 212.581 299.319 cv
212.301 299.489 212.161 299.769 212.161 300.169 cv
212.161 300.489 212.261 300.749 212.471 300.929 cv
212.681 301.119 212.971 301.209 213.331 301.209 cv
213.831 301.209 214.231 301.039 214.531 300.679 cv
214.831 300.329 214.981 299.859 214.981 299.269 cv
214.981 299.069 li
214.091 299.069 li
215.881 298.699 mo
215.881 301.819 li
214.981 301.819 li
214.981 300.989 li
214.771 301.329 214.511 301.569 214.211 301.719 cv
213.911 301.869 213.531 301.949 213.091 301.949 cv
212.531 301.949 212.081 301.799 211.751 301.489 cv
211.421 301.179 211.261 300.759 211.261 300.229 cv
211.261 299.619 211.461 299.159 211.881 298.839 cv
212.291 298.529 212.901 298.369 213.721 298.369 cv
214.981 298.369 li
214.981 298.279 li
214.981 297.869 214.841 297.549 214.571 297.319 cv
214.301 297.099 213.921 296.979 213.431 296.979 cv
213.111 296.979 212.811 297.019 212.511 297.099 cv
212.211 297.179 211.931 297.289 211.661 297.429 cv
211.661 296.599 li
211.981 296.479 212.301 296.379 212.611 296.319 cv
212.921 296.259 213.221 296.219 213.521 296.219 cv
214.311 296.219 214.901 296.429 215.291 296.839 cv
215.681 297.249 215.881 297.869 215.881 298.699 cv
f
217.591 294.229 mo
218.371 294.229 li
218.851 294.999 219.221 295.749 219.461 296.489 cv
219.701 297.229 219.831 297.959 219.831 298.679 cv
219.831 299.409 219.701 300.139 219.461 300.879 cv
219.221 301.619 218.851 302.359 218.371 303.129 cv
217.591 303.129 li
218.021 302.379 218.341 301.649 218.561 300.909 cv
218.771 300.179 218.881 299.439 218.881 298.679 cv
218.881 297.929 218.771 297.189 218.561 296.459 cv
218.341 295.729 218.021 294.989 217.591 294.229 cv
f
125.959 7.24261 mo
122.459 7.24261 li
f
125.959 7.24261 mo
122.459 7.24261 li
@
22.4638 8.71289 mo
21.4418 8.71289 20.7418 8.8389 20.3498 9.0629 cv
19.9578 9.3009 19.7618 9.6929 19.7618 10.2529 cv
19.7618 10.7009 19.9018 11.0649 20.1958 11.3169 cv
20.4898 11.5829 20.8958 11.7089 21.3998 11.7089 cv
22.0998 11.7089 22.6598 11.4709 23.0798 10.9669 cv
23.4998 10.4769 23.7098 9.81891 23.7098 8.99292 cv
23.7098 8.71289 li
22.4638 8.71289 li
24.9698 8.19492 mo
24.9698 12.5629 li
23.7098 12.5629 li
23.7098 11.4009 li
23.4158 11.8769 23.0518 12.2129 22.6318 12.4229 cv
22.2118 12.6329 21.6798 12.7449 21.0638 12.7449 cv
20.2798 12.7449 19.6498 12.5349 19.1878 12.1009 cv
18.7258 11.6669 18.5018 11.0789 18.5018 10.3369 cv
18.5018 9.48291 18.7818 8.8389 19.3698 8.3909 cv
19.9438 7.95691 20.7978 7.73291 21.9458 7.73291 cv
23.7098 7.73291 li
23.7098 7.6069 li
23.7098 7.0329 23.5138 6.5849 23.1358 6.26291 cv
22.7578 5.9549 22.2258 5.7869 21.5398 5.7869 cv
21.0918 5.7869 20.6718 5.8429 20.2518 5.9549 cv
19.8318 6.06689 19.4398 6.22092 19.0618 6.4169 cv
19.0618 5.25491 li
19.5098 5.08691 19.9578 4.9469 20.3918 4.86292 cv
20.8258 4.7789 21.2458 4.7229 21.6658 4.7229 cv
22.7718 4.7229 23.5978 5.01691 24.1438 5.59091 cv
24.6898 6.16492 24.9698 7.0329 24.9698 8.19492 cv
f
28.7778 11.4149 mo
28.7778 15.4609 li
27.5178 15.4609 li
27.5178 4.90491 li
28.7778 4.90491 li
28.7778 6.06689 li
29.0298 5.6189 29.3658 5.2829 29.7718 5.0589 cv
30.1778 4.8349 30.6678 4.7229 31.2278 4.7229 cv
32.1518 4.7229 32.9078 5.10089 33.4958 5.82892 cv
34.0698 6.57089 34.3638 7.5369 34.3638 8.74091 cv
34.3638 9.94492 34.0698 10.9249 33.4958 11.6529 cv
32.9078 12.3809 32.1518 12.7449 31.2278 12.7449 cv
30.6678 12.7449 30.1778 12.6329 29.7718 12.4229 cv
29.3658 12.2129 29.0298 11.8769 28.7778 11.4149 cv
33.0618 8.74091 mo
33.0618 7.81689 32.8658 7.10291 32.4878 6.57089 cv
32.0958 6.03891 31.5778 5.77292 30.9198 5.77292 cv
30.2478 5.77292 29.7298 6.03891 29.3518 6.57089 cv
28.9598 7.10291 28.7778 7.81689 28.7778 8.74091 cv
28.7778 9.66492 28.9598 10.3929 29.3518 10.9249 cv
29.7298 11.4569 30.2478 11.7089 30.9198 11.7089 cv
31.5778 11.7089 32.0958 11.4569 32.4878 10.9249 cv
32.8658 10.3929 33.0618 9.66492 33.0618 8.74091 cv
f
36.4498 4.90491 mo
37.7098 4.90491 li
37.7098 12.5629 li
36.4498 12.5629 li
36.4498 4.90491 li
36.4498 1.92291 mo
37.7098 1.92291 li
37.7098 3.51889 li
36.4498 3.51889 li
36.4498 1.92291 li
f
40.5238 10.8269 mo
41.9658 10.8269 li
41.9658 12.5629 li
40.5238 12.5629 li
40.5238 10.8269 li
f
50.2958 8.74091 mo
50.2958 7.81689 50.0998 7.10291 49.7218 6.57089 cv
49.3298 6.03891 48.8118 5.77292 48.1538 5.77292 cv
47.4818 5.77292 46.9638 6.03891 46.5858 6.57089 cv
46.1938 7.10291 46.0118 7.81689 46.0118 8.74091 cv
46.0118 9.66492 46.1938 10.3929 46.5858 10.9249 cv
46.9638 11.4569 47.4818 11.7089 48.1538 11.7089 cv
48.8118 11.7089 49.3298 11.4569 49.7218 10.9249 cv
50.0998 10.3929 50.2958 9.66492 50.2958 8.74091 cv
46.0118 6.06689 mo
46.2638 5.6189 46.5998 5.2829 47.0058 5.0589 cv
47.4118 4.8349 47.9018 4.7229 48.4618 4.7229 cv
49.3858 4.7229 50.1418 5.10089 50.7298 5.82892 cv
51.3038 6.57089 51.5978 7.5369 51.5978 8.74091 cv
51.5978 9.94492 51.3038 10.9249 50.7298 11.6529 cv
50.1418 12.3809 49.3858 12.7449 48.4618 12.7449 cv
47.9018 12.7449 47.4118 12.6329 47.0058 12.4229 cv
46.5998 12.2129 46.2638 11.8769 46.0118 11.4149 cv
46.0118 12.5629 li
44.7518 12.5629 li
44.7518 1.92291 li
46.0118 1.92291 li
46.0118 6.06689 li
f
53.6838 4.90491 mo
54.9438 4.90491 li
54.9438 12.5629 li
53.6838 12.5629 li
53.6838 4.90491 li
53.6838 1.92291 mo
54.9438 1.92291 li
54.9438 3.51889 li
53.6838 3.51889 li
53.6838 1.92291 li
f
57.5758 1.92291 mo
58.8358 1.92291 li
58.8358 12.5629 li
57.5758 12.5629 li
57.5758 1.92291 li
f
61.4678 4.90491 mo
62.7278 4.90491 li
62.7278 12.5629 li
61.4678 12.5629 li
61.4678 4.90491 li
61.4678 1.92291 mo
62.7278 1.92291 li
62.7278 3.51889 li
61.4678 3.51889 li
61.4678 1.92291 li
f
70.8618 8.74091 mo
70.8618 7.81689 70.6658 7.10291 70.2878 6.57089 cv
69.8958 6.03891 69.3778 5.77292 68.7198 5.77292 cv
68.0478 5.77292 67.5298 6.03891 67.1518 6.57089 cv
66.7598 7.10291 66.5778 7.81689 66.5778 8.74091 cv
66.5778 9.66492 66.7598 10.3929 67.1518 10.9249 cv
67.5298 11.4569 68.0478 11.7089 68.7198 11.7089 cv
69.3778 11.7089 69.8958 11.4569 70.2878 10.9249 cv
70.6658 10.3929 70.8618 9.66492 70.8618 8.74091 cv
66.5778 6.06689 mo
66.8298 5.6189 67.1658 5.2829 67.5718 5.0589 cv
67.9778 4.8349 68.4678 4.7229 69.0278 4.7229 cv
69.9518 4.7229 70.7078 5.10089 71.2958 5.82892 cv
71.8698 6.57089 72.1638 7.5369 72.1638 8.74091 cv
72.1638 9.94492 71.8698 10.9249 71.2958 11.6529 cv
70.7078 12.3809 69.9518 12.7449 69.0278 12.7449 cv
68.4678 12.7449 67.9778 12.6329 67.5718 12.4229 cv
67.1658 12.2129 66.8298 11.8769 66.5778 11.4149 cv
66.5778 12.5629 li
65.3178 12.5629 li
65.3178 1.92291 li
66.5778 1.92291 li
66.5778 6.06689 li
f
74.2498 4.90491 mo
75.5098 4.90491 li
75.5098 12.5629 li
74.2498 12.5629 li
74.2498 4.90491 li
74.2498 1.92291 mo
75.5098 1.92291 li
75.5098 3.51889 li
74.2498 3.51889 li
74.2498 1.92291 li
f
78.1418 1.92291 mo
79.4018 1.92291 li
79.4018 12.5629 li
78.1418 12.5629 li
78.1418 1.92291 li
f
82.0338 4.90491 mo
83.2938 4.90491 li
83.2938 12.5629 li
82.0338 12.5629 li
82.0338 4.90491 li
82.0338 1.92291 mo
83.2938 1.92291 li
83.2938 3.51889 li
82.0338 3.51889 li
82.0338 1.92291 li
f
86.1078 10.8269 mo
87.5498 10.8269 li
87.5498 12.5629 li
86.1078 12.5629 li
86.1078 10.8269 li
f
95.8938 5.19891 mo
95.8938 6.37491 li
95.5298 6.17889 95.1798 6.03891 94.8158 5.94092 cv
94.4518 5.8429 94.1018 5.7869 93.7378 5.7869 cv
92.9258 5.7869 92.2818 6.05292 91.8338 6.57089 cv
91.3858 7.0889 91.1618 7.81689 91.1618 8.74091 cv
91.1618 9.67889 91.3858 10.4069 91.8338 10.9249 cv
92.2818 11.4429 92.9258 11.6949 93.7378 11.6949 cv
94.1018 11.6949 94.4518 11.6529 94.8158 11.5549 cv
95.1798 11.4569 95.5298 11.3029 95.8938 11.1069 cv
95.8938 12.2689 li
95.5298 12.4369 95.1658 12.5629 94.8018 12.6329 cv
94.4238 12.7029 94.0178 12.7449 93.5978 12.7449 cv
92.4498 12.7449 91.5258 12.3949 90.8538 11.6669 cv
90.1678 10.9529 89.8318 9.9729 89.8318 8.74091 cv
89.8318 7.4949 90.1678 6.51489 90.8538 5.8009 cv
91.5398 5.08691 92.4778 4.7229 93.6818 4.7229 cv
94.0738 4.7229 94.4518 4.76489 94.8158 4.84891 cv
95.1798 4.93289 95.5438 5.04489 95.8938 5.19891 cv
f
101.046 5.7869 mo
100.374 5.7869 99.8418 6.05292 99.4498 6.5849 cv
99.0578 7.11691 98.8618 7.8309 98.8618 8.74091 cv
98.8618 9.66492 99.0438 10.3789 99.4358 10.9109 cv
99.8278 11.4429 100.36 11.6949 101.046 11.6949 cv
101.718 11.6949 102.25 11.4429 102.642 10.9109 cv
103.034 10.3789 103.23 9.66492 103.23 8.74091 cv
103.23 7.84491 103.034 7.11691 102.642 6.5849 cv
102.25 6.05292 101.718 5.7869 101.046 5.7869 cv
101.046 4.7229 mo
102.138 4.7229 102.992 5.08691 103.622 5.7869 cv
104.238 6.50092 104.56 7.4809 104.56 8.74091 cv
104.56 10.0009 104.238 10.9809 103.622 11.6809 cv
102.992 12.3949 102.138 12.7449 101.046 12.7449 cv
99.9398 12.7449 99.0718 12.3949 98.4558 11.6809 cv
97.8398 10.9809 97.5318 10.0009 97.5318 8.74091 cv
97.5318 7.4809 97.8398 6.50092 98.4558 5.7869 cv
99.0718 5.08691 99.9398 4.7229 101.046 4.7229 cv
f
112.61 6.37491 mo
112.918 5.81491 113.296 5.40891 113.73 5.12891 cv
114.164 4.86292 114.682 4.7229 115.284 4.7229 cv
116.068 4.7229 116.684 5.0029 117.118 5.5629 cv
117.552 6.12289 117.776 6.9209 117.776 7.9429 cv
117.776 12.5629 li
116.516 12.5629 li
116.516 7.98489 li
116.516 7.2569 116.376 6.71091 116.124 6.34689 cv
115.858 5.99692 115.466 5.81491 114.934 5.81491 cv
114.276 5.81491 113.758 6.03891 113.38 6.4729 cv
113.002 6.90689 112.82 7.4949 112.82 8.23691 cv
112.82 12.5629 li
111.56 12.5629 li
111.56 7.98489 li
111.56 7.2569 111.42 6.71091 111.168 6.34689 cv
110.902 5.99692 110.496 5.81491 109.964 5.81491 cv
109.32 5.81491 108.802 6.03891 108.424 6.4729 cv
108.046 6.90689 107.864 7.4949 107.864 8.23691 cv
107.864 12.5629 li
106.604 12.5629 li
106.604 4.90491 li
107.864 4.90491 li
107.864 6.09491 li
108.144 5.6329 108.494 5.2829 108.9 5.0589 cv
109.292 4.8349 109.768 4.7229 110.328 4.7229 cv
110.888 4.7229 111.35 4.86292 111.742 5.14291 cv
112.134 5.42291 112.414 5.8429 112.61 6.37491 cv
f
125.959 21.6501 mo
122.459 21.6501 li
f
125.959 21.6501 mo
122.459 21.6501 li
@
35.5106 23.1204 mo
34.4886 23.1204 33.7886 23.2464 33.3966 23.4704 cv
33.0046 23.7084 32.8086 24.1004 32.8086 24.6604 cv
32.8086 25.1084 32.9486 25.4724 33.2426 25.7244 cv
33.5366 25.9904 33.9426 26.1164 34.4466 26.1164 cv
35.1466 26.1164 35.7066 25.8784 36.1266 25.3744 cv
36.5466 24.8844 36.7566 24.2264 36.7566 23.4004 cv
36.7566 23.1204 li
35.5106 23.1204 li
38.0166 22.6024 mo
38.0166 26.9704 li
36.7566 26.9704 li
36.7566 25.8084 li
36.4626 26.2844 36.0986 26.6204 35.6786 26.8304 cv
35.2586 27.0404 34.7266 27.1524 34.1106 27.1524 cv
33.3266 27.1524 32.6966 26.9424 32.2346 26.5084 cv
31.7726 26.0744 31.5486 25.4864 31.5486 24.7444 cv
31.5486 23.8904 31.8286 23.2464 32.4166 22.7984 cv
32.9906 22.3644 33.8446 22.1404 34.9926 22.1404 cv
36.7566 22.1404 li
36.7566 22.0144 li
36.7566 21.4404 36.5606 20.9924 36.1826 20.6704 cv
35.8046 20.3624 35.2726 20.1944 34.5866 20.1944 cv
34.1386 20.1944 33.7186 20.2504 33.2986 20.3624 cv
32.8786 20.4744 32.4866 20.6284 32.1086 20.8244 cv
32.1086 19.6624 li
32.5566 19.4944 33.0046 19.3544 33.4386 19.2704 cv
33.8726 19.1864 34.2926 19.1304 34.7126 19.1304 cv
35.8186 19.1304 36.6446 19.4244 37.1906 19.9984 cv
37.7366 20.5724 38.0166 21.4404 38.0166 22.6024 cv
f
41.8246 25.8224 mo
41.8246 29.8684 li
40.5646 29.8684 li
40.5646 19.3124 li
41.8246 19.3124 li
41.8246 20.4744 li
42.0766 20.0264 42.4126 19.6904 42.8186 19.4664 cv
43.2246 19.2424 43.7146 19.1304 44.2746 19.1304 cv
45.1986 19.1304 45.9546 19.5084 46.5426 20.2364 cv
47.1166 20.9784 47.4106 21.9444 47.4106 23.1484 cv
47.4106 24.3524 47.1166 25.3324 46.5426 26.0604 cv
45.9546 26.7884 45.1986 27.1524 44.2746 27.1524 cv
43.7146 27.1524 43.2246 27.0404 42.8186 26.8304 cv
42.4126 26.6204 42.0766 26.2844 41.8246 25.8224 cv
46.1086 23.1484 mo
46.1086 22.2244 45.9126 21.5104 45.5346 20.9784 cv
45.1426 20.4464 44.6246 20.1804 43.9666 20.1804 cv
43.2946 20.1804 42.7766 20.4464 42.3986 20.9784 cv
42.0066 21.5104 41.8246 22.2244 41.8246 23.1484 cv
41.8246 24.0724 42.0066 24.8004 42.3986 25.3324 cv
42.7766 25.8644 43.2946 26.1164 43.9666 26.1164 cv
44.6246 26.1164 45.1426 25.8644 45.5346 25.3324 cv
45.9126 24.8004 46.1086 24.0724 46.1086 23.1484 cv
f
49.4966 19.3124 mo
50.7566 19.3124 li
50.7566 26.9704 li
49.4966 26.9704 li
49.4966 19.3124 li
49.4966 16.3304 mo
50.7566 16.3304 li
50.7566 17.9264 li
49.4966 17.9264 li
49.4966 16.3304 li
f
53.5706 25.2344 mo
55.0126 25.2344 li
55.0126 26.9704 li
53.5706 26.9704 li
53.5706 25.2344 li
f
57.1126 19.3124 mo
58.3726 19.3124 li
59.9406 25.2904 li
61.5086 19.3124 li
62.9926 19.3124 li
64.5606 25.2904 li
66.1286 19.3124 li
67.3886 19.3124 li
65.3866 26.9704 li
63.9026 26.9704 li
62.2506 20.6984 li
60.5986 26.9704 li
59.1146 26.9704 li
57.1126 19.3124 li
f
75.8446 22.8264 mo
75.8446 23.4424 li
70.0626 23.4424 li
70.1186 24.3104 70.3706 24.9824 70.8466 25.4304 cv
71.3086 25.8784 71.9526 26.1024 72.7926 26.1024 cv
73.2686 26.1024 73.7446 26.0464 74.1926 25.9344 cv
74.6406 25.8224 75.1026 25.6404 75.5506 25.3884 cv
75.5506 26.5784 li
75.1026 26.7744 74.6406 26.9284 74.1646 27.0124 cv
73.6886 27.0964 73.1986 27.1524 72.7226 27.1524 cv
71.4906 27.1524 70.5246 26.8024 69.8106 26.1024 cv
69.0966 25.4024 68.7466 24.4364 68.7466 23.2184 cv
68.7466 21.9724 69.0826 20.9784 69.7546 20.2364 cv
70.4266 19.5084 71.3506 19.1304 72.4986 19.1304 cv
73.5346 19.1304 74.3466 19.4664 74.9486 20.1244 cv
75.5366 20.7964 75.8446 21.6924 75.8446 22.8264 cv
74.5846 22.4624 mo
74.5706 21.7764 74.3746 21.2304 74.0106 20.8104 cv
73.6326 20.4044 73.1286 20.1944 72.5126 20.1944 cv
71.8126 20.1944 71.2526 20.4044 70.8326 20.7964 cv
70.4126 21.1884 70.1606 21.7484 70.1046 22.4624 cv
74.5846 22.4624 li
f
77.9026 19.3124 mo
79.1626 19.3124 li
79.1626 26.9704 li
77.9026 26.9704 li
77.9026 19.3124 li
77.9026 16.3304 mo
79.1626 16.3304 li
79.1626 17.9264 li
77.9026 17.9264 li
77.9026 16.3304 li
f
87.2966 23.1484 mo
87.2966 22.2244 87.1006 21.5104 86.7226 20.9784 cv
86.3306 20.4464 85.8126 20.1804 85.1546 20.1804 cv
84.4826 20.1804 83.9646 20.4464 83.5866 20.9784 cv
83.1946 21.5104 83.0126 22.2244 83.0126 23.1484 cv
83.0126 24.0724 83.1946 24.8004 83.5866 25.3324 cv
83.9646 25.8644 84.4826 26.1164 85.1546 26.1164 cv
85.8126 26.1164 86.3306 25.8644 86.7226 25.3324 cv
87.1006 24.8004 87.2966 24.0724 87.2966 23.1484 cv
83.0126 20.4744 mo
83.2646 20.0264 83.6006 19.6904 84.0066 19.4664 cv
84.4126 19.2424 84.9026 19.1304 85.4626 19.1304 cv
86.3866 19.1304 87.1426 19.5084 87.7306 20.2364 cv
88.3046 20.9784 88.5986 21.9444 88.5986 23.1484 cv
88.5986 24.3524 88.3046 25.3324 87.7306 26.0604 cv
87.1426 26.7884 86.3866 27.1524 85.4626 27.1524 cv
84.9026 27.1524 84.4126 27.0404 84.0066 26.8304 cv
83.6006 26.6204 83.2646 26.2844 83.0126 25.8224 cv
83.0126 26.9704 li
81.7526 26.9704 li
81.7526 16.3304 li
83.0126 16.3304 li
83.0126 20.4744 li
f
93.6526 20.1944 mo
92.9806 20.1944 92.4486 20.4604 92.0566 20.9924 cv
91.6646 21.5244 91.4686 22.2384 91.4686 23.1484 cv
91.4686 24.0724 91.6506 24.7864 92.0426 25.3184 cv
92.4346 25.8504 92.9666 26.1024 93.6526 26.1024 cv
94.3246 26.1024 94.8566 25.8504 95.2486 25.3184 cv
95.6406 24.7864 95.8366 24.0724 95.8366 23.1484 cv
95.8366 22.2524 95.6406 21.5244 95.2486 20.9924 cv
94.8566 20.4604 94.3246 20.1944 93.6526 20.1944 cv
93.6526 19.1304 mo
94.7446 19.1304 95.5986 19.4944 96.2286 20.1944 cv
96.8446 20.9084 97.1666 21.8884 97.1666 23.1484 cv
97.1666 24.4084 96.8446 25.3884 96.2286 26.0884 cv
95.5986 26.8024 94.7446 27.1524 93.6526 27.1524 cv
92.5466 27.1524 91.6786 26.8024 91.0626 26.0884 cv
90.4466 25.3884 90.1386 24.4084 90.1386 23.1484 cv
90.1386 21.8884 90.4466 20.9084 91.0626 20.1944 cv
91.6786 19.4944 92.5466 19.1304 93.6526 19.1304 cv
f
99.4346 25.2344 mo
100.877 25.2344 li
100.877 26.9704 li
99.4346 26.9704 li
99.4346 25.2344 li
f
109.221 19.6064 mo
109.221 20.7824 li
108.857 20.5864 108.507 20.4464 108.143 20.3484 cv
107.779 20.2504 107.429 20.1944 107.065 20.1944 cv
106.253 20.1944 105.609 20.4604 105.161 20.9784 cv
104.713 21.4964 104.489 22.2244 104.489 23.1484 cv
104.489 24.0864 104.713 24.8144 105.161 25.3324 cv
105.609 25.8504 106.253 26.1024 107.065 26.1024 cv
107.429 26.1024 107.779 26.0604 108.143 25.9624 cv
108.507 25.8644 108.857 25.7104 109.221 25.5144 cv
109.221 26.6764 li
108.857 26.8444 108.493 26.9704 108.129 27.0404 cv
107.751 27.1104 107.345 27.1524 106.925 27.1524 cv
105.777 27.1524 104.853 26.8024 104.181 26.0744 cv
103.495 25.3604 103.159 24.3804 103.159 23.1484 cv
103.159 21.9024 103.495 20.9224 104.181 20.2084 cv
104.867 19.4944 105.805 19.1304 107.009 19.1304 cv
107.401 19.1304 107.779 19.1724 108.143 19.2564 cv
108.507 19.3404 108.871 19.4524 109.221 19.6064 cv
f
117.775 22.3504 mo
117.775 26.9704 li
116.515 26.9704 li
116.515 22.3924 li
116.515 21.6644 116.361 21.1324 116.081 20.7684 cv
115.801 20.4044 115.381 20.2224 114.821 20.2224 cv
114.135 20.2224 113.603 20.4464 113.211 20.8804 cv
112.819 21.3144 112.623 21.9024 112.623 22.6444 cv
112.623 26.9704 li
111.363 26.9704 li
111.363 19.3124 li
112.623 19.3124 li
112.623 20.5024 li
112.917 20.0544 113.267 19.7044 113.687 19.4804 cv
114.093 19.2564 114.569 19.1304 115.101 19.1304 cv
115.969 19.1304 116.641 19.4104 117.089 19.9564 cv
117.537 20.5024 117.775 21.3004 117.775 22.3504 cv
f
125.959 36.0576 mo
122.459 36.0576 li
f
125.959 36.0576 mo
122.459 36.0576 li
@
39.8531 34.0139 mo
39.8531 35.1899 li
39.4891 34.9939 39.1391 34.8539 38.7751 34.7559 cv
38.4111 34.6579 38.0611 34.6019 37.6971 34.6019 cv
36.8851 34.6019 36.2411 34.8679 35.7931 35.3859 cv
35.3451 35.9039 35.1211 36.6319 35.1211 37.5559 cv
35.1211 38.4939 35.3451 39.2219 35.7931 39.7399 cv
36.2411 40.2579 36.8851 40.5099 37.6971 40.5099 cv
38.0611 40.5099 38.4111 40.4679 38.7751 40.3699 cv
39.1391 40.2719 39.4891 40.1179 39.8531 39.9219 cv
39.8531 41.0839 li
39.4891 41.2519 39.1251 41.3779 38.7611 41.4479 cv
38.3831 41.5179 37.9771 41.5599 37.5571 41.5599 cv
36.4091 41.5599 35.4851 41.2099 34.8131 40.4819 cv
34.1271 39.7679 33.7911 38.7879 33.7911 37.5559 cv
33.7911 36.3099 34.1271 35.3299 34.8131 34.6159 cv
35.4991 33.9019 36.4371 33.5379 37.6411 33.5379 cv
38.0331 33.5379 38.4111 33.5799 38.7751 33.6639 cv
39.1391 33.7479 39.5031 33.8599 39.8531 34.0139 cv
f
48.4071 36.7579 mo
48.4071 41.3779 li
47.1471 41.3779 li
47.1471 36.7999 li
47.1471 36.0719 46.9931 35.5399 46.7131 35.1759 cv
46.4331 34.8119 46.0131 34.6299 45.4531 34.6299 cv
44.7671 34.6299 44.2351 34.8539 43.8431 35.2879 cv
43.4511 35.7219 43.2551 36.3099 43.2551 37.0519 cv
43.2551 41.3779 li
41.9951 41.3779 li
41.9951 33.7199 li
43.2551 33.7199 li
43.2551 34.9099 li
43.5491 34.4619 43.8991 34.1119 44.3191 33.8879 cv
44.7251 33.6639 45.2011 33.5379 45.7331 33.5379 cv
46.6011 33.5379 47.2731 33.8179 47.7211 34.3639 cv
48.1691 34.9099 48.4071 35.7079 48.4071 36.7579 cv
f
51.0951 39.6419 mo
52.5371 39.6419 li
52.5371 41.3779 li
51.0951 41.3779 li
51.0951 39.6419 li
f
60.8671 37.5559 mo
60.8671 36.6319 60.6711 35.9179 60.2931 35.3859 cv
59.9011 34.8539 59.3831 34.5879 58.7251 34.5879 cv
58.0531 34.5879 57.5351 34.8539 57.1571 35.3859 cv
56.7651 35.9179 56.5831 36.6319 56.5831 37.5559 cv
56.5831 38.4799 56.7651 39.2079 57.1571 39.7399 cv
57.5351 40.2719 58.0531 40.5239 58.7251 40.5239 cv
59.3831 40.5239 59.9011 40.2719 60.2931 39.7399 cv
60.6711 39.2079 60.8671 38.4799 60.8671 37.5559 cv
56.5831 34.8819 mo
56.8351 34.4339 57.1711 34.0979 57.5771 33.8739 cv
57.9831 33.6499 58.4731 33.5379 59.0331 33.5379 cv
59.9571 33.5379 60.7131 33.9159 61.3011 34.6439 cv
61.8751 35.3859 62.1691 36.3519 62.1691 37.5559 cv
62.1691 38.7599 61.8751 39.7399 61.3011 40.4679 cv
60.7131 41.1959 59.9571 41.5599 59.0331 41.5599 cv
58.4731 41.5599 57.9831 41.4479 57.5771 41.2379 cv
57.1711 41.0279 56.8351 40.6919 56.5831 40.2299 cv
56.5831 41.3779 li
55.3231 41.3779 li
55.3231 30.7379 li
56.5831 30.7379 li
56.5831 34.8819 li
f
64.2551 33.7199 mo
65.5151 33.7199 li
65.5151 41.3779 li
64.2551 41.3779 li
64.2551 33.7199 li
64.2551 30.7379 mo
65.5151 30.7379 li
65.5151 32.3339 li
64.2551 32.3339 li
64.2551 30.7379 li
f
74.5171 36.7579 mo
74.5171 41.3779 li
73.2571 41.3779 li
73.2571 36.7999 li
73.2571 36.0719 73.1031 35.5399 72.8231 35.1759 cv
72.5431 34.8119 72.1231 34.6299 71.5631 34.6299 cv
70.8771 34.6299 70.3451 34.8539 69.9531 35.2879 cv
69.5611 35.7219 69.3651 36.3099 69.3651 37.0519 cv
69.3651 41.3779 li
68.1051 41.3779 li
68.1051 33.7199 li
69.3651 33.7199 li
69.3651 34.9099 li
69.6591 34.4619 70.0091 34.1119 70.4291 33.8879 cv
70.8351 33.6639 71.3111 33.5379 71.8431 33.5379 cv
72.7111 33.5379 73.3831 33.8179 73.8311 34.3639 cv
74.2791 34.9099 74.5171 35.7079 74.5171 36.7579 cv
f
82.0631 37.4579 mo
82.0631 36.5619 81.8671 35.8479 81.5031 35.3439 cv
81.1251 34.8399 80.5931 34.5879 79.9211 34.5879 cv
79.2491 34.5879 78.7171 34.8399 78.3391 35.3439 cv
77.9611 35.8479 77.7791 36.5619 77.7791 37.4579 cv
77.7791 38.3679 77.9611 39.0679 78.3391 39.5719 cv
78.7171 40.0759 79.2491 40.3279 79.9211 40.3279 cv
80.5931 40.3279 81.1251 40.0759 81.5031 39.5719 cv
81.8671 39.0679 82.0631 38.3679 82.0631 37.4579 cv
83.3231 40.4259 mo
83.3231 41.7139 83.0291 42.6799 82.4551 43.3239 cv
81.8671 43.9539 80.9851 44.2759 79.7951 44.2759 cv
79.3471 44.2759 78.9411 44.2339 78.5491 44.1779 cv
78.1571 44.1079 77.7651 44.0099 77.4011 43.8699 cv
77.4011 42.6519 li
77.7651 42.8479 78.1291 42.9879 78.4931 43.0859 cv
78.8571 43.1839 79.2211 43.2399 79.5991 43.2399 cv
80.4111 43.2399 81.0271 43.0159 81.4471 42.5959 cv
81.8531 42.1619 82.0631 41.5179 82.0631 40.6499 cv
82.0631 40.0339 li
81.7971 40.4819 81.4611 40.8179 81.0551 41.0419 cv
80.6491 41.2659 80.1731 41.3779 79.6131 41.3779 cv
78.6611 41.3779 77.9051 41.0279 77.3311 40.3139 cv
76.7571 39.5999 76.4771 38.6479 76.4771 37.4579 cv
76.4771 36.2819 76.7571 35.3299 77.3311 34.6159 cv
77.9051 33.9019 78.6611 33.5379 79.6131 33.5379 cv
80.1731 33.5379 80.6491 33.6499 81.0551 33.8739 cv
81.4611 34.0979 81.7971 34.4339 82.0631 34.8819 cv
82.0631 33.7199 li
83.3231 33.7199 li
83.3231 40.4259 li
f
86.0951 39.6419 mo
87.5371 39.6419 li
87.5371 41.3779 li
86.0951 41.3779 li
86.0951 39.6419 li
f
95.8811 34.0139 mo
95.8811 35.1899 li
95.5171 34.9939 95.1671 34.8539 94.8031 34.7559 cv
94.4391 34.6579 94.0891 34.6019 93.7251 34.6019 cv
92.9131 34.6019 92.2691 34.8679 91.8211 35.3859 cv
91.3731 35.9039 91.1491 36.6319 91.1491 37.5559 cv
91.1491 38.4939 91.3731 39.2219 91.8211 39.7399 cv
92.2691 40.2579 92.9131 40.5099 93.7251 40.5099 cv
94.0891 40.5099 94.4391 40.4679 94.8031 40.3699 cv
95.1671 40.2719 95.5171 40.1179 95.8811 39.9219 cv
95.8811 41.0839 li
95.5171 41.2519 95.1531 41.3779 94.7891 41.4479 cv
94.4111 41.5179 94.0051 41.5599 93.5851 41.5599 cv
92.4371 41.5599 91.5131 41.2099 90.8411 40.4819 cv
90.1551 39.7679 89.8191 38.7879 89.8191 37.5559 cv
89.8191 36.3099 90.1551 35.3299 90.8411 34.6159 cv
91.5271 33.9019 92.4651 33.5379 93.6691 33.5379 cv
94.0611 33.5379 94.4391 33.5799 94.8031 33.6639 cv
95.1671 33.7479 95.5311 33.8599 95.8811 34.0139 cv
f
101.033 34.6019 mo
100.361 34.6019 99.8291 34.8679 99.4371 35.3999 cv
99.0451 35.9319 98.8491 36.6459 98.8491 37.5559 cv
98.8491 38.4799 99.0311 39.1939 99.4231 39.7259 cv
99.8151 40.2579 100.347 40.5099 101.033 40.5099 cv
101.705 40.5099 102.237 40.2579 102.629 39.7259 cv
103.021 39.1939 103.217 38.4799 103.217 37.5559 cv
103.217 36.6599 103.021 35.9319 102.629 35.3999 cv
102.237 34.8679 101.705 34.6019 101.033 34.6019 cv
101.033 33.5379 mo
102.125 33.5379 102.979 33.9019 103.609 34.6019 cv
104.225 35.3159 104.547 36.2959 104.547 37.5559 cv
104.547 38.8159 104.225 39.7959 103.609 40.4959 cv
102.979 41.2099 102.125 41.5599 101.033 41.5599 cv
99.9271 41.5599 99.0591 41.2099 98.4431 40.4959 cv
97.8271 39.7959 97.5191 38.8159 97.5191 37.5559 cv
97.5191 36.2959 97.8271 35.3159 98.4431 34.6019 cv
99.0591 33.9019 99.9271 33.5379 101.033 33.5379 cv
f
112.597 35.1899 mo
112.905 34.6299 113.283 34.2239 113.717 33.9439 cv
114.151 33.6779 114.669 33.5379 115.271 33.5379 cv
116.055 33.5379 116.671 33.8179 117.105 34.3779 cv
117.539 34.9379 117.763 35.7359 117.763 36.7579 cv
117.763 41.3779 li
116.503 41.3779 li
116.503 36.7999 li
116.503 36.0719 116.363 35.5259 116.111 35.1619 cv
115.845 34.8119 115.453 34.6299 114.921 34.6299 cv
114.263 34.6299 113.745 34.8539 113.367 35.2879 cv
112.989 35.7219 112.807 36.3099 112.807 37.0519 cv
112.807 41.3779 li
111.547 41.3779 li
111.547 36.7999 li
111.547 36.0719 111.407 35.5259 111.155 35.1619 cv
110.889 34.8119 110.483 34.6299 109.951 34.6299 cv
109.307 34.6299 108.789 34.8539 108.411 35.2879 cv
108.033 35.7219 107.851 36.3099 107.851 37.0519 cv
107.851 41.3779 li
106.591 41.3779 li
106.591 33.7199 li
107.851 33.7199 li
107.851 34.9099 li
108.131 34.4479 108.481 34.0979 108.887 33.8739 cv
109.279 33.6499 109.755 33.5379 110.315 33.5379 cv
110.875 33.5379 111.337 33.6779 111.729 33.9579 cv
112.121 34.2379 112.401 34.6579 112.597 35.1899 cv
f
125.959 50.465 mo
122.459 50.465 li
f
125.959 50.465 mo
122.459 50.465 li
@
26.1915 51.1654 mo
26.1915 55.7854 li
24.9315 55.7854 li
24.9315 51.2074 li
24.9315 50.4794 24.7775 49.9474 24.4975 49.5834 cv
24.2175 49.2194 23.7975 49.0374 23.2375 49.0374 cv
22.5515 49.0374 22.0195 49.2614 21.6275 49.6954 cv
21.2355 50.1294 21.0395 50.7174 21.0395 51.4594 cv
21.0395 55.7854 li
19.7795 55.7854 li
19.7795 45.1454 li
21.0395 45.1454 li
21.0395 49.3174 li
21.3335 48.8694 21.6835 48.5194 22.1035 48.2954 cv
22.5095 48.0714 22.9855 47.9454 23.5175 47.9454 cv
24.3855 47.9454 25.0575 48.2254 25.5055 48.7714 cv
25.9535 49.3174 26.1915 50.1154 26.1915 51.1654 cv
f
34.6615 49.5974 mo
34.9695 49.0374 35.3475 48.6314 35.7815 48.3514 cv
36.2155 48.0854 36.7335 47.9454 37.3355 47.9454 cv
38.1195 47.9454 38.7355 48.2254 39.1695 48.7854 cv
39.6035 49.3454 39.8275 50.1434 39.8275 51.1654 cv
39.8275 55.7854 li
38.5675 55.7854 li
38.5675 51.2074 li
38.5675 50.4794 38.4275 49.9334 38.1755 49.5694 cv
37.9095 49.2194 37.5175 49.0374 36.9855 49.0374 cv
36.3275 49.0374 35.8095 49.2614 35.4315 49.6954 cv
35.0535 50.1294 34.8715 50.7174 34.8715 51.4594 cv
34.8715 55.7854 li
33.6115 55.7854 li
33.6115 51.2074 li
33.6115 50.4794 33.4715 49.9334 33.2195 49.5694 cv
32.9535 49.2194 32.5475 49.0374 32.0155 49.0374 cv
31.3715 49.0374 30.8535 49.2614 30.4755 49.6954 cv
30.0975 50.1294 29.9155 50.7174 29.9155 51.4594 cv
29.9155 55.7854 li
28.6555 55.7854 li
28.6555 48.1274 li
29.9155 48.1274 li
29.9155 49.3174 li
30.1955 48.8554 30.5455 48.5054 30.9515 48.2814 cv
31.3435 48.0574 31.8195 47.9454 32.3795 47.9454 cv
32.9395 47.9454 33.4015 48.0854 33.7935 48.3654 cv
34.1855 48.6454 34.4655 49.0654 34.6615 49.5974 cv
f
42.5155 54.0494 mo
43.9575 54.0494 li
43.9575 55.7854 li
42.5155 55.7854 li
42.5155 54.0494 li
f
52.2875 51.9634 mo
52.2875 51.0394 52.0915 50.3254 51.7135 49.7934 cv
51.3215 49.2614 50.8035 48.9954 50.1455 48.9954 cv
49.4735 48.9954 48.9555 49.2614 48.5775 49.7934 cv
48.1855 50.3254 48.0035 51.0394 48.0035 51.9634 cv
48.0035 52.8874 48.1855 53.6154 48.5775 54.1474 cv
48.9555 54.6794 49.4735 54.9314 50.1455 54.9314 cv
50.8035 54.9314 51.3215 54.6794 51.7135 54.1474 cv
52.0915 53.6154 52.2875 52.8874 52.2875 51.9634 cv
48.0035 49.2894 mo
48.2555 48.8414 48.5915 48.5054 48.9975 48.2814 cv
49.4035 48.0574 49.8935 47.9454 50.4535 47.9454 cv
51.3775 47.9454 52.1335 48.3234 52.7215 49.0514 cv
53.2955 49.7934 53.5895 50.7594 53.5895 51.9634 cv
53.5895 53.1674 53.2955 54.1474 52.7215 54.8754 cv
52.1335 55.6034 51.3775 55.9674 50.4535 55.9674 cv
49.8935 55.9674 49.4035 55.8554 48.9975 55.6454 cv
48.5915 55.4354 48.2555 55.0994 48.0035 54.6374 cv
48.0035 55.7854 li
46.7435 55.7854 li
46.7435 45.1454 li
48.0035 45.1454 li
48.0035 49.2894 li
f
59.1615 51.9354 mo
58.1395 51.9354 57.4395 52.0614 57.0475 52.2854 cv
56.6555 52.5234 56.4595 52.9154 56.4595 53.4754 cv
56.4595 53.9234 56.5995 54.2874 56.8935 54.5394 cv
57.1875 54.8054 57.5935 54.9314 58.0975 54.9314 cv
58.7975 54.9314 59.3575 54.6934 59.7775 54.1894 cv
60.1975 53.6994 60.4075 53.0414 60.4075 52.2154 cv
60.4075 51.9354 li
59.1615 51.9354 li
61.6675 51.4174 mo
61.6675 55.7854 li
60.4075 55.7854 li
60.4075 54.6234 li
60.1135 55.0994 59.7495 55.4354 59.3295 55.6454 cv
58.9095 55.8554 58.3775 55.9674 57.7615 55.9674 cv
56.9775 55.9674 56.3475 55.7574 55.8855 55.3234 cv
55.4235 54.8894 55.1995 54.3014 55.1995 53.5594 cv
55.1995 52.7054 55.4795 52.0614 56.0675 51.6134 cv
56.6415 51.1794 57.4955 50.9554 58.6435 50.9554 cv
60.4075 50.9554 li
60.4075 50.8294 li
60.4075 50.2554 60.2115 49.8074 59.8335 49.4854 cv
59.4555 49.1774 58.9235 49.0094 58.2375 49.0094 cv
57.7895 49.0094 57.3695 49.0654 56.9495 49.1774 cv
56.5295 49.2894 56.1375 49.4434 55.7595 49.6394 cv
55.7595 48.4774 li
56.2075 48.3094 56.6555 48.1694 57.0895 48.0854 cv
57.5235 48.0014 57.9435 47.9454 58.3635 47.9454 cv
59.4695 47.9454 60.2955 48.2394 60.8415 48.8134 cv
61.3875 49.3874 61.6675 50.2554 61.6675 51.4174 cv
f
64.2575 48.1274 mo
65.5175 48.1274 li
65.5175 55.7854 li
64.2575 55.7854 li
64.2575 48.1274 li
64.2575 45.1454 mo
65.5175 45.1454 li
65.5175 46.7414 li
64.2575 46.7414 li
64.2575 45.1454 li
f
73.1895 49.2894 mo
73.1895 45.1454 li
74.4495 45.1454 li
74.4495 55.7854 li
73.1895 55.7854 li
73.1895 54.6374 li
72.9235 55.0994 72.5875 55.4354 72.1815 55.6454 cv
71.7755 55.8554 71.2995 55.9674 70.7395 55.9674 cv
69.8155 55.9674 69.0595 55.6034 68.4715 54.8754 cv
67.8835 54.1474 67.6035 53.1674 67.6035 51.9634 cv
67.6035 50.7594 67.8835 49.7934 68.4715 49.0514 cv
69.0595 48.3234 69.8155 47.9454 70.7395 47.9454 cv
71.2995 47.9454 71.7755 48.0574 72.1815 48.2814 cv
72.5875 48.5054 72.9235 48.8414 73.1895 49.2894 cv
68.9055 51.9634 mo
68.9055 52.8874 69.0875 53.6154 69.4655 54.1474 cv
69.8435 54.6794 70.3755 54.9314 71.0475 54.9314 cv
71.7055 54.9314 72.2235 54.6794 72.6155 54.1474 cv
72.9935 53.6154 73.1895 52.8874 73.1895 51.9634 cv
73.1895 51.0394 72.9935 50.3254 72.6155 49.7934 cv
72.2235 49.2614 71.7055 48.9954 71.0475 48.9954 cv
70.3755 48.9954 69.8435 49.2614 69.4655 49.7934 cv
69.0875 50.3254 68.9055 51.0394 68.9055 51.9634 cv
f
76.9135 52.7614 mo
76.9135 48.1274 li
78.1735 48.1274 li
78.1735 52.7194 li
78.1735 53.4474 78.3135 53.9794 78.5935 54.3434 cv
78.8735 54.7074 79.2935 54.8894 79.8675 54.8894 cv
80.5395 54.8894 81.0855 54.6794 81.4775 54.2454 cv
81.8695 53.8114 82.0655 53.2234 82.0655 52.4674 cv
82.0655 48.1274 li
83.3255 48.1274 li
83.3255 55.7854 li
82.0655 55.7854 li
82.0655 54.6094 li
81.7575 55.0854 81.3935 55.4214 81.0015 55.6454 cv
80.5955 55.8554 80.1335 55.9674 79.6015 55.9674 cv
78.7195 55.9674 78.0475 55.7014 77.5995 55.1554 cv
77.1375 54.6234 76.9135 53.8254 76.9135 52.7614 cv
80.0775 47.9454 mo
80.0775 47.9454 li
f
86.0975 54.0494 mo
87.5395 54.0494 li
87.5395 55.7854 li
86.0975 55.7854 li
86.0975 54.0494 li
f
95.8835 48.4214 mo
95.8835 49.5974 li
95.5195 49.4014 95.1695 49.2614 94.8055 49.1634 cv
94.4415 49.0654 94.0915 49.0094 93.7275 49.0094 cv
92.9155 49.0094 92.2715 49.2754 91.8235 49.7934 cv
91.3755 50.3114 91.1515 51.0394 91.1515 51.9634 cv
91.1515 52.9014 91.3755 53.6294 91.8235 54.1474 cv
92.2715 54.6654 92.9155 54.9174 93.7275 54.9174 cv
94.0915 54.9174 94.4415 54.8754 94.8055 54.7774 cv
95.1695 54.6794 95.5195 54.5254 95.8835 54.3294 cv
95.8835 55.4914 li
95.5195 55.6594 95.1555 55.7854 94.7915 55.8554 cv
94.4135 55.9254 94.0075 55.9674 93.5875 55.9674 cv
92.4395 55.9674 91.5155 55.6174 90.8435 54.8894 cv
90.1575 54.1754 89.8215 53.1954 89.8215 51.9634 cv
89.8215 50.7174 90.1575 49.7374 90.8435 49.0234 cv
91.5295 48.3094 92.4675 47.9454 93.6715 47.9454 cv
94.0635 47.9454 94.4415 47.9874 94.8055 48.0714 cv
95.1695 48.1554 95.5335 48.2674 95.8835 48.4214 cv
f
101.036 49.0094 mo
100.364 49.0094 99.8315 49.2754 99.4395 49.8074 cv
99.0475 50.3394 98.8515 51.0534 98.8515 51.9634 cv
98.8515 52.8874 99.0335 53.6014 99.4255 54.1334 cv
99.8175 54.6654 100.35 54.9174 101.036 54.9174 cv
101.708 54.9174 102.24 54.6654 102.632 54.1334 cv
103.024 53.6014 103.22 52.8874 103.22 51.9634 cv
103.22 51.0674 103.024 50.3394 102.632 49.8074 cv
102.24 49.2754 101.708 49.0094 101.036 49.0094 cv
101.036 47.9454 mo
102.128 47.9454 102.982 48.3094 103.612 49.0094 cv
104.228 49.7234 104.55 50.7034 104.55 51.9634 cv
104.55 53.2234 104.228 54.2034 103.612 54.9034 cv
102.982 55.6174 102.128 55.9674 101.036 55.9674 cv
99.9295 55.9674 99.0615 55.6174 98.4455 54.9034 cv
97.8295 54.2034 97.5215 53.2234 97.5215 51.9634 cv
97.5215 50.7034 97.8295 49.7234 98.4455 49.0094 cv
99.0615 48.3094 99.9295 47.9454 101.036 47.9454 cv
f
112.6 49.5974 mo
112.908 49.0374 113.286 48.6314 113.72 48.3514 cv
114.154 48.0854 114.672 47.9454 115.274 47.9454 cv
116.058 47.9454 116.674 48.2254 117.108 48.7854 cv
117.542 49.3454 117.766 50.1434 117.766 51.1654 cv
117.766 55.7854 li
116.506 55.7854 li
116.506 51.2074 li
116.506 50.4794 116.366 49.9334 116.114 49.5694 cv
115.848 49.2194 115.456 49.0374 114.924 49.0374 cv
114.266 49.0374 113.748 49.2614 113.37 49.6954 cv
112.992 50.1294 112.81 50.7174 112.81 51.4594 cv
112.81 55.7854 li
111.55 55.7854 li
111.55 51.2074 li
111.55 50.4794 111.41 49.9334 111.158 49.5694 cv
110.892 49.2194 110.486 49.0374 109.954 49.0374 cv
109.31 49.0374 108.792 49.2614 108.414 49.6954 cv
108.036 50.1294 107.854 50.7174 107.854 51.4594 cv
107.854 55.7854 li
106.594 55.7854 li
106.594 48.1274 li
107.854 48.1274 li
107.854 49.3174 li
108.134 48.8554 108.484 48.5054 108.89 48.2814 cv
109.282 48.0574 109.758 47.9454 110.318 47.9454 cv
110.878 47.9454 111.34 48.0854 111.732 48.3654 cv
112.124 48.6454 112.404 49.0654 112.6 49.5974 cv
f
125.959 64.8725 mo
122.459 64.8725 li
f
125.959 64.8725 mo
122.459 64.8725 li
@
8.73866 64.0048 mo
9.04667 63.4448 9.42467 63.0388 9.85867 62.7588 cv
10.2927 62.4928 10.8107 62.3528 11.4127 62.3528 cv
12.1967 62.3528 12.8127 62.6328 13.2467 63.1928 cv
13.6807 63.7528 13.9047 64.5508 13.9047 65.5728 cv
13.9047 70.1928 li
12.6447 70.1928 li
12.6447 65.6148 li
12.6447 64.8868 12.5047 64.3408 12.2527 63.9768 cv
11.9867 63.6268 11.5947 63.4448 11.0627 63.4448 cv
10.4047 63.4448 9.88667 63.6688 9.50867 64.1028 cv
9.13067 64.5368 8.94867 65.1248 8.94867 65.8668 cv
8.94867 70.1928 li
7.68867 70.1928 li
7.68867 65.6148 li
7.68867 64.8868 7.54867 64.3408 7.29667 63.9768 cv
7.03066 63.6268 6.62466 63.4448 6.09267 63.4448 cv
5.44867 63.4448 4.93066 63.6688 4.55267 64.1028 cv
4.17467 64.5368 3.99267 65.1248 3.99267 65.8668 cv
3.99267 70.1928 li
2.73267 70.1928 li
2.73267 62.5348 li
3.99267 62.5348 li
3.99267 63.7248 li
4.27267 63.2628 4.62267 62.9128 5.02866 62.6888 cv
5.42067 62.4648 5.89667 62.3528 6.45667 62.3528 cv
7.01666 62.3528 7.47867 62.4928 7.87067 62.7728 cv
8.26266 63.0528 8.54266 63.4728 8.73866 64.0048 cv
f
19.3787 63.4168 mo
18.7067 63.4168 18.1747 63.6828 17.7827 64.2148 cv
17.3907 64.7468 17.1947 65.4608 17.1947 66.3708 cv
17.1947 67.2948 17.3767 68.0088 17.7687 68.5408 cv
18.1607 69.0728 18.6927 69.3248 19.3787 69.3248 cv
20.0507 69.3248 20.5827 69.0728 20.9747 68.5408 cv
21.3667 68.0088 21.5627 67.2948 21.5627 66.3708 cv
21.5627 65.4748 21.3667 64.7468 20.9747 64.2148 cv
20.5827 63.6828 20.0507 63.4168 19.3787 63.4168 cv
19.3787 62.3528 mo
20.4707 62.3528 21.3247 62.7168 21.9547 63.4168 cv
22.5707 64.1308 22.8927 65.1108 22.8927 66.3708 cv
22.8927 67.6308 22.5707 68.6108 21.9547 69.3108 cv
21.3247 70.0248 20.4707 70.3748 19.3787 70.3748 cv
18.2727 70.3748 17.4047 70.0248 16.7887 69.3108 cv
16.1727 68.6108 15.8647 67.6308 15.8647 66.3708 cv
15.8647 65.1108 16.1727 64.1308 16.7887 63.4168 cv
17.4047 62.7168 18.2727 62.3528 19.3787 62.3528 cv
f
30.4807 66.3708 mo
30.4807 65.4468 30.2847 64.7328 29.9067 64.2008 cv
29.5147 63.6688 28.9967 63.4028 28.3387 63.4028 cv
27.6667 63.4028 27.1487 63.6688 26.7707 64.2008 cv
26.3787 64.7328 26.1967 65.4468 26.1967 66.3708 cv
26.1967 67.2948 26.3787 68.0228 26.7707 68.5548 cv
27.1487 69.0868 27.6667 69.3388 28.3387 69.3388 cv
28.9967 69.3388 29.5147 69.0868 29.9067 68.5548 cv
30.2847 68.0228 30.4807 67.2948 30.4807 66.3708 cv
26.1967 63.6968 mo
26.4487 63.2488 26.7847 62.9128 27.1907 62.6888 cv
27.5967 62.4648 28.0867 62.3528 28.6467 62.3528 cv
29.5707 62.3528 30.3267 62.7308 30.9146 63.4588 cv
31.4886 64.2008 31.7826 65.1668 31.7826 66.3708 cv
31.7826 67.5748 31.4886 68.5548 30.9146 69.2828 cv
30.3267 70.0108 29.5707 70.3748 28.6467 70.3748 cv
28.0867 70.3748 27.5967 70.2628 27.1907 70.0528 cv
26.7847 69.8428 26.4487 69.5068 26.1967 69.0448 cv
26.1967 70.1928 li
24.9367 70.1928 li
24.9367 59.5528 li
26.1967 59.5528 li
26.1967 63.6968 li
f
33.8686 62.5348 mo
35.1286 62.5348 li
35.1286 70.1928 li
33.8686 70.1928 li
33.8686 62.5348 li
33.8686 59.5528 mo
35.1286 59.5528 li
35.1286 61.1488 li
33.8686 61.1488 li
33.8686 59.5528 li
f
37.7606 59.5528 mo
39.0206 59.5528 li
39.0206 70.1928 li
37.7606 70.1928 li
37.7606 59.5528 li
f
48.2046 66.0488 mo
48.2046 66.6648 li
42.4226 66.6648 li
42.4786 67.5328 42.7306 68.2048 43.2066 68.6528 cv
43.6686 69.1008 44.3126 69.3248 45.1526 69.3248 cv
45.6286 69.3248 46.1046 69.2688 46.5526 69.1568 cv
47.0006 69.0448 47.4626 68.8628 47.9106 68.6108 cv
47.9106 69.8008 li
47.4626 69.9968 47.0006 70.1508 46.5246 70.2348 cv
46.0486 70.3188 45.5586 70.3748 45.0826 70.3748 cv
43.8506 70.3748 42.8846 70.0248 42.1706 69.3248 cv
41.4566 68.6248 41.1066 67.6588 41.1066 66.4408 cv
41.1066 65.1948 41.4426 64.2008 42.1146 63.4588 cv
42.7866 62.7308 43.7106 62.3528 44.8586 62.3528 cv
45.8946 62.3528 46.7066 62.6888 47.3086 63.3468 cv
47.8966 64.0188 48.2046 64.9148 48.2046 66.0488 cv
46.9446 65.6848 mo
46.9306 64.9988 46.7346 64.4528 46.3706 64.0328 cv
45.9926 63.6268 45.4886 63.4168 44.8726 63.4168 cv
44.1726 63.4168 43.6126 63.6268 43.1926 64.0188 cv
42.7726 64.4108 42.5206 64.9708 42.4646 65.6848 cv
46.9446 65.6848 li
f
50.4446 68.4568 mo
51.8866 68.4568 li
51.8866 70.1928 li
50.4446 70.1928 li
50.4446 68.4568 li
f
55.1346 69.0308 mo
57.3886 69.0308 li
57.3886 61.2468 li
54.9386 61.7368 li
54.9386 60.4768 li
57.3746 59.9868 li
58.7606 59.9868 li
58.7606 69.0308 li
61.0146 69.0308 li
61.0146 70.1928 li
55.1346 70.1928 li
55.1346 69.0308 li
f
64.9906 69.0308 mo
69.8066 69.0308 li
69.8066 70.1928 li
63.3246 70.1928 li
63.3246 69.0308 li
63.8426 68.4988 64.5566 67.7708 65.4666 66.8468 cv
66.3626 65.9368 66.9366 65.3488 67.1746 65.0828 cv
67.6226 64.5928 67.9306 64.1728 68.0986 63.8228 cv
68.2666 63.4868 68.3646 63.1368 68.3646 62.8008 cv
68.3646 62.2688 68.1686 61.8208 67.7906 61.4848 cv
67.4126 61.1488 66.9226 60.9668 66.3066 60.9668 cv
65.8726 60.9668 65.4106 61.0508 64.9346 61.1908 cv
64.4586 61.3448 63.9406 61.5688 63.3946 61.8768 cv
63.3946 60.4768 li
63.9546 60.2528 64.4726 60.0848 64.9486 59.9728 cv
65.4246 59.8608 65.8726 59.8048 66.2786 59.8048 cv
67.3286 59.8048 68.1686 60.0708 68.7986 60.6028 cv
69.4286 61.1348 69.7506 61.8348 69.7506 62.7168 cv
69.7506 63.1368 69.6666 63.5428 69.5126 63.9068 cv
69.3586 64.2848 69.0786 64.7328 68.6586 65.2368 cv
68.5466 65.3768 68.1826 65.7548 67.5666 66.3848 cv
66.9506 67.0148 66.0966 67.8968 64.9906 69.0308 cv
f
76.8906 64.6908 mo
77.5486 64.8308 78.0666 65.1248 78.4306 65.5728 cv
78.7946 66.0208 78.9906 66.5808 78.9906 67.2248 cv
78.9906 68.2328 78.6406 69.0168 77.9546 69.5628 cv
77.2546 70.1088 76.2746 70.3748 75.0006 70.3748 cv
74.5666 70.3748 74.1186 70.3328 73.6706 70.2488 cv
73.2226 70.1788 72.7466 70.0528 72.2706 69.8848 cv
72.2706 68.5548 li
72.6486 68.7788 73.0686 68.9468 73.5306 69.0588 cv
73.9786 69.1708 74.4546 69.2268 74.9586 69.2268 cv
75.8266 69.2268 76.4846 69.0588 76.9326 68.7228 cv
77.3806 68.3868 77.6186 67.8828 77.6186 67.2248 cv
77.6186 66.6368 77.4086 66.1608 76.9886 65.8248 cv
76.5686 65.4888 75.9806 65.3068 75.2246 65.3068 cv
74.0346 65.3068 li
74.0346 64.1728 li
75.2806 64.1728 li
75.9526 64.1728 76.4706 64.0468 76.8346 63.7668 cv
77.1986 63.5008 77.3806 63.1088 77.3806 62.5908 cv
77.3806 62.0728 77.1846 61.6668 76.8206 61.3868 cv
76.4426 61.1068 75.9106 60.9668 75.2246 60.9668 cv
74.8466 60.9668 74.4406 61.0088 74.0066 61.0928 cv
73.5726 61.1768 73.0966 61.3028 72.5786 61.4708 cv
72.5786 60.2388 li
73.0966 60.0988 73.5866 59.9868 74.0486 59.9168 cv
74.4966 59.8468 74.9306 59.8048 75.3506 59.8048 cv
76.3866 59.8048 77.2126 60.0428 77.8286 60.5188 cv
78.4446 60.9948 78.7526 61.6388 78.7526 62.4508 cv
78.7526 63.0108 78.5846 63.4868 78.2626 63.8788 cv
77.9406 64.2708 77.4786 64.5508 76.8906 64.6908 cv
f
84.5626 60.8968 mo
83.8486 60.8968 83.3166 61.2468 82.9526 61.9468 cv
82.5886 62.6468 82.4206 63.6968 82.4206 65.0968 cv
82.4206 66.4968 82.5886 67.5468 82.9526 68.2468 cv
83.3166 68.9468 83.8486 69.2968 84.5626 69.2968 cv
85.2766 69.2968 85.8086 68.9468 86.1726 68.2468 cv
86.5226 67.5468 86.7046 66.4968 86.7046 65.0968 cv
86.7046 63.6968 86.5226 62.6468 86.1726 61.9468 cv
85.8086 61.2468 85.2766 60.8968 84.5626 60.8968 cv
84.5626 59.8048 mo
85.6966 59.8048 86.5646 60.2668 87.1806 61.1628 cv
87.7826 62.0728 88.0906 63.3888 88.0906 65.0968 cv
88.0906 66.8188 87.7826 68.1348 87.1806 69.0308 cv
86.5646 69.9268 85.6966 70.3748 84.5626 70.3748 cv
83.4146 70.3748 82.5326 69.9268 81.9306 69.0308 cv
81.3286 68.1348 81.0346 66.8188 81.0346 65.0968 cv
81.0346 63.3888 81.3286 62.0728 81.9306 61.1628 cv
82.5326 60.2668 83.4146 59.8048 84.5626 59.8048 cv
f
93.6346 64.5368 mo
93.0186 64.5368 92.5286 64.7608 92.1646 65.1808 cv
91.8006 65.6008 91.6186 66.1888 91.6186 66.9168 cv
91.6186 67.6588 91.8006 68.2468 92.1646 68.6668 cv
92.5286 69.0868 93.0186 69.2968 93.6346 69.2968 cv
94.2506 69.2968 94.7406 69.0868 95.1046 68.6668 cv
95.4686 68.2468 95.6506 67.6588 95.6506 66.9168 cv
95.6506 66.1888 95.4686 65.6008 95.1046 65.1808 cv
94.7406 64.7608 94.2506 64.5368 93.6346 64.5368 cv
96.3786 60.2108 mo
96.3786 61.4708 li
96.0286 61.3028 95.6786 61.1768 95.3286 61.0928 cv
94.9646 61.0088 94.6146 60.9668 94.2786 60.9668 cv
93.3546 60.9668 92.6546 61.2748 92.1786 61.8908 cv
91.7026 62.5068 91.4226 63.4448 91.3666 64.6768 cv
91.6326 64.2848 91.9686 63.9768 92.3746 63.7668 cv
92.7806 63.5568 93.2286 63.4448 93.7186 63.4448 cv
94.7406 63.4448 95.5526 63.7668 96.1406 64.3828 cv
96.7286 64.9988 97.0366 65.8528 97.0366 66.9168 cv
97.0366 67.9668 96.7146 68.8068 96.0986 69.4368 cv
95.4826 70.0668 94.6566 70.3748 93.6346 70.3748 cv
92.4586 70.3748 91.5486 69.9268 90.9326 69.0308 cv
90.3026 68.1348 89.9946 66.8188 89.9946 65.0968 cv
89.9946 63.4868 90.3726 62.1988 91.1426 61.2468 cv
91.8986 60.2948 92.9346 59.8048 94.2226 59.8048 cv
94.5586 59.8048 94.9086 59.8468 95.2726 59.9028 cv
95.6226 59.9728 95.9866 60.0708 96.3786 60.2108 cv
f
99.4166 68.4568 mo
100.859 68.4568 li
100.859 70.1928 li
99.4166 70.1928 li
99.4166 68.4568 li
f
109.203 62.8288 mo
109.203 64.0048 li
108.839 63.8088 108.489 63.6688 108.125 63.5708 cv
107.761 63.4728 107.411 63.4168 107.047 63.4168 cv
106.235 63.4168 105.591 63.6828 105.143 64.2008 cv
104.695 64.7188 104.471 65.4468 104.471 66.3708 cv
104.471 67.3088 104.695 68.0368 105.143 68.5548 cv
105.591 69.0728 106.235 69.3248 107.047 69.3248 cv
107.411 69.3248 107.761 69.2828 108.125 69.1848 cv
108.489 69.0868 108.839 68.9328 109.203 68.7368 cv
109.203 69.8988 li
108.839 70.0668 108.475 70.1928 108.111 70.2628 cv
107.733 70.3328 107.327 70.3748 106.907 70.3748 cv
105.759 70.3748 104.835 70.0248 104.163 69.2968 cv
103.477 68.5828 103.141 67.6028 103.141 66.3708 cv
103.141 65.1248 103.477 64.1448 104.163 63.4308 cv
104.849 62.7168 105.787 62.3528 106.991 62.3528 cv
107.383 62.3528 107.761 62.3948 108.125 62.4788 cv
108.489 62.5628 108.853 62.6748 109.203 62.8288 cv
f
117.757 65.5728 mo
117.757 70.1928 li
116.497 70.1928 li
116.497 65.6148 li
116.497 64.8868 116.343 64.3548 116.063 63.9908 cv
115.783 63.6268 115.363 63.4448 114.803 63.4448 cv
114.117 63.4448 113.585 63.6688 113.193 64.1028 cv
112.801 64.5368 112.605 65.1248 112.605 65.8668 cv
112.605 70.1928 li
111.345 70.1928 li
111.345 62.5348 li
112.605 62.5348 li
112.605 63.7248 li
112.899 63.2768 113.249 62.9268 113.669 62.7028 cv
114.075 62.4788 114.551 62.3528 115.083 62.3528 cv
115.951 62.3528 116.623 62.6328 117.071 63.1788 cv
117.519 63.7248 117.757 64.5228 117.757 65.5728 cv
f
125.959 79.28 mo
122.459 79.28 li
f
125.959 79.28 mo
122.459 79.28 li
@
19.3012 78.4123 mo
19.6092 77.8523 19.9872 77.4463 20.4212 77.1663 cv
20.8552 76.9003 21.3732 76.7603 21.9752 76.7603 cv
22.7592 76.7603 23.3752 77.0403 23.8092 77.6003 cv
24.2432 78.1603 24.4672 78.9583 24.4672 79.9803 cv
24.4672 84.6003 li
23.2072 84.6003 li
23.2072 80.0223 li
23.2072 79.2943 23.0672 78.7483 22.8152 78.3843 cv
22.5492 78.0343 22.1572 77.8523 21.6252 77.8523 cv
20.9672 77.8523 20.4492 78.0763 20.0712 78.5103 cv
19.6932 78.9443 19.5112 79.5323 19.5112 80.2743 cv
19.5112 84.6003 li
18.2512 84.6003 li
18.2512 80.0223 li
18.2512 79.2943 18.1112 78.7483 17.8592 78.3843 cv
17.5932 78.0343 17.1872 77.8523 16.6552 77.8523 cv
16.0112 77.8523 15.4932 78.0763 15.1152 78.5103 cv
14.7372 78.9443 14.5552 79.5323 14.5552 80.2743 cv
14.5552 84.6003 li
13.2952 84.6003 li
13.2952 76.9423 li
14.5552 76.9423 li
14.5552 78.1323 li
14.8352 77.6703 15.1852 77.3203 15.5912 77.0963 cv
15.9832 76.8723 16.4592 76.7603 17.0192 76.7603 cv
17.5792 76.7603 18.0412 76.9003 18.4332 77.1803 cv
18.8252 77.4603 19.1052 77.8803 19.3012 78.4123 cv
f
26.8472 81.5763 mo
26.8472 76.9423 li
28.1072 76.9423 li
28.1072 81.5343 li
28.1072 82.2623 28.2472 82.7943 28.5272 83.1583 cv
28.8072 83.5223 29.2272 83.7043 29.8012 83.7043 cv
30.4732 83.7043 31.0191 83.4943 31.4111 83.0603 cv
31.8031 82.6263 31.9991 82.0383 31.9991 81.2823 cv
31.9991 76.9423 li
33.2591 76.9423 li
33.2591 84.6003 li
31.9991 84.6003 li
31.9991 83.4243 li
31.6911 83.9003 31.3271 84.2363 30.9351 84.4603 cv
30.5292 84.6703 30.0672 84.7823 29.5352 84.7823 cv
28.6532 84.7823 27.9812 84.5163 27.5332 83.9703 cv
27.0712 83.4383 26.8472 82.6403 26.8472 81.5763 cv
30.0112 76.7603 mo
30.0112 76.7603 li
f
40.7351 77.1663 mo
40.7351 78.3563 li
40.3711 78.1883 40.0071 78.0483 39.6291 77.9503 cv
39.2371 77.8663 38.8451 77.8103 38.4391 77.8103 cv
37.8091 77.8103 37.3331 77.9083 37.0251 78.1043 cv
36.7171 78.3003 36.5631 78.5803 36.5631 78.9583 cv
36.5631 79.2523 36.6751 79.4763 36.8991 79.6443 cv
37.1231 79.8123 37.5711 79.9803 38.2431 80.1203 cv
38.6771 80.2183 li
39.5731 80.4143 40.2031 80.6943 40.5811 81.0303 cv
40.9451 81.3803 41.1411 81.8703 41.1411 82.4863 cv
41.1411 83.2003 40.8611 83.7603 40.3011 84.1663 cv
39.7411 84.5863 38.9571 84.7823 37.9771 84.7823 cv
37.5571 84.7823 37.1371 84.7403 36.6891 84.6703 cv
36.2411 84.6003 35.7791 84.4883 35.2891 84.3203 cv
35.2891 83.0183 li
35.7511 83.2703 36.2131 83.4523 36.6611 83.5643 cv
37.1091 83.6903 37.5571 83.7463 38.0051 83.7463 cv
38.5931 83.7463 39.0551 83.6483 39.3771 83.4523 cv
39.6851 83.2563 39.8531 82.9623 39.8531 82.5843 cv
39.8531 82.2483 39.7271 81.9823 39.5031 81.8003 cv
39.2791 81.6183 38.7751 81.4363 37.9911 81.2683 cv
37.5571 81.1703 li
36.7731 81.0023 36.1991 80.7503 35.8631 80.4143 cv
35.5131 80.0783 35.3451 79.6163 35.3451 79.0143 cv
35.3451 78.3003 35.5971 77.7403 36.1011 77.3483 cv
36.6051 76.9563 37.3331 76.7603 38.2851 76.7603 cv
38.7471 76.7603 39.1811 76.8023 39.6011 76.8723 cv
40.0071 76.9423 40.3851 77.0403 40.7351 77.1663 cv
f
43.1431 76.9423 mo
44.4031 76.9423 li
44.4031 84.6003 li
43.1431 84.6003 li
43.1431 76.9423 li
43.1431 73.9603 mo
44.4031 73.9603 li
44.4031 75.5563 li
43.1431 75.5563 li
43.1431 73.9603 li
f
52.5511 77.2363 mo
52.5511 78.4123 li
52.1871 78.2163 51.8371 78.0763 51.4731 77.9783 cv
51.1091 77.8803 50.7591 77.8243 50.3951 77.8243 cv
49.5831 77.8243 48.9391 78.0903 48.4911 78.6083 cv
48.0431 79.1263 47.8191 79.8543 47.8191 80.7783 cv
47.8191 81.7163 48.0431 82.4443 48.4911 82.9623 cv
48.9391 83.4803 49.5831 83.7323 50.3951 83.7323 cv
50.7591 83.7323 51.1091 83.6903 51.4731 83.5923 cv
51.8371 83.4943 52.1871 83.3403 52.5511 83.1443 cv
52.5511 84.3063 li
52.1871 84.4743 51.8231 84.6003 51.4591 84.6703 cv
51.0811 84.7403 50.6751 84.7823 50.2551 84.7823 cv
49.1071 84.7823 48.1831 84.4323 47.5111 83.7043 cv
46.8251 82.9903 46.4891 82.0103 46.4891 80.7783 cv
46.4891 79.5323 46.8251 78.5523 47.5111 77.8383 cv
48.1971 77.1243 49.1351 76.7603 50.3391 76.7603 cv
50.7311 76.7603 51.1091 76.8023 51.4731 76.8863 cv
51.8371 76.9703 52.2011 77.0823 52.5511 77.2363 cv
f
54.9171 82.8643 mo
56.3591 82.8643 li
56.3591 84.6003 li
54.9171 84.6003 li
54.9171 82.8643 li
f
59.6071 83.4383 mo
61.8611 83.4383 li
61.8611 75.6543 li
59.4111 76.1443 li
59.4111 74.8843 li
61.8471 74.3943 li
63.2331 74.3943 li
63.2331 83.4383 li
65.4871 83.4383 li
65.4871 84.6003 li
59.6071 84.6003 li
59.6071 83.4383 li
f
71.3951 78.9443 mo
70.7791 78.9443 70.2891 79.1683 69.9251 79.5883 cv
69.5611 80.0083 69.3791 80.5963 69.3791 81.3243 cv
69.3791 82.0663 69.5611 82.6543 69.9251 83.0743 cv
70.2891 83.4943 70.7791 83.7043 71.3951 83.7043 cv
72.0111 83.7043 72.5011 83.4943 72.8651 83.0743 cv
73.2291 82.6543 73.4111 82.0663 73.4111 81.3243 cv
73.4111 80.5963 73.2291 80.0083 72.8651 79.5883 cv
72.5011 79.1683 72.0111 78.9443 71.3951 78.9443 cv
74.1391 74.6183 mo
74.1391 75.8783 li
73.7891 75.7103 73.4391 75.5843 73.0891 75.5003 cv
72.7251 75.4163 72.3751 75.3743 72.0391 75.3743 cv
71.1151 75.3743 70.4151 75.6823 69.9391 76.2983 cv
69.4631 76.9143 69.1831 77.8523 69.1271 79.0843 cv
69.3931 78.6923 69.7291 78.3843 70.1351 78.1743 cv
70.5411 77.9643 70.9891 77.8523 71.4791 77.8523 cv
72.5011 77.8523 73.3131 78.1743 73.9011 78.7903 cv
74.4891 79.4063 74.7971 80.2603 74.7971 81.3243 cv
74.7971 82.3743 74.4751 83.2143 73.8591 83.8443 cv
73.2431 84.4743 72.4171 84.7823 71.3951 84.7823 cv
70.2191 84.7823 69.3091 84.3343 68.6931 83.4383 cv
68.0631 82.5423 67.7551 81.2263 67.7551 79.5043 cv
67.7551 77.8943 68.1331 76.6063 68.9031 75.6543 cv
69.6591 74.7023 70.6951 74.2123 71.9831 74.2123 cv
72.3191 74.2123 72.6691 74.2543 73.0331 74.3103 cv
73.3831 74.3803 73.7471 74.4783 74.1391 74.6183 cv
f
81.3631 79.0983 mo
82.0211 79.2383 82.5391 79.5323 82.9031 79.9803 cv
83.2671 80.4283 83.4631 80.9883 83.4631 81.6323 cv
83.4631 82.6403 83.1131 83.4243 82.4271 83.9703 cv
81.7271 84.5163 80.7471 84.7823 79.4731 84.7823 cv
79.0391 84.7823 78.5911 84.7403 78.1431 84.6563 cv
77.6951 84.5863 77.2191 84.4603 76.7431 84.2923 cv
76.7431 82.9623 li
77.1211 83.1863 77.5411 83.3543 78.0031 83.4663 cv
78.4511 83.5783 78.9271 83.6343 79.4311 83.6343 cv
80.2991 83.6343 80.9571 83.4663 81.4051 83.1303 cv
81.8531 82.7943 82.0911 82.2903 82.0911 81.6323 cv
82.0911 81.0443 81.8811 80.5683 81.4611 80.2323 cv
81.0411 79.8963 80.4531 79.7143 79.6971 79.7143 cv
78.5071 79.7143 li
78.5071 78.5803 li
79.7531 78.5803 li
80.4251 78.5803 80.9431 78.4543 81.3071 78.1743 cv
81.6711 77.9083 81.8531 77.5163 81.8531 76.9983 cv
81.8531 76.4803 81.6571 76.0743 81.2931 75.7943 cv
80.9151 75.5143 80.3831 75.3743 79.6971 75.3743 cv
79.3191 75.3743 78.9131 75.4163 78.4791 75.5003 cv
78.0451 75.5843 77.5691 75.7103 77.0511 75.8783 cv
77.0511 74.6463 li
77.5691 74.5063 78.0591 74.3943 78.5211 74.3243 cv
78.9691 74.2543 79.4031 74.2123 79.8231 74.2123 cv
80.8591 74.2123 81.6851 74.4503 82.3011 74.9263 cv
82.9171 75.4023 83.2251 76.0463 83.2251 76.8583 cv
83.2251 77.4183 83.0571 77.8943 82.7351 78.2863 cv
82.4131 78.6783 81.9511 78.9583 81.3631 79.0983 cv
f
86.0811 82.8643 mo
87.5231 82.8643 li
87.5231 84.6003 li
86.0811 84.6003 li
86.0811 82.8643 li
f
95.8671 77.2363 mo
95.8671 78.4123 li
95.5031 78.2163 95.1531 78.0763 94.7891 77.9783 cv
94.4251 77.8803 94.0751 77.8243 93.7111 77.8243 cv
92.8991 77.8243 92.2551 78.0903 91.8071 78.6083 cv
91.3591 79.1263 91.1351 79.8543 91.1351 80.7783 cv
91.1351 81.7163 91.3591 82.4443 91.8071 82.9623 cv
92.2551 83.4803 92.8991 83.7323 93.7111 83.7323 cv
94.0751 83.7323 94.4251 83.6903 94.7891 83.5923 cv
95.1531 83.4943 95.5031 83.3403 95.8671 83.1443 cv
95.8671 84.3063 li
95.5031 84.4743 95.1391 84.6003 94.7751 84.6703 cv
94.3971 84.7403 93.9911 84.7823 93.5711 84.7823 cv
92.4231 84.7823 91.4991 84.4323 90.8271 83.7043 cv
90.1411 82.9903 89.8051 82.0103 89.8051 80.7783 cv
89.8051 79.5323 90.1411 78.5523 90.8271 77.8383 cv
91.5131 77.1243 92.4511 76.7603 93.6551 76.7603 cv
94.0471 76.7603 94.4251 76.8023 94.7891 76.8863 cv
95.1531 76.9703 95.5171 77.0823 95.8671 77.2363 cv
f
101.019 77.8243 mo
100.347 77.8243 99.8151 78.0903 99.4231 78.6223 cv
99.0311 79.1543 98.8351 79.8683 98.8351 80.7783 cv
98.8351 81.7023 99.0171 82.4163 99.4091 82.9483 cv
99.8011 83.4803 100.333 83.7323 101.019 83.7323 cv
101.691 83.7323 102.223 83.4803 102.615 82.9483 cv
103.007 82.4163 103.203 81.7023 103.203 80.7783 cv
103.203 79.8823 103.007 79.1543 102.615 78.6223 cv
102.223 78.0903 101.691 77.8243 101.019 77.8243 cv
101.019 76.7603 mo
102.111 76.7603 102.965 77.1243 103.595 77.8243 cv
104.211 78.5383 104.533 79.5183 104.533 80.7783 cv
104.533 82.0383 104.211 83.0183 103.595 83.7183 cv
102.965 84.4323 102.111 84.7823 101.019 84.7823 cv
99.9131 84.7823 99.0451 84.4323 98.4291 83.7183 cv
97.8131 83.0183 97.5051 82.0383 97.5051 80.7783 cv
97.5051 79.5183 97.8131 78.5383 98.4291 77.8243 cv
99.0451 77.1243 99.9131 76.7603 101.019 76.7603 cv
f
112.583 78.4123 mo
112.891 77.8523 113.269 77.4463 113.703 77.1663 cv
114.137 76.9003 114.655 76.7603 115.257 76.7603 cv
116.041 76.7603 116.657 77.0403 117.091 77.6003 cv
117.525 78.1603 117.749 78.9583 117.749 79.9803 cv
117.749 84.6003 li
116.489 84.6003 li
116.489 80.0223 li
116.489 79.2943 116.349 78.7483 116.097 78.3843 cv
115.831 78.0343 115.439 77.8523 114.907 77.8523 cv
114.249 77.8523 113.731 78.0763 113.353 78.5103 cv
112.975 78.9443 112.793 79.5323 112.793 80.2743 cv
112.793 84.6003 li
111.533 84.6003 li
111.533 80.0223 li
111.533 79.2943 111.393 78.7483 111.141 78.3843 cv
110.875 78.0343 110.469 77.8523 109.937 77.8523 cv
109.293 77.8523 108.775 78.0763 108.397 78.5103 cv
108.019 78.9443 107.837 79.5323 107.837 80.2743 cv
107.837 84.6003 li
106.577 84.6003 li
106.577 76.9423 li
107.837 76.9423 li
107.837 78.1323 li
108.117 77.6703 108.467 77.3203 108.873 77.0963 cv
109.265 76.8723 109.741 76.7603 110.301 76.7603 cv
110.861 76.7603 111.323 76.9003 111.715 77.1803 cv
112.107 77.4603 112.387 77.8803 112.583 78.4123 cv
f
125.959 93.6875 mo
122.459 93.6875 li
f
125.959 93.6875 mo
122.459 93.6875 li
@
17.2114 97.8598 mo
17.2114 101.906 li
15.9514 101.906 li
15.9514 91.3498 li
17.2114 91.3498 li
17.2114 92.5118 li
17.4634 92.0638 17.7994 91.7278 18.2054 91.5038 cv
18.6114 91.2798 19.1014 91.1678 19.6614 91.1678 cv
20.5854 91.1678 21.3414 91.5458 21.9294 92.2738 cv
22.5034 93.0158 22.7974 93.9818 22.7974 95.1858 cv
22.7974 96.3898 22.5034 97.3698 21.9294 98.0978 cv
21.3414 98.8258 20.5854 99.1898 19.6614 99.1898 cv
19.1014 99.1898 18.6114 99.0778 18.2054 98.8678 cv
17.7994 98.6578 17.4634 98.3218 17.2114 97.8598 cv
21.4954 95.1858 mo
21.4954 94.2618 21.2994 93.5478 20.9214 93.0158 cv
20.5294 92.4838 20.0114 92.2178 19.3534 92.2178 cv
18.6814 92.2178 18.1634 92.4838 17.7854 93.0158 cv
17.3934 93.5478 17.2114 94.2618 17.2114 95.1858 cv
17.2114 96.1098 17.3934 96.8378 17.7854 97.3698 cv
18.1634 97.9018 18.6814 98.1538 19.3534 98.1538 cv
20.0114 98.1538 20.5294 97.9018 20.9214 97.3698 cv
21.2994 96.8378 21.4954 96.1098 21.4954 95.1858 cv
f
28.3694 95.1578 mo
27.3474 95.1578 26.6474 95.2838 26.2554 95.5078 cv
25.8634 95.7458 25.6674 96.1378 25.6674 96.6978 cv
25.6674 97.1458 25.8074 97.5098 26.1014 97.7618 cv
26.3954 98.0278 26.8014 98.1538 27.3054 98.1538 cv
28.0054 98.1538 28.5654 97.9158 28.9854 97.4118 cv
29.4054 96.9218 29.6154 96.2638 29.6154 95.4378 cv
29.6154 95.1578 li
28.3694 95.1578 li
30.8754 94.6398 mo
30.8754 99.0078 li
29.6154 99.0078 li
29.6154 97.8458 li
29.3214 98.3218 28.9574 98.6578 28.5374 98.8678 cv
28.1174 99.0778 27.5854 99.1898 26.9694 99.1898 cv
26.1854 99.1898 25.5554 98.9798 25.0934 98.5458 cv
24.6314 98.1118 24.4074 97.5238 24.4074 96.7818 cv
24.4074 95.9278 24.6874 95.2838 25.2754 94.8358 cv
25.8494 94.4018 26.7034 94.1778 27.8514 94.1778 cv
29.6154 94.1778 li
29.6154 94.0518 li
29.6154 93.4778 29.4194 93.0298 29.0414 92.7078 cv
28.6634 92.3998 28.1314 92.2318 27.4454 92.2318 cv
26.9974 92.2318 26.5774 92.2878 26.1574 92.3998 cv
25.7374 92.5118 25.3454 92.6658 24.9674 92.8618 cv
24.9674 91.6998 li
25.4154 91.5318 25.8634 91.3918 26.2974 91.3078 cv
26.7314 91.2238 27.1514 91.1678 27.5714 91.1678 cv
28.6774 91.1678 29.5034 91.4618 30.0494 92.0358 cv
30.5954 92.6098 30.8754 93.4778 30.8754 94.6398 cv
f
39.8354 94.3878 mo
39.8354 99.0078 li
38.5754 99.0078 li
38.5754 94.4298 li
38.5754 93.7018 38.4214 93.1698 38.1414 92.8058 cv
37.8614 92.4418 37.4414 92.2598 36.8814 92.2598 cv
36.1954 92.2598 35.6634 92.4838 35.2714 92.9178 cv
34.8794 93.3518 34.6834 93.9398 34.6834 94.6818 cv
34.6834 99.0078 li
33.4234 99.0078 li
33.4234 91.3498 li
34.6834 91.3498 li
34.6834 92.5398 li
34.9774 92.0918 35.3274 91.7418 35.7474 91.5178 cv
36.1534 91.2938 36.6294 91.1678 37.1614 91.1678 cv
38.0294 91.1678 38.7014 91.4478 39.1494 91.9938 cv
39.5974 92.5398 39.8354 93.3378 39.8354 94.3878 cv
f
42.5234 97.2718 mo
43.9654 97.2718 li
43.9654 99.0078 li
42.5234 99.0078 li
42.5234 97.2718 li
f
52.2954 95.1858 mo
52.2954 94.2618 52.0994 93.5478 51.7214 93.0158 cv
51.3294 92.4838 50.8114 92.2178 50.1534 92.2178 cv
49.4814 92.2178 48.9634 92.4838 48.5854 93.0158 cv
48.1934 93.5478 48.0114 94.2618 48.0114 95.1858 cv
48.0114 96.1098 48.1934 96.8378 48.5854 97.3698 cv
48.9634 97.9018 49.4814 98.1538 50.1534 98.1538 cv
50.8114 98.1538 51.3294 97.9018 51.7214 97.3698 cv
52.0994 96.8378 52.2954 96.1098 52.2954 95.1858 cv
48.0114 92.5118 mo
48.2634 92.0638 48.5994 91.7278 49.0054 91.5038 cv
49.4114 91.2798 49.9014 91.1678 50.4614 91.1678 cv
51.3854 91.1678 52.1414 91.5458 52.7294 92.2738 cv
53.3034 93.0158 53.5974 93.9818 53.5974 95.1858 cv
53.5974 96.3898 53.3034 97.3698 52.7294 98.0978 cv
52.1414 98.8258 51.3854 99.1898 50.4614 99.1898 cv
49.9014 99.1898 49.4114 99.0778 49.0054 98.8678 cv
48.5994 98.6578 48.2634 98.3218 48.0114 97.8598 cv
48.0114 99.0078 li
46.7514 99.0078 li
46.7514 88.3678 li
48.0114 88.3678 li
48.0114 92.5118 li
f
59.1694 95.1578 mo
58.1474 95.1578 57.4474 95.2838 57.0554 95.5078 cv
56.6634 95.7458 56.4674 96.1378 56.4674 96.6978 cv
56.4674 97.1458 56.6074 97.5098 56.9014 97.7618 cv
57.1954 98.0278 57.6014 98.1538 58.1054 98.1538 cv
58.8054 98.1538 59.3654 97.9158 59.7854 97.4118 cv
60.2054 96.9218 60.4154 96.2638 60.4154 95.4378 cv
60.4154 95.1578 li
59.1694 95.1578 li
61.6754 94.6398 mo
61.6754 99.0078 li
60.4154 99.0078 li
60.4154 97.8458 li
60.1214 98.3218 59.7574 98.6578 59.3374 98.8678 cv
58.9174 99.0778 58.3854 99.1898 57.7694 99.1898 cv
56.9854 99.1898 56.3554 98.9798 55.8934 98.5458 cv
55.4314 98.1118 55.2074 97.5238 55.2074 96.7818 cv
55.2074 95.9278 55.4874 95.2838 56.0754 94.8358 cv
56.6494 94.4018 57.5034 94.1778 58.6514 94.1778 cv
60.4154 94.1778 li
60.4154 94.0518 li
60.4154 93.4778 60.2194 93.0298 59.8414 92.7078 cv
59.4634 92.3998 58.9314 92.2318 58.2454 92.2318 cv
57.7974 92.2318 57.3774 92.2878 56.9574 92.3998 cv
56.5374 92.5118 56.1454 92.6658 55.7674 92.8618 cv
55.7674 91.6998 li
56.2154 91.5318 56.6634 91.3918 57.0974 91.3078 cv
57.5314 91.2238 57.9514 91.1678 58.3714 91.1678 cv
59.4774 91.1678 60.3034 91.4618 60.8494 92.0358 cv
61.3954 92.6098 61.6754 93.4778 61.6754 94.6398 cv
f
64.2654 91.3498 mo
65.5254 91.3498 li
65.5254 99.0078 li
64.2654 99.0078 li
64.2654 91.3498 li
64.2654 88.3678 mo
65.5254 88.3678 li
65.5254 89.9638 li
64.2654 89.9638 li
64.2654 88.3678 li
f
73.1974 92.5118 mo
73.1974 88.3678 li
74.4574 88.3678 li
74.4574 99.0078 li
73.1974 99.0078 li
73.1974 97.8598 li
72.9314 98.3218 72.5954 98.6578 72.1894 98.8678 cv
71.7834 99.0778 71.3074 99.1898 70.7474 99.1898 cv
69.8234 99.1898 69.0674 98.8258 68.4794 98.0978 cv
67.8914 97.3698 67.6114 96.3898 67.6114 95.1858 cv
67.6114 93.9818 67.8914 93.0158 68.4794 92.2738 cv
69.0674 91.5458 69.8234 91.1678 70.7474 91.1678 cv
71.3074 91.1678 71.7834 91.2798 72.1894 91.5038 cv
72.5954 91.7278 72.9314 92.0638 73.1974 92.5118 cv
68.9134 95.1858 mo
68.9134 96.1098 69.0954 96.8378 69.4734 97.3698 cv
69.8514 97.9018 70.3834 98.1538 71.0554 98.1538 cv
71.7134 98.1538 72.2314 97.9018 72.6234 97.3698 cv
73.0014 96.8378 73.1974 96.1098 73.1974 95.1858 cv
73.1974 94.2618 73.0014 93.5478 72.6234 93.0158 cv
72.2314 92.4838 71.7134 92.2178 71.0554 92.2178 cv
70.3834 92.2178 69.8514 92.4838 69.4734 93.0158 cv
69.0954 93.5478 68.9134 94.2618 68.9134 95.1858 cv
f
76.9214 95.9838 mo
76.9214 91.3498 li
78.1814 91.3498 li
78.1814 95.9418 li
78.1814 96.6698 78.3214 97.2018 78.6014 97.5658 cv
78.8814 97.9298 79.3014 98.1118 79.8754 98.1118 cv
80.5474 98.1118 81.0934 97.9018 81.4854 97.4678 cv
81.8774 97.0338 82.0734 96.4458 82.0734 95.6898 cv
82.0734 91.3498 li
83.3334 91.3498 li
83.3334 99.0078 li
82.0734 99.0078 li
82.0734 97.8318 li
81.7654 98.3078 81.4014 98.6438 81.0094 98.8678 cv
80.6034 99.0778 80.1414 99.1898 79.6094 99.1898 cv
78.7274 99.1898 78.0554 98.9238 77.6074 98.3778 cv
77.1454 97.8458 76.9214 97.0478 76.9214 95.9838 cv
80.0854 91.1678 mo
80.0854 91.1678 li
f
86.1054 97.2718 mo
87.5474 97.2718 li
87.5474 99.0078 li
86.1054 99.0078 li
86.1054 97.2718 li
f
95.8914 91.6438 mo
95.8914 92.8198 li
95.5274 92.6238 95.1774 92.4838 94.8134 92.3858 cv
94.4494 92.2878 94.0994 92.2318 93.7354 92.2318 cv
92.9234 92.2318 92.2794 92.4978 91.8314 93.0158 cv
91.3834 93.5338 91.1594 94.2618 91.1594 95.1858 cv
91.1594 96.1238 91.3834 96.8518 91.8314 97.3698 cv
92.2794 97.8878 92.9234 98.1398 93.7354 98.1398 cv
94.0994 98.1398 94.4494 98.0978 94.8134 97.9998 cv
95.1774 97.9018 95.5274 97.7478 95.8914 97.5518 cv
95.8914 98.7138 li
95.5274 98.8818 95.1634 99.0078 94.7994 99.0778 cv
94.4214 99.1478 94.0154 99.1898 93.5954 99.1898 cv
92.4474 99.1898 91.5234 98.8398 90.8514 98.1118 cv
90.1654 97.3978 89.8294 96.4178 89.8294 95.1858 cv
89.8294 93.9398 90.1654 92.9598 90.8514 92.2458 cv
91.5374 91.5318 92.4754 91.1678 93.6794 91.1678 cv
94.0714 91.1678 94.4494 91.2098 94.8134 91.2938 cv
95.1774 91.3778 95.5414 91.4898 95.8914 91.6438 cv
f
101.043 92.2318 mo
100.371 92.2318 99.8394 92.4978 99.4474 93.0298 cv
99.0554 93.5618 98.8594 94.2758 98.8594 95.1858 cv
98.8594 96.1098 99.0414 96.8238 99.4334 97.3558 cv
99.8254 97.8878 100.357 98.1398 101.043 98.1398 cv
101.715 98.1398 102.247 97.8878 102.639 97.3558 cv
103.031 96.8238 103.227 96.1098 103.227 95.1858 cv
103.227 94.2898 103.031 93.5618 102.639 93.0298 cv
102.247 92.4978 101.715 92.2318 101.043 92.2318 cv
101.043 91.1678 mo
102.135 91.1678 102.989 91.5318 103.619 92.2318 cv
104.235 92.9458 104.557 93.9258 104.557 95.1858 cv
104.557 96.4458 104.235 97.4258 103.619 98.1258 cv
102.989 98.8398 102.135 99.1898 101.043 99.1898 cv
99.9374 99.1898 99.0694 98.8398 98.4534 98.1258 cv
97.8374 97.4258 97.5294 96.4458 97.5294 95.1858 cv
97.5294 93.9258 97.8374 92.9458 98.4534 92.2318 cv
99.0694 91.5318 99.9374 91.1678 101.043 91.1678 cv
f
112.607 92.8198 mo
112.915 92.2598 113.293 91.8538 113.727 91.5738 cv
114.161 91.3078 114.679 91.1678 115.281 91.1678 cv
116.065 91.1678 116.681 91.4478 117.115 92.0078 cv
117.549 92.5678 117.773 93.3658 117.773 94.3878 cv
117.773 99.0078 li
116.513 99.0078 li
116.513 94.4298 li
116.513 93.7018 116.373 93.1558 116.121 92.7918 cv
115.855 92.4418 115.463 92.2598 114.931 92.2598 cv
114.273 92.2598 113.755 92.4838 113.377 92.9178 cv
112.999 93.3518 112.817 93.9398 112.817 94.6818 cv
112.817 99.0078 li
111.557 99.0078 li
111.557 94.4298 li
111.557 93.7018 111.417 93.1558 111.165 92.7918 cv
110.899 92.4418 110.493 92.2598 109.961 92.2598 cv
109.317 92.2598 108.799 92.4838 108.421 92.9178 cv
108.043 93.3518 107.861 93.9398 107.861 94.6818 cv
107.861 99.0078 li
106.601 99.0078 li
106.601 91.3498 li
107.861 91.3498 li
107.861 92.5398 li
108.141 92.0778 108.491 91.7278 108.897 91.5038 cv
109.289 91.2798 109.765 91.1678 110.325 91.1678 cv
110.885 91.1678 111.347 91.3078 111.739 91.5878 cv
112.131 91.8678 112.411 92.2878 112.607 92.8198 cv
f
125.959 108.095 mo
122.459 108.095 li
f
125.959 108.095 mo
122.459 108.095 li
@
18.8052 112.267 mo
18.8052 116.313 li
17.5452 116.313 li
17.5452 105.757 li
18.8052 105.757 li
18.8052 106.919 li
19.0572 106.471 19.3932 106.135 19.7992 105.911 cv
20.2052 105.687 20.6952 105.575 21.2552 105.575 cv
22.1792 105.575 22.9352 105.953 23.5232 106.681 cv
24.0972 107.423 24.3912 108.389 24.3912 109.593 cv
24.3912 110.797 24.0972 111.777 23.5232 112.505 cv
22.9352 113.233 22.1792 113.597 21.2552 113.597 cv
20.6952 113.597 20.2052 113.485 19.7992 113.275 cv
19.3932 113.065 19.0572 112.729 18.8052 112.267 cv
23.0892 109.593 mo
23.0892 108.669 22.8932 107.955 22.5152 107.423 cv
22.1232 106.891 21.6052 106.625 20.9472 106.625 cv
20.2752 106.625 19.7572 106.891 19.3792 107.423 cv
18.9872 107.955 18.8052 108.669 18.8052 109.593 cv
18.8052 110.517 18.9872 111.245 19.3792 111.777 cv
19.7572 112.309 20.2752 112.561 20.9472 112.561 cv
21.6052 112.561 22.1232 112.309 22.5152 111.777 cv
22.8932 111.245 23.0892 110.517 23.0892 109.593 cv
f
29.4452 106.639 mo
28.7732 106.639 28.2412 106.905 27.8492 107.437 cv
27.4572 107.969 27.2612 108.683 27.2612 109.593 cv
27.2612 110.517 27.4432 111.231 27.8352 111.763 cv
28.2272 112.295 28.7592 112.547 29.4452 112.547 cv
30.1172 112.547 30.6492 112.295 31.0411 111.763 cv
31.4331 111.231 31.6291 110.517 31.6291 109.593 cv
31.6291 108.697 31.4331 107.969 31.0411 107.437 cv
30.6492 106.905 30.1172 106.639 29.4452 106.639 cv
29.4452 105.575 mo
30.5372 105.575 31.3911 105.939 32.0211 106.639 cv
32.6371 107.353 32.9591 108.333 32.9591 109.593 cv
32.9591 110.853 32.6371 111.833 32.0211 112.533 cv
31.3911 113.247 30.5372 113.597 29.4452 113.597 cv
28.3392 113.597 27.4712 113.247 26.8552 112.533 cv
26.2392 111.833 25.9312 110.853 25.9312 109.593 cv
25.9312 108.333 26.2392 107.353 26.8552 106.639 cv
27.4712 105.939 28.3392 105.575 29.4452 105.575 cv
f
39.9311 105.981 mo
39.9311 107.171 li
39.5671 107.003 39.2031 106.863 38.8251 106.765 cv
38.4331 106.681 38.0411 106.625 37.6351 106.625 cv
37.0051 106.625 36.5291 106.723 36.2211 106.919 cv
35.9131 107.115 35.7591 107.395 35.7591 107.773 cv
35.7591 108.067 35.8711 108.291 36.0951 108.459 cv
36.3191 108.627 36.7671 108.795 37.4391 108.935 cv
37.8731 109.033 li
38.7691 109.229 39.3991 109.509 39.7771 109.845 cv
40.1411 110.195 40.3371 110.685 40.3371 111.301 cv
40.3371 112.015 40.0571 112.575 39.4971 112.981 cv
38.9371 113.401 38.1531 113.597 37.1731 113.597 cv
36.7531 113.597 36.3331 113.555 35.8851 113.485 cv
35.4371 113.415 34.9751 113.303 34.4851 113.135 cv
34.4851 111.833 li
34.9471 112.085 35.4091 112.267 35.8571 112.379 cv
36.3051 112.505 36.7531 112.561 37.2011 112.561 cv
37.7891 112.561 38.2511 112.463 38.5731 112.267 cv
38.8811 112.071 39.0491 111.777 39.0491 111.399 cv
39.0491 111.063 38.9231 110.797 38.6991 110.615 cv
38.4751 110.433 37.9711 110.251 37.1871 110.083 cv
36.7531 109.985 li
35.9691 109.817 35.3951 109.565 35.0591 109.229 cv
34.7091 108.893 34.5411 108.431 34.5411 107.829 cv
34.5411 107.115 34.7931 106.555 35.2971 106.163 cv
35.8011 105.771 36.5291 105.575 37.4811 105.575 cv
37.9431 105.575 38.3771 105.617 38.7971 105.687 cv
39.2031 105.757 39.5811 105.855 39.9311 105.981 cv
f
42.5211 111.679 mo
43.9631 111.679 li
43.9631 113.415 li
42.5211 113.415 li
42.5211 111.679 li
f
52.2931 109.593 mo
52.2931 108.669 52.0971 107.955 51.7191 107.423 cv
51.3271 106.891 50.8091 106.625 50.1511 106.625 cv
49.4791 106.625 48.9611 106.891 48.5831 107.423 cv
48.1911 107.955 48.0091 108.669 48.0091 109.593 cv
48.0091 110.517 48.1911 111.245 48.5831 111.777 cv
48.9611 112.309 49.4791 112.561 50.1511 112.561 cv
50.8091 112.561 51.3271 112.309 51.7191 111.777 cv
52.0971 111.245 52.2931 110.517 52.2931 109.593 cv
48.0091 106.919 mo
48.2611 106.471 48.5971 106.135 49.0031 105.911 cv
49.4091 105.687 49.8991 105.575 50.4591 105.575 cv
51.3831 105.575 52.1391 105.953 52.7271 106.681 cv
53.3011 107.423 53.5951 108.389 53.5951 109.593 cv
53.5951 110.797 53.3011 111.777 52.7271 112.505 cv
52.1391 113.233 51.3831 113.597 50.4591 113.597 cv
49.8991 113.597 49.4091 113.485 49.0031 113.275 cv
48.5971 113.065 48.2611 112.729 48.0091 112.267 cv
48.0091 113.415 li
46.7491 113.415 li
46.7491 102.775 li
48.0091 102.775 li
48.0091 106.919 li
f
59.1671 109.565 mo
58.1451 109.565 57.4451 109.691 57.0531 109.915 cv
56.6611 110.153 56.4651 110.545 56.4651 111.105 cv
56.4651 111.553 56.6051 111.917 56.8991 112.169 cv
57.1931 112.435 57.5991 112.561 58.1031 112.561 cv
58.8031 112.561 59.3631 112.323 59.7831 111.819 cv
60.2031 111.329 60.4131 110.671 60.4131 109.845 cv
60.4131 109.565 li
59.1671 109.565 li
61.6731 109.047 mo
61.6731 113.415 li
60.4131 113.415 li
60.4131 112.253 li
60.1191 112.729 59.7551 113.065 59.3351 113.275 cv
58.9151 113.485 58.3831 113.597 57.7671 113.597 cv
56.9831 113.597 56.3531 113.387 55.8911 112.953 cv
55.4291 112.519 55.2051 111.931 55.2051 111.189 cv
55.2051 110.335 55.4851 109.691 56.0731 109.243 cv
56.6471 108.809 57.5011 108.585 58.6491 108.585 cv
60.4131 108.585 li
60.4131 108.459 li
60.4131 107.885 60.2171 107.437 59.8391 107.115 cv
59.4611 106.807 58.9291 106.639 58.2431 106.639 cv
57.7951 106.639 57.3751 106.695 56.9551 106.807 cv
56.5351 106.919 56.1431 107.073 55.7651 107.269 cv
55.7651 106.107 li
56.2131 105.939 56.6611 105.799 57.0951 105.715 cv
57.5291 105.631 57.9491 105.575 58.3691 105.575 cv
59.4751 105.575 60.3011 105.869 60.8471 106.443 cv
61.3931 107.017 61.6731 107.885 61.6731 109.047 cv
f
64.2631 105.757 mo
65.5231 105.757 li
65.5231 113.415 li
64.2631 113.415 li
64.2631 105.757 li
64.2631 102.775 mo
65.5231 102.775 li
65.5231 104.371 li
64.2631 104.371 li
64.2631 102.775 li
f
73.1951 106.919 mo
73.1951 102.775 li
74.4551 102.775 li
74.4551 113.415 li
73.1951 113.415 li
73.1951 112.267 li
72.9291 112.729 72.5931 113.065 72.1871 113.275 cv
71.7811 113.485 71.3051 113.597 70.7451 113.597 cv
69.8211 113.597 69.0651 113.233 68.4771 112.505 cv
67.8891 111.777 67.6091 110.797 67.6091 109.593 cv
67.6091 108.389 67.8891 107.423 68.4771 106.681 cv
69.0651 105.953 69.8211 105.575 70.7451 105.575 cv
71.3051 105.575 71.7811 105.687 72.1871 105.911 cv
72.5931 106.135 72.9291 106.471 73.1951 106.919 cv
68.9111 109.593 mo
68.9111 110.517 69.0931 111.245 69.4711 111.777 cv
69.8491 112.309 70.3811 112.561 71.0531 112.561 cv
71.7111 112.561 72.2291 112.309 72.6211 111.777 cv
72.9991 111.245 73.1951 110.517 73.1951 109.593 cv
73.1951 108.669 72.9991 107.955 72.6211 107.423 cv
72.2291 106.891 71.7111 106.625 71.0531 106.625 cv
70.3811 106.625 69.8491 106.891 69.4711 107.423 cv
69.0931 107.955 68.9111 108.669 68.9111 109.593 cv
f
76.9191 110.391 mo
76.9191 105.757 li
78.1791 105.757 li
78.1791 110.349 li
78.1791 111.077 78.3191 111.609 78.5991 111.973 cv
78.8791 112.337 79.2991 112.519 79.8731 112.519 cv
80.5451 112.519 81.0911 112.309 81.4831 111.875 cv
81.8751 111.441 82.0711 110.853 82.0711 110.097 cv
82.0711 105.757 li
83.3311 105.757 li
83.3311 113.415 li
82.0711 113.415 li
82.0711 112.239 li
81.7631 112.715 81.3991 113.051 81.0071 113.275 cv
80.6011 113.485 80.1391 113.597 79.6071 113.597 cv
78.7251 113.597 78.0531 113.331 77.6051 112.785 cv
77.1431 112.253 76.9191 111.455 76.9191 110.391 cv
80.0831 105.575 mo
80.0831 105.575 li
f
86.1031 111.679 mo
87.5451 111.679 li
87.5451 113.415 li
86.1031 113.415 li
86.1031 111.679 li
f
95.8891 106.051 mo
95.8891 107.227 li
95.5251 107.031 95.1751 106.891 94.8111 106.793 cv
94.4471 106.695 94.0971 106.639 93.7331 106.639 cv
92.9211 106.639 92.2771 106.905 91.8291 107.423 cv
91.3811 107.941 91.1571 108.669 91.1571 109.593 cv
91.1571 110.531 91.3811 111.259 91.8291 111.777 cv
92.2771 112.295 92.9211 112.547 93.7331 112.547 cv
94.0971 112.547 94.4471 112.505 94.8111 112.407 cv
95.1751 112.309 95.5251 112.155 95.8891 111.959 cv
95.8891 113.121 li
95.5251 113.289 95.1611 113.415 94.7971 113.485 cv
94.4191 113.555 94.0131 113.597 93.5931 113.597 cv
92.4451 113.597 91.5211 113.247 90.8491 112.519 cv
90.1631 111.805 89.8271 110.825 89.8271 109.593 cv
89.8271 108.347 90.1631 107.367 90.8491 106.653 cv
91.5351 105.939 92.4731 105.575 93.6771 105.575 cv
94.0691 105.575 94.4471 105.617 94.8111 105.701 cv
95.1751 105.785 95.5391 105.897 95.8891 106.051 cv
f
101.041 106.639 mo
100.369 106.639 99.8371 106.905 99.4451 107.437 cv
99.0531 107.969 98.8571 108.683 98.8571 109.593 cv
98.8571 110.517 99.0391 111.231 99.4311 111.763 cv
99.8231 112.295 100.355 112.547 101.041 112.547 cv
101.713 112.547 102.245 112.295 102.637 111.763 cv
103.029 111.231 103.225 110.517 103.225 109.593 cv
103.225 108.697 103.029 107.969 102.637 107.437 cv
102.245 106.905 101.713 106.639 101.041 106.639 cv
101.041 105.575 mo
102.133 105.575 102.987 105.939 103.617 106.639 cv
104.233 107.353 104.555 108.333 104.555 109.593 cv
104.555 110.853 104.233 111.833 103.617 112.533 cv
102.987 113.247 102.133 113.597 101.041 113.597 cv
99.9351 113.597 99.0671 113.247 98.4511 112.533 cv
97.8351 111.833 97.5271 110.853 97.5271 109.593 cv
97.5271 108.333 97.8351 107.353 98.4511 106.639 cv
99.0671 105.939 99.9351 105.575 101.041 105.575 cv
f
112.605 107.227 mo
112.913 106.667 113.291 106.261 113.725 105.981 cv
114.159 105.715 114.677 105.575 115.279 105.575 cv
116.063 105.575 116.679 105.855 117.113 106.415 cv
117.547 106.975 117.771 107.773 117.771 108.795 cv
117.771 113.415 li
116.511 113.415 li
116.511 108.837 li
116.511 108.109 116.371 107.563 116.119 107.199 cv
115.853 106.849 115.461 106.667 114.929 106.667 cv
114.271 106.667 113.753 106.891 113.375 107.325 cv
112.997 107.759 112.815 108.347 112.815 109.089 cv
112.815 113.415 li
111.555 113.415 li
111.555 108.837 li
111.555 108.109 111.415 107.563 111.163 107.199 cv
110.897 106.849 110.491 106.667 109.959 106.667 cv
109.315 106.667 108.797 106.891 108.419 107.325 cv
108.041 107.759 107.859 108.347 107.859 109.089 cv
107.859 113.415 li
106.599 113.415 li
106.599 105.757 li
107.859 105.757 li
107.859 106.947 li
108.139 106.485 108.489 106.135 108.895 105.911 cv
109.287 105.687 109.763 105.575 110.323 105.575 cv
110.883 105.575 111.345 105.715 111.737 105.995 cv
112.129 106.275 112.409 106.695 112.605 107.227 cv
f
125.959 122.502 mo
122.459 122.502 li
f
125.959 122.502 mo
122.459 122.502 li
@
37.3588 124.001 mo
37.3588 124.925 37.5408 125.653 37.9188 126.185 cv
38.2968 126.717 38.8288 126.969 39.5008 126.969 cv
40.1588 126.969 40.6768 126.717 41.0688 126.185 cv
41.4468 125.653 41.6428 124.925 41.6428 124.001 cv
41.6428 123.077 41.4468 122.363 41.0688 121.831 cv
40.6768 121.299 40.1588 121.033 39.5008 121.033 cv
38.8288 121.033 38.2968 121.299 37.9188 121.831 cv
37.5408 122.363 37.3588 123.077 37.3588 124.001 cv
41.6428 126.675 mo
41.3768 127.137 41.0408 127.473 40.6348 127.683 cv
40.2288 127.893 39.7528 128.005 39.1928 128.005 cv
38.2688 128.005 37.5128 127.641 36.9248 126.913 cv
36.3368 126.185 36.0568 125.205 36.0568 124.001 cv
36.0568 122.797 36.3368 121.831 36.9248 121.089 cv
37.5128 120.361 38.2688 119.983 39.1928 119.983 cv
39.7528 119.983 40.2288 120.095 40.6348 120.319 cv
41.0408 120.543 41.3768 120.879 41.6428 121.327 cv
41.6428 120.165 li
42.9028 120.165 li
42.9028 130.721 li
41.6428 130.721 li
41.6428 126.675 li
f
45.4928 120.165 mo
46.7528 120.165 li
46.7528 127.823 li
45.4928 127.823 li
45.4928 120.165 li
45.4928 117.183 mo
46.7528 117.183 li
46.7528 118.779 li
45.4928 118.779 li
45.4928 117.183 li
f
55.7548 123.203 mo
55.7548 127.823 li
54.4948 127.823 li
54.4948 123.245 li
54.4948 122.517 54.3408 121.985 54.0608 121.621 cv
53.7808 121.257 53.3608 121.075 52.8008 121.075 cv
52.1148 121.075 51.5828 121.299 51.1908 121.733 cv
50.7988 122.167 50.6028 122.755 50.6028 123.497 cv
50.6028 127.823 li
49.3428 127.823 li
49.3428 120.165 li
50.6028 120.165 li
50.6028 121.355 li
50.8968 120.907 51.2468 120.557 51.6668 120.333 cv
52.0728 120.109 52.5488 119.983 53.0808 119.983 cv
53.9488 119.983 54.6208 120.263 55.0688 120.809 cv
55.5168 121.355 55.7548 122.153 55.7548 123.203 cv
f
63.3008 123.903 mo
63.3008 123.007 63.1048 122.293 62.7408 121.789 cv
62.3628 121.285 61.8308 121.033 61.1588 121.033 cv
60.4868 121.033 59.9548 121.285 59.5768 121.789 cv
59.1988 122.293 59.0168 123.007 59.0168 123.903 cv
59.0168 124.813 59.1988 125.513 59.5768 126.017 cv
59.9548 126.521 60.4868 126.773 61.1588 126.773 cv
61.8308 126.773 62.3628 126.521 62.7408 126.017 cv
63.1048 125.513 63.3008 124.813 63.3008 123.903 cv
64.5608 126.871 mo
64.5608 128.159 64.2668 129.125 63.6928 129.769 cv
63.1048 130.399 62.2228 130.721 61.0328 130.721 cv
60.5848 130.721 60.1788 130.679 59.7868 130.623 cv
59.3948 130.553 59.0028 130.455 58.6388 130.315 cv
58.6388 129.097 li
59.0028 129.293 59.3668 129.433 59.7308 129.531 cv
60.0948 129.629 60.4588 129.685 60.8368 129.685 cv
61.6488 129.685 62.2648 129.461 62.6848 129.041 cv
63.0908 128.607 63.3008 127.963 63.3008 127.095 cv
63.3008 126.479 li
63.0348 126.927 62.6988 127.263 62.2928 127.487 cv
61.8868 127.711 61.4108 127.823 60.8508 127.823 cv
59.8988 127.823 59.1428 127.473 58.5688 126.759 cv
57.9948 126.045 57.7148 125.093 57.7148 123.903 cv
57.7148 122.727 57.9948 121.775 58.5688 121.061 cv
59.1428 120.347 59.8988 119.983 60.8508 119.983 cv
61.4108 119.983 61.8868 120.095 62.2928 120.319 cv
62.6988 120.543 63.0348 120.879 63.3008 121.327 cv
63.3008 120.165 li
64.5608 120.165 li
64.5608 126.871 li
f
67.3328 126.087 mo
68.7748 126.087 li
68.7748 127.823 li
67.3328 127.823 li
67.3328 126.087 li
f
70.8748 120.165 mo
72.1348 120.165 li
73.7028 126.143 li
75.2708 120.165 li
76.7548 120.165 li
78.3228 126.143 li
79.8908 120.165 li
81.1508 120.165 li
79.1488 127.823 li
77.6648 127.823 li
76.0128 121.551 li
74.3608 127.823 li
72.8768 127.823 li
70.8748 120.165 li
f
84.2728 126.675 mo
84.2728 130.721 li
83.0128 130.721 li
83.0128 120.165 li
84.2728 120.165 li
84.2728 121.327 li
84.5248 120.879 84.8608 120.543 85.2668 120.319 cv
85.6728 120.095 86.1628 119.983 86.7228 119.983 cv
87.6468 119.983 88.4028 120.361 88.9908 121.089 cv
89.5648 121.831 89.8588 122.797 89.8588 124.001 cv
89.8588 125.205 89.5648 126.185 88.9908 126.913 cv
88.4028 127.641 87.6468 128.005 86.7228 128.005 cv
86.1628 128.005 85.6728 127.893 85.2668 127.683 cv
84.8608 127.473 84.5248 127.137 84.2728 126.675 cv
88.5568 124.001 mo
88.5568 123.077 88.3608 122.363 87.9828 121.831 cv
87.5908 121.299 87.0728 121.033 86.4148 121.033 cv
85.7428 121.033 85.2248 121.299 84.8468 121.831 cv
84.4548 122.363 84.2728 123.077 84.2728 124.001 cv
84.2728 124.925 84.4548 125.653 84.8468 126.185 cv
85.2248 126.717 85.7428 126.969 86.4148 126.969 cv
87.0728 126.969 87.5908 126.717 87.9828 126.185 cv
88.3608 125.653 88.5568 124.925 88.5568 124.001 cv
f
96.8308 120.389 mo
96.8308 121.579 li
96.4668 121.411 96.1028 121.271 95.7248 121.173 cv
95.3328 121.089 94.9408 121.033 94.5348 121.033 cv
93.9048 121.033 93.4288 121.131 93.1208 121.327 cv
92.8128 121.523 92.6588 121.803 92.6588 122.181 cv
92.6588 122.475 92.7708 122.699 92.9948 122.867 cv
93.2188 123.035 93.6668 123.203 94.3388 123.343 cv
94.7728 123.441 li
95.6688 123.637 96.2988 123.917 96.6768 124.253 cv
97.0408 124.603 97.2368 125.093 97.2368 125.709 cv
97.2368 126.423 96.9568 126.983 96.3968 127.389 cv
95.8368 127.809 95.0528 128.005 94.0728 128.005 cv
93.6528 128.005 93.2328 127.963 92.7848 127.893 cv
92.3368 127.823 91.8748 127.711 91.3848 127.543 cv
91.3848 126.241 li
91.8468 126.493 92.3088 126.675 92.7568 126.787 cv
93.2048 126.913 93.6528 126.969 94.1008 126.969 cv
94.6888 126.969 95.1508 126.871 95.4728 126.675 cv
95.7808 126.479 95.9488 126.185 95.9488 125.807 cv
95.9488 125.471 95.8228 125.205 95.5988 125.023 cv
95.3748 124.841 94.8708 124.659 94.0868 124.491 cv
93.6528 124.393 li
92.8688 124.225 92.2948 123.973 91.9588 123.637 cv
91.6088 123.301 91.4408 122.839 91.4408 122.237 cv
91.4408 121.523 91.6928 120.963 92.1968 120.571 cv
92.7008 120.179 93.4288 119.983 94.3808 119.983 cv
94.8428 119.983 95.2768 120.025 95.6968 120.095 cv
96.1028 120.165 96.4808 120.263 96.8308 120.389 cv
f
99.4208 126.087 mo
100.863 126.087 li
100.863 127.823 li
99.4208 127.823 li
99.4208 126.087 li
f
109.207 120.459 mo
109.207 121.635 li
108.843 121.439 108.493 121.299 108.129 121.201 cv
107.765 121.103 107.415 121.047 107.051 121.047 cv
106.239 121.047 105.595 121.313 105.147 121.831 cv
104.699 122.349 104.475 123.077 104.475 124.001 cv
104.475 124.939 104.699 125.667 105.147 126.185 cv
105.595 126.703 106.239 126.955 107.051 126.955 cv
107.415 126.955 107.765 126.913 108.129 126.815 cv
108.493 126.717 108.843 126.563 109.207 126.367 cv
109.207 127.529 li
108.843 127.697 108.479 127.823 108.115 127.893 cv
107.737 127.963 107.331 128.005 106.911 128.005 cv
105.763 128.005 104.839 127.655 104.167 126.927 cv
103.481 126.213 103.145 125.233 103.145 124.001 cv
103.145 122.755 103.481 121.775 104.167 121.061 cv
104.853 120.347 105.791 119.983 106.995 119.983 cv
107.387 119.983 107.765 120.025 108.129 120.109 cv
108.493 120.193 108.857 120.305 109.207 120.459 cv
f
117.761 123.203 mo
117.761 127.823 li
116.501 127.823 li
116.501 123.245 li
116.501 122.517 116.347 121.985 116.067 121.621 cv
115.787 121.257 115.367 121.075 114.807 121.075 cv
114.121 121.075 113.589 121.299 113.197 121.733 cv
112.805 122.167 112.609 122.755 112.609 123.497 cv
112.609 127.823 li
111.349 127.823 li
111.349 120.165 li
112.609 120.165 li
112.609 121.355 li
112.903 120.907 113.253 120.557 113.673 120.333 cv
114.079 120.109 114.555 119.983 115.087 119.983 cv
115.955 119.983 116.627 120.263 117.075 120.809 cv
117.523 121.355 117.761 122.153 117.761 123.203 cv
f
125.959 136.91 mo
122.459 136.91 li
f
125.959 136.91 mo
122.459 136.91 li
@
65.6606 134.796 mo
65.6606 135.986 li
65.2966 135.818 64.9326 135.678 64.5546 135.58 cv
64.1626 135.496 63.7706 135.44 63.3646 135.44 cv
62.7346 135.44 62.2586 135.538 61.9506 135.734 cv
61.6426 135.93 61.4886 136.21 61.4886 136.588 cv
61.4886 136.882 61.6006 137.106 61.8246 137.274 cv
62.0486 137.442 62.4966 137.61 63.1686 137.75 cv
63.6026 137.848 li
64.4986 138.044 65.1286 138.324 65.5066 138.66 cv
65.8706 139.01 66.0666 139.5 66.0666 140.116 cv
66.0666 140.83 65.7866 141.39 65.2266 141.796 cv
64.6666 142.216 63.8826 142.412 62.9026 142.412 cv
62.4826 142.412 62.0626 142.37 61.6146 142.3 cv
61.1666 142.23 60.7046 142.118 60.2146 141.95 cv
60.2146 140.648 li
60.6766 140.9 61.1386 141.082 61.5866 141.194 cv
62.0346 141.32 62.4826 141.376 62.9306 141.376 cv
63.5186 141.376 63.9806 141.278 64.3026 141.082 cv
64.6106 140.886 64.7786 140.592 64.7786 140.214 cv
64.7786 139.878 64.6526 139.612 64.4286 139.43 cv
64.2046 139.248 63.7006 139.066 62.9166 138.898 cv
62.4826 138.8 li
61.6986 138.632 61.1246 138.38 60.7886 138.044 cv
60.4386 137.708 60.2706 137.246 60.2706 136.644 cv
60.2706 135.93 60.5226 135.37 61.0266 134.978 cv
61.5306 134.586 62.2586 134.39 63.2106 134.39 cv
63.6726 134.39 64.1066 134.432 64.5266 134.502 cv
64.9326 134.572 65.3106 134.67 65.6606 134.796 cv
f
68.2506 140.494 mo
69.6926 140.494 li
69.6926 142.23 li
68.2506 142.23 li
68.2506 140.494 li
f
76.8886 136.728 mo
77.5466 136.868 78.0646 137.162 78.4286 137.61 cv
78.7926 138.058 78.9886 138.618 78.9886 139.262 cv
78.9886 140.27 78.6386 141.054 77.9526 141.6 cv
77.2526 142.146 76.2726 142.412 74.9986 142.412 cv
74.5646 142.412 74.1166 142.37 73.6686 142.286 cv
73.2206 142.216 72.7446 142.09 72.2686 141.922 cv
72.2686 140.592 li
72.6466 140.816 73.0666 140.984 73.5286 141.096 cv
73.9766 141.208 74.4526 141.264 74.9566 141.264 cv
75.8246 141.264 76.4826 141.096 76.9306 140.76 cv
77.3786 140.424 77.6166 139.92 77.6166 139.262 cv
77.6166 138.674 77.4066 138.198 76.9866 137.862 cv
76.5666 137.526 75.9786 137.344 75.2226 137.344 cv
74.0326 137.344 li
74.0326 136.21 li
75.2786 136.21 li
75.9506 136.21 76.4686 136.084 76.8326 135.804 cv
77.1966 135.538 77.3786 135.146 77.3786 134.628 cv
77.3786 134.11 77.1826 133.704 76.8186 133.424 cv
76.4406 133.144 75.9086 133.004 75.2226 133.004 cv
74.8446 133.004 74.4386 133.046 74.0046 133.13 cv
73.5706 133.214 73.0946 133.34 72.5766 133.508 cv
72.5766 132.276 li
73.0946 132.136 73.5846 132.024 74.0466 131.954 cv
74.4946 131.884 74.9286 131.842 75.3486 131.842 cv
76.3846 131.842 77.2106 132.08 77.8266 132.556 cv
78.4426 133.032 78.7506 133.676 78.7506 134.488 cv
78.7506 135.048 78.5826 135.524 78.2606 135.916 cv
77.9386 136.308 77.4766 136.588 76.8886 136.728 cv
f
84.7286 136.574 mo
84.1126 136.574 83.6226 136.798 83.2586 137.218 cv
82.8946 137.638 82.7126 138.226 82.7126 138.954 cv
82.7126 139.696 82.8946 140.284 83.2586 140.704 cv
83.6226 141.124 84.1126 141.334 84.7286 141.334 cv
85.3446 141.334 85.8346 141.124 86.1986 140.704 cv
86.5626 140.284 86.7446 139.696 86.7446 138.954 cv
86.7446 138.226 86.5626 137.638 86.1986 137.218 cv
85.8346 136.798 85.3446 136.574 84.7286 136.574 cv
87.4726 132.248 mo
87.4726 133.508 li
87.1226 133.34 86.7726 133.214 86.4226 133.13 cv
86.0586 133.046 85.7086 133.004 85.3726 133.004 cv
84.4486 133.004 83.7486 133.312 83.2726 133.928 cv
82.7966 134.544 82.5166 135.482 82.4606 136.714 cv
82.7266 136.322 83.0626 136.014 83.4686 135.804 cv
83.8746 135.594 84.3226 135.482 84.8126 135.482 cv
85.8346 135.482 86.6466 135.804 87.2346 136.42 cv
87.8226 137.036 88.1306 137.89 88.1306 138.954 cv
88.1306 140.004 87.8086 140.844 87.1926 141.474 cv
86.5766 142.104 85.7506 142.412 84.7286 142.412 cv
83.5526 142.412 82.6426 141.964 82.0266 141.068 cv
81.3966 140.172 81.0886 138.856 81.0886 137.134 cv
81.0886 135.524 81.4666 134.236 82.2366 133.284 cv
82.9926 132.332 84.0286 131.842 85.3166 131.842 cv
85.6526 131.842 86.0026 131.884 86.3666 131.94 cv
86.7166 132.01 87.0806 132.108 87.4726 132.248 cv
f
93.4646 132.934 mo
92.7506 132.934 92.2186 133.284 91.8546 133.984 cv
91.4906 134.684 91.3226 135.734 91.3226 137.134 cv
91.3226 138.534 91.4906 139.584 91.8546 140.284 cv
92.2186 140.984 92.7506 141.334 93.4646 141.334 cv
94.1786 141.334 94.7106 140.984 95.0746 140.284 cv
95.4246 139.584 95.6066 138.534 95.6066 137.134 cv
95.6066 135.734 95.4246 134.684 95.0746 133.984 cv
94.7106 133.284 94.1786 132.934 93.4646 132.934 cv
93.4646 131.842 mo
94.5986 131.842 95.4666 132.304 96.0826 133.2 cv
96.6846 134.11 96.9926 135.426 96.9926 137.134 cv
96.9926 138.856 96.6846 140.172 96.0826 141.068 cv
95.4666 141.964 94.5986 142.412 93.4646 142.412 cv
92.3166 142.412 91.4346 141.964 90.8326 141.068 cv
90.2306 140.172 89.9366 138.856 89.9366 137.134 cv
89.9366 135.426 90.2306 134.11 90.8326 133.2 cv
91.4346 132.304 92.3166 131.842 93.4646 131.842 cv
f
99.4146 140.494 mo
100.857 140.494 li
100.857 142.23 li
99.4146 142.23 li
99.4146 140.494 li
f
109.201 134.866 mo
109.201 136.042 li
108.837 135.846 108.487 135.706 108.123 135.608 cv
107.759 135.51 107.409 135.454 107.045 135.454 cv
106.233 135.454 105.589 135.72 105.141 136.238 cv
104.693 136.756 104.469 137.484 104.469 138.408 cv
104.469 139.346 104.693 140.074 105.141 140.592 cv
105.589 141.11 106.233 141.362 107.045 141.362 cv
107.409 141.362 107.759 141.32 108.123 141.222 cv
108.487 141.124 108.837 140.97 109.201 140.774 cv
109.201 141.936 li
108.837 142.104 108.473 142.23 108.109 142.3 cv
107.731 142.37 107.325 142.412 106.905 142.412 cv
105.757 142.412 104.833 142.062 104.161 141.334 cv
103.475 140.62 103.139 139.64 103.139 138.408 cv
103.139 137.162 103.475 136.182 104.161 135.468 cv
104.847 134.754 105.785 134.39 106.989 134.39 cv
107.381 134.39 107.759 134.432 108.123 134.516 cv
108.487 134.6 108.851 134.712 109.201 134.866 cv
f
117.755 137.61 mo
117.755 142.23 li
116.495 142.23 li
116.495 137.652 li
116.495 136.924 116.341 136.392 116.061 136.028 cv
115.781 135.664 115.361 135.482 114.801 135.482 cv
114.115 135.482 113.583 135.706 113.191 136.14 cv
112.799 136.574 112.603 137.162 112.603 137.904 cv
112.603 142.23 li
111.343 142.23 li
111.343 134.572 li
112.603 134.572 li
112.603 135.762 li
112.897 135.314 113.247 134.964 113.667 134.74 cv
114.073 134.516 114.549 134.39 115.081 134.39 cv
115.949 134.39 116.621 134.67 117.069 135.216 cv
117.517 135.762 117.755 136.56 117.755 137.61 cv
f
125.959 151.317 mo
122.459 151.317 li
f
125.959 151.317 mo
122.459 151.317 li
@
15.1873 148.98 mo
16.4473 148.98 li
18.0153 154.958 li
19.5833 148.98 li
21.0673 148.98 li
22.6353 154.958 li
24.2033 148.98 li
25.4633 148.98 li
23.4613 156.638 li
21.9773 156.638 li
20.3253 150.366 li
18.6733 156.638 li
17.1893 156.638 li
15.1873 148.98 li
f
26.6393 148.98 mo
27.8993 148.98 li
29.4673 154.958 li
31.0353 148.98 li
32.5193 148.98 li
34.0873 154.958 li
35.6553 148.98 li
36.9153 148.98 li
34.9133 156.638 li
33.4293 156.638 li
31.7773 150.366 li
30.1253 156.638 li
28.6413 156.638 li
26.6393 148.98 li
f
38.0913 148.98 mo
39.3513 148.98 li
40.9193 154.958 li
42.4873 148.98 li
43.9713 148.98 li
45.5393 154.958 li
47.1073 148.98 li
48.3673 148.98 li
46.3653 156.638 li
44.8813 156.638 li
43.2293 150.366 li
41.5773 156.638 li
40.0933 156.638 li
38.0913 148.98 li
f
50.4533 154.902 mo
51.8953 154.902 li
51.8953 156.638 li
50.4533 156.638 li
50.4533 154.902 li
f
55.1433 155.476 mo
57.3973 155.476 li
57.3973 147.692 li
54.9473 148.182 li
54.9473 146.922 li
57.3833 146.432 li
58.7693 146.432 li
58.7693 155.476 li
61.0233 155.476 li
61.0233 156.638 li
55.1433 156.638 li
55.1433 155.476 li
f
64.9993 155.476 mo
69.8153 155.476 li
69.8153 156.638 li
63.3333 156.638 li
63.3333 155.476 li
63.8513 154.944 64.5653 154.216 65.4753 153.292 cv
66.3713 152.382 66.9453 151.794 67.1833 151.528 cv
67.6313 151.038 67.9393 150.618 68.1073 150.268 cv
68.2753 149.932 68.3733 149.582 68.3733 149.246 cv
68.3733 148.714 68.1773 148.266 67.7993 147.93 cv
67.4213 147.594 66.9313 147.412 66.3153 147.412 cv
65.8813 147.412 65.4193 147.496 64.9433 147.636 cv
64.4673 147.79 63.9493 148.014 63.4033 148.322 cv
63.4033 146.922 li
63.9633 146.698 64.4813 146.53 64.9573 146.418 cv
65.4333 146.306 65.8813 146.25 66.2873 146.25 cv
67.3373 146.25 68.1773 146.516 68.8073 147.048 cv
69.4373 147.58 69.7593 148.28 69.7593 149.162 cv
69.7593 149.582 69.6753 149.988 69.5213 150.352 cv
69.3673 150.73 69.0873 151.178 68.6673 151.682 cv
68.5553 151.822 68.1913 152.2 67.5753 152.83 cv
66.9593 153.46 66.1053 154.342 64.9993 155.476 cv
f
76.8993 151.136 mo
77.5573 151.276 78.0753 151.57 78.4393 152.018 cv
78.8033 152.466 78.9993 153.026 78.9993 153.67 cv
78.9993 154.678 78.6493 155.462 77.9633 156.008 cv
77.2633 156.554 76.2833 156.82 75.0093 156.82 cv
74.5753 156.82 74.1273 156.778 73.6793 156.694 cv
73.2313 156.624 72.7553 156.498 72.2793 156.33 cv
72.2793 155 li
72.6573 155.224 73.0773 155.392 73.5393 155.504 cv
73.9873 155.616 74.4633 155.672 74.9673 155.672 cv
75.8353 155.672 76.4933 155.504 76.9413 155.168 cv
77.3893 154.832 77.6273 154.328 77.6273 153.67 cv
77.6273 153.082 77.4173 152.606 76.9973 152.27 cv
76.5773 151.934 75.9893 151.752 75.2333 151.752 cv
74.0433 151.752 li
74.0433 150.618 li
75.2893 150.618 li
75.9613 150.618 76.4793 150.492 76.8433 150.212 cv
77.2073 149.946 77.3893 149.554 77.3893 149.036 cv
77.3893 148.518 77.1933 148.112 76.8293 147.832 cv
76.4513 147.552 75.9193 147.412 75.2333 147.412 cv
74.8553 147.412 74.4493 147.454 74.0153 147.538 cv
73.5813 147.622 73.1053 147.748 72.5873 147.916 cv
72.5873 146.684 li
73.1053 146.544 73.5953 146.432 74.0573 146.362 cv
74.5053 146.292 74.9393 146.25 75.3593 146.25 cv
76.3953 146.25 77.2213 146.488 77.8373 146.964 cv
78.4533 147.44 78.7613 148.084 78.7613 148.896 cv
78.7613 149.456 78.5933 149.932 78.2713 150.324 cv
77.9493 150.716 77.4873 150.996 76.8993 151.136 cv
f
84.5713 147.342 mo
83.8573 147.342 83.3253 147.692 82.9613 148.392 cv
82.5973 149.092 82.4293 150.142 82.4293 151.542 cv
82.4293 152.942 82.5973 153.992 82.9613 154.692 cv
83.3253 155.392 83.8573 155.742 84.5713 155.742 cv
85.2853 155.742 85.8173 155.392 86.1813 154.692 cv
86.5313 153.992 86.7133 152.942 86.7133 151.542 cv
86.7133 150.142 86.5313 149.092 86.1813 148.392 cv
85.8173 147.692 85.2853 147.342 84.5713 147.342 cv
84.5713 146.25 mo
85.7053 146.25 86.5733 146.712 87.1893 147.608 cv
87.7913 148.518 88.0993 149.834 88.0993 151.542 cv
88.0993 153.264 87.7913 154.58 87.1893 155.476 cv
86.5733 156.372 85.7053 156.82 84.5713 156.82 cv
83.4233 156.82 82.5413 156.372 81.9393 155.476 cv
81.3373 154.58 81.0433 153.264 81.0433 151.542 cv
81.0433 149.834 81.3373 148.518 81.9393 147.608 cv
82.5413 146.712 83.4233 146.25 84.5713 146.25 cv
f
93.6433 150.982 mo
93.0273 150.982 92.5373 151.206 92.1733 151.626 cv
91.8093 152.046 91.6273 152.634 91.6273 153.362 cv
91.6273 154.104 91.8093 154.692 92.1733 155.112 cv
92.5373 155.532 93.0273 155.742 93.6433 155.742 cv
94.2593 155.742 94.7493 155.532 95.1133 155.112 cv
95.4773 154.692 95.6593 154.104 95.6593 153.362 cv
95.6593 152.634 95.4773 152.046 95.1133 151.626 cv
94.7493 151.206 94.2593 150.982 93.6433 150.982 cv
96.3873 146.656 mo
96.3873 147.916 li
96.0373 147.748 95.6873 147.622 95.3373 147.538 cv
94.9733 147.454 94.6233 147.412 94.2873 147.412 cv
93.3633 147.412 92.6633 147.72 92.1873 148.336 cv
91.7113 148.952 91.4313 149.89 91.3753 151.122 cv
91.6413 150.73 91.9773 150.422 92.3833 150.212 cv
92.7893 150.002 93.2373 149.89 93.7273 149.89 cv
94.7493 149.89 95.5613 150.212 96.1493 150.828 cv
96.7373 151.444 97.0453 152.298 97.0453 153.362 cv
97.0453 154.412 96.7233 155.252 96.1073 155.882 cv
95.4913 156.512 94.6653 156.82 93.6433 156.82 cv
92.4673 156.82 91.5573 156.372 90.9413 155.476 cv
90.3113 154.58 90.0033 153.264 90.0033 151.542 cv
90.0033 149.932 90.3813 148.644 91.1513 147.692 cv
91.9073 146.74 92.9433 146.25 94.2313 146.25 cv
94.5673 146.25 94.9173 146.292 95.2813 146.348 cv
95.6313 146.418 95.9953 146.516 96.3873 146.656 cv
f
99.4253 154.902 mo
100.867 154.902 li
100.867 156.638 li
99.4253 156.638 li
99.4253 154.902 li
f
109.211 149.274 mo
109.211 150.45 li
108.847 150.254 108.497 150.114 108.133 150.016 cv
107.769 149.918 107.419 149.862 107.055 149.862 cv
106.243 149.862 105.599 150.128 105.151 150.646 cv
104.703 151.164 104.479 151.892 104.479 152.816 cv
104.479 153.754 104.703 154.482 105.151 155 cv
105.599 155.518 106.243 155.77 107.055 155.77 cv
107.419 155.77 107.769 155.728 108.133 155.63 cv
108.497 155.532 108.847 155.378 109.211 155.182 cv
109.211 156.344 li
108.847 156.512 108.483 156.638 108.119 156.708 cv
107.741 156.778 107.335 156.82 106.915 156.82 cv
105.767 156.82 104.843 156.47 104.171 155.742 cv
103.485 155.028 103.149 154.048 103.149 152.816 cv
103.149 151.57 103.485 150.59 104.171 149.876 cv
104.857 149.162 105.795 148.798 106.999 148.798 cv
107.391 148.798 107.769 148.84 108.133 148.924 cv
108.497 149.008 108.861 149.12 109.211 149.274 cv
f
117.765 152.018 mo
117.765 156.638 li
116.505 156.638 li
116.505 152.06 li
116.505 151.332 116.351 150.8 116.071 150.436 cv
115.791 150.072 115.371 149.89 114.811 149.89 cv
114.125 149.89 113.593 150.114 113.201 150.548 cv
112.809 150.982 112.613 151.57 112.613 152.312 cv
112.613 156.638 li
111.353 156.638 li
111.353 148.98 li
112.613 148.98 li
112.613 150.17 li
112.907 149.722 113.257 149.372 113.677 149.148 cv
114.083 148.924 114.559 148.798 115.091 148.798 cv
115.959 148.798 116.631 149.078 117.079 149.624 cv
117.527 150.17 117.765 150.968 117.765 152.018 cv
f
125.959 165.725 mo
122.459 165.725 li
f
125.959 165.725 mo
122.459 165.725 li
@
7.26542 163.387 mo
8.52541 163.387 li
10.0934 169.365 li
11.6614 163.387 li
13.1454 163.387 li
14.7134 169.365 li
16.2814 163.387 li
17.5414 163.387 li
15.5394 171.045 li
14.0554 171.045 li
12.4034 164.773 li
10.7514 171.045 li
9.26742 171.045 li
7.26542 163.387 li
f
18.7174 163.387 mo
19.9774 163.387 li
21.5454 169.365 li
23.1134 163.387 li
24.5974 163.387 li
26.1654 169.365 li
27.7334 163.387 li
28.9934 163.387 li
26.9914 171.045 li
25.5074 171.045 li
23.8554 164.773 li
22.2034 171.045 li
20.7194 171.045 li
18.7174 163.387 li
f
30.1694 163.387 mo
31.4294 163.387 li
32.9974 169.365 li
34.5654 163.387 li
36.0494 163.387 li
37.6174 169.365 li
39.1854 163.387 li
40.4454 163.387 li
38.4434 171.045 li
36.9594 171.045 li
35.3074 164.773 li
33.6554 171.045 li
32.1714 171.045 li
30.1694 163.387 li
f
42.5314 169.309 mo
43.9734 169.309 li
43.9734 171.045 li
42.5314 171.045 li
42.5314 169.309 li
f
52.3034 167.223 mo
52.3034 166.299 52.1074 165.585 51.7294 165.053 cv
51.3374 164.521 50.8194 164.255 50.1614 164.255 cv
49.4894 164.255 48.9714 164.521 48.5934 165.053 cv
48.2014 165.585 48.0194 166.299 48.0194 167.223 cv
48.0194 168.147 48.2014 168.875 48.5934 169.407 cv
48.9714 169.939 49.4894 170.191 50.1614 170.191 cv
50.8194 170.191 51.3374 169.939 51.7294 169.407 cv
52.1074 168.875 52.3034 168.147 52.3034 167.223 cv
48.0194 164.549 mo
48.2714 164.101 48.6074 163.765 49.0134 163.541 cv
49.4194 163.317 49.9094 163.205 50.4694 163.205 cv
51.3934 163.205 52.1494 163.583 52.7374 164.311 cv
53.3114 165.053 53.6054 166.019 53.6054 167.223 cv
53.6054 168.427 53.3114 169.407 52.7374 170.135 cv
52.1494 170.863 51.3934 171.227 50.4694 171.227 cv
49.9094 171.227 49.4194 171.115 49.0134 170.905 cv
48.6074 170.695 48.2714 170.359 48.0194 169.897 cv
48.0194 171.045 li
46.7594 171.045 li
46.7594 160.405 li
48.0194 160.405 li
48.0194 164.549 li
f
59.1774 167.195 mo
58.1554 167.195 57.4554 167.321 57.0634 167.545 cv
56.6714 167.783 56.4754 168.175 56.4754 168.735 cv
56.4754 169.183 56.6154 169.547 56.9094 169.799 cv
57.2034 170.065 57.6094 170.191 58.1134 170.191 cv
58.8134 170.191 59.3734 169.953 59.7934 169.449 cv
60.2134 168.959 60.4234 168.301 60.4234 167.475 cv
60.4234 167.195 li
59.1774 167.195 li
61.6834 166.677 mo
61.6834 171.045 li
60.4234 171.045 li
60.4234 169.883 li
60.1294 170.359 59.7654 170.695 59.3454 170.905 cv
58.9254 171.115 58.3934 171.227 57.7774 171.227 cv
56.9934 171.227 56.3634 171.017 55.9014 170.583 cv
55.4394 170.149 55.2154 169.561 55.2154 168.819 cv
55.2154 167.965 55.4954 167.321 56.0834 166.873 cv
56.6574 166.439 57.5114 166.215 58.6594 166.215 cv
60.4234 166.215 li
60.4234 166.089 li
60.4234 165.515 60.2274 165.067 59.8494 164.745 cv
59.4714 164.437 58.9394 164.269 58.2534 164.269 cv
57.8054 164.269 57.3854 164.325 56.9654 164.437 cv
56.5454 164.549 56.1534 164.703 55.7754 164.899 cv
55.7754 163.737 li
56.2234 163.569 56.6714 163.429 57.1054 163.345 cv
57.5394 163.261 57.9594 163.205 58.3794 163.205 cv
59.4854 163.205 60.3114 163.499 60.8574 164.073 cv
61.4034 164.647 61.6834 165.515 61.6834 166.677 cv
f
64.2734 163.387 mo
65.5334 163.387 li
65.5334 171.045 li
64.2734 171.045 li
64.2734 163.387 li
64.2734 160.405 mo
65.5334 160.405 li
65.5334 162.001 li
64.2734 162.001 li
64.2734 160.405 li
f
73.2054 164.549 mo
73.2054 160.405 li
74.4654 160.405 li
74.4654 171.045 li
73.2054 171.045 li
73.2054 169.897 li
72.9394 170.359 72.6034 170.695 72.1974 170.905 cv
71.7914 171.115 71.3154 171.227 70.7554 171.227 cv
69.8314 171.227 69.0754 170.863 68.4874 170.135 cv
67.8994 169.407 67.6194 168.427 67.6194 167.223 cv
67.6194 166.019 67.8994 165.053 68.4874 164.311 cv
69.0754 163.583 69.8314 163.205 70.7554 163.205 cv
71.3154 163.205 71.7914 163.317 72.1974 163.541 cv
72.6034 163.765 72.9394 164.101 73.2054 164.549 cv
68.9214 167.223 mo
68.9214 168.147 69.1034 168.875 69.4814 169.407 cv
69.8594 169.939 70.3914 170.191 71.0634 170.191 cv
71.7214 170.191 72.2394 169.939 72.6314 169.407 cv
73.0094 168.875 73.2054 168.147 73.2054 167.223 cv
73.2054 166.299 73.0094 165.585 72.6314 165.053 cv
72.2394 164.521 71.7214 164.255 71.0634 164.255 cv
70.3914 164.255 69.8594 164.521 69.4814 165.053 cv
69.1034 165.585 68.9214 166.299 68.9214 167.223 cv
f
76.9294 168.021 mo
76.9294 163.387 li
78.1894 163.387 li
78.1894 167.979 li
78.1894 168.707 78.3294 169.239 78.6094 169.603 cv
78.8894 169.967 79.3094 170.149 79.8834 170.149 cv
80.5554 170.149 81.1014 169.939 81.4934 169.505 cv
81.8854 169.071 82.0814 168.483 82.0814 167.727 cv
82.0814 163.387 li
83.3414 163.387 li
83.3414 171.045 li
82.0814 171.045 li
82.0814 169.869 li
81.7734 170.345 81.4094 170.681 81.0174 170.905 cv
80.6114 171.115 80.1494 171.227 79.6174 171.227 cv
78.7354 171.227 78.0634 170.961 77.6154 170.415 cv
77.1534 169.883 76.9294 169.085 76.9294 168.021 cv
80.0934 163.205 mo
80.0934 163.205 li
f
86.1134 169.309 mo
87.5554 169.309 li
87.5554 171.045 li
86.1134 171.045 li
86.1134 169.309 li
f
95.8994 163.681 mo
95.8994 164.857 li
95.5354 164.661 95.1854 164.521 94.8214 164.423 cv
94.4574 164.325 94.1074 164.269 93.7434 164.269 cv
92.9314 164.269 92.2874 164.535 91.8394 165.053 cv
91.3914 165.571 91.1674 166.299 91.1674 167.223 cv
91.1674 168.161 91.3914 168.889 91.8394 169.407 cv
92.2874 169.925 92.9314 170.177 93.7434 170.177 cv
94.1074 170.177 94.4574 170.135 94.8214 170.037 cv
95.1854 169.939 95.5354 169.785 95.8994 169.589 cv
95.8994 170.751 li
95.5354 170.919 95.1714 171.045 94.8074 171.115 cv
94.4294 171.185 94.0234 171.227 93.6034 171.227 cv
92.4554 171.227 91.5314 170.877 90.8594 170.149 cv
90.1734 169.435 89.8374 168.455 89.8374 167.223 cv
89.8374 165.977 90.1734 164.997 90.8594 164.283 cv
91.5454 163.569 92.4834 163.205 93.6874 163.205 cv
94.0794 163.205 94.4574 163.247 94.8214 163.331 cv
95.1854 163.415 95.5494 163.527 95.8994 163.681 cv
f
101.051 164.269 mo
100.379 164.269 99.8474 164.535 99.4554 165.067 cv
99.0634 165.599 98.8674 166.313 98.8674 167.223 cv
98.8674 168.147 99.0494 168.861 99.4414 169.393 cv
99.8334 169.925 100.365 170.177 101.051 170.177 cv
101.723 170.177 102.255 169.925 102.647 169.393 cv
103.039 168.861 103.235 168.147 103.235 167.223 cv
103.235 166.327 103.039 165.599 102.647 165.067 cv
102.255 164.535 101.723 164.269 101.051 164.269 cv
101.051 163.205 mo
102.143 163.205 102.997 163.569 103.627 164.269 cv
104.243 164.983 104.565 165.963 104.565 167.223 cv
104.565 168.483 104.243 169.463 103.627 170.163 cv
102.997 170.877 102.143 171.227 101.051 171.227 cv
99.9454 171.227 99.0774 170.877 98.4614 170.163 cv
97.8454 169.463 97.5374 168.483 97.5374 167.223 cv
97.5374 165.963 97.8454 164.983 98.4614 164.269 cv
99.0774 163.569 99.9454 163.205 101.051 163.205 cv
f
112.615 164.857 mo
112.923 164.297 113.301 163.891 113.735 163.611 cv
114.169 163.345 114.687 163.205 115.289 163.205 cv
116.073 163.205 116.689 163.485 117.123 164.045 cv
117.557 164.605 117.781 165.403 117.781 166.425 cv
117.781 171.045 li
116.521 171.045 li
116.521 166.467 li
116.521 165.739 116.381 165.193 116.129 164.829 cv
115.863 164.479 115.471 164.297 114.939 164.297 cv
114.281 164.297 113.763 164.521 113.385 164.955 cv
113.007 165.389 112.825 165.977 112.825 166.719 cv
112.825 171.045 li
111.565 171.045 li
111.565 166.467 li
111.565 165.739 111.425 165.193 111.173 164.829 cv
110.907 164.479 110.501 164.297 109.969 164.297 cv
109.325 164.297 108.807 164.521 108.429 164.955 cv
108.051 165.389 107.869 165.977 107.869 166.719 cv
107.869 171.045 li
106.609 171.045 li
106.609 163.387 li
107.869 163.387 li
107.869 164.577 li
108.149 164.115 108.499 163.765 108.905 163.541 cv
109.297 163.317 109.773 163.205 110.333 163.205 cv
110.893 163.205 111.355 163.345 111.747 163.625 cv
112.139 163.905 112.419 164.325 112.615 164.857 cv
f
-10.9395 98.8216 mo
-7.30946 100.162 li
-7.30946 97.4816 li
-10.9395 98.8216 li
-11.9095 99.3816 mo
-11.9095 98.2616 li
-4.61946 95.4816 li
-4.61946 96.5116 li
-6.48946 97.1716 li
-6.48946 100.462 li
-4.61946 101.122 li
-4.61946 102.162 li
-11.9095 99.3816 li
f
-9.87946 90.5216 mo
-9.03946 90.5216 li
-9.17946 90.7816 -9.27946 91.0316 -9.34946 91.2916 cv
-9.41946 91.5516 -9.45947 91.8016 -9.45947 92.0616 cv
-9.45947 92.6416 -9.26946 93.1016 -8.89946 93.4216 cv
-8.52946 93.7416 -8.00946 93.9016 -7.34946 93.9016 cv
-6.67946 93.9016 -6.15946 93.7416 -5.78946 93.4216 cv
-5.41946 93.1016 -5.23946 92.6416 -5.23946 92.0616 cv
-5.23946 91.8016 -5.26946 91.5516 -5.33946 91.2916 cv
-5.40946 91.0316 -5.51946 90.7816 -5.65946 90.5216 cv
-4.82946 90.5216 li
-4.70947 90.7816 -4.61946 91.0416 -4.56947 91.3016 cv
-4.51946 91.5716 -4.48946 91.8616 -4.48946 92.1616 cv
-4.48946 92.9816 -4.73946 93.6416 -5.25946 94.1216 cv
-5.76946 94.6116 -6.46946 94.8516 -7.34946 94.8516 cv
-8.23946 94.8516 -8.93946 94.6116 -9.44946 94.1216 cv
-9.95947 93.6316 -10.2195 92.9616 -10.2195 92.1016 cv
-10.2195 91.8216 -10.1895 91.5516 -10.1295 91.2916 cv
-10.0695 91.0316 -9.98946 90.7716 -9.87946 90.5216 cv
f
-11.6395 88.0716 mo
-10.0895 88.0716 li
-10.0895 86.2216 li
-9.38947 86.2216 li
-9.38947 88.0716 li
-6.41946 88.0716 li
-5.96946 88.0716 -5.67946 88.0116 -5.55946 87.8916 cv
-5.42946 87.7716 -5.36946 87.5216 -5.36946 87.1416 cv
-5.36946 86.2216 li
-4.61946 86.2216 li
-4.61946 87.1416 li
-4.61946 87.8416 -4.74947 88.3216 -5.00946 88.5816 cv
-5.26946 88.8416 -5.73946 88.9716 -6.41946 88.9716 cv
-9.38947 88.9716 li
-9.38947 89.6316 li
-10.0895 89.6316 li
-10.0895 88.9716 li
-11.6395 88.9716 li
-11.6395 88.0716 li
f
-6.77946 85.1316 mo
-10.0895 85.1316 li
-10.0895 84.2316 li
-6.80946 84.2316 li
-6.28946 84.2316 -5.90946 84.1316 -5.64946 83.9316 cv
-5.38947 83.7316 -5.25946 83.4316 -5.25946 83.0216 cv
-5.25946 82.5416 -5.40946 82.1516 -5.71946 81.8716 cv
-6.02946 81.5916 -6.44946 81.4516 -6.98946 81.4516 cv
-10.0895 81.4516 li
-10.0895 80.5516 li
-4.61946 80.5516 li
-4.61946 81.4516 li
-5.45947 81.4516 li
-5.11946 81.6716 -4.87946 81.9316 -4.71947 82.2116 cv
-4.56947 82.5016 -4.48946 82.8316 -4.48946 83.2116 cv
-4.48946 83.8416 -4.67947 84.3216 -5.06947 84.6416 cv
-5.44946 84.9716 -6.01946 85.1316 -6.77946 85.1316 cv
-10.2195 82.8716 mo
-10.2195 82.8716 li
f
-7.36946 76.2116 mo
-7.36946 76.9416 -7.27946 77.4416 -7.11946 77.7216 cv
-6.94946 78.0016 -6.66946 78.1416 -6.26946 78.1416 cv
-5.94946 78.1416 -5.68946 78.0416 -5.50946 77.8316 cv
-5.31947 77.6216 -5.22946 77.3316 -5.22946 76.9716 cv
-5.22946 76.4716 -5.39946 76.0716 -5.75946 75.7716 cv
-6.10946 75.4716 -6.57946 75.3216 -7.16946 75.3216 cv
-7.36946 75.3216 li
-7.36946 76.2116 li
-7.73946 74.4216 mo
-4.61946 74.4216 li
-4.61946 75.3216 li
-5.44946 75.3216 li
-5.10947 75.5316 -4.86946 75.7916 -4.71947 76.0916 cv
-4.56947 76.3916 -4.48946 76.7716 -4.48946 77.2116 cv
-4.48946 77.7716 -4.63947 78.2216 -4.94946 78.5516 cv
-5.25946 78.8816 -5.67946 79.0416 -6.20947 79.0416 cv
-6.81946 79.0416 -7.27946 78.8416 -7.59946 78.4216 cv
-7.90946 78.0116 -8.06946 77.4016 -8.06946 76.5816 cv
-8.06946 75.3216 li
-8.15946 75.3216 li
-8.56946 75.3216 -8.88947 75.4616 -9.11946 75.7316 cv
-9.33946 76.0016 -9.45947 76.3816 -9.45947 76.8716 cv
-9.45947 77.1916 -9.41946 77.4916 -9.33946 77.7916 cv
-9.25946 78.0916 -9.14946 78.3716 -9.00946 78.6416 cv
-9.83946 78.6416 li
-9.95947 78.3216 -10.0595 78.0016 -10.1195 77.6916 cv
-10.1795 77.3816 -10.2195 77.0816 -10.2195 76.7816 cv
-10.2195 75.9916 -10.0095 75.4016 -9.59946 75.0116 cv
-9.18946 74.6216 -8.56946 74.4216 -7.73946 74.4216 cv
f
-12.2195 72.5716 mo
-12.2195 71.6716 li
-4.61946 71.6716 li
-4.61946 72.5716 li
-12.2195 72.5716 li
f
grestore
gsave
312.473 165.725 mo
320.397 165.725 li
320.397 7.24261 li
312.473 7.24261 li
cp
clp
312.473 165.725 mo
312.473 165.106 li
312.473 7.86169 li
312.473 7.24261 li
320.397 7.24261 li
320.397 7.86169 li
320.397 165.106 li
320.397 165.725 li
cp
f
.01 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
312.473 165.725 mo
312.473 165.106 li
312.473 7.86169 li
312.473 7.24261 li
320.397 7.24261 li
320.397 7.86169 li
320.397 165.106 li
320.397 165.725 li
cp
@
grestore
gsave
-69.3328 311.371 mo
391.467 311.371 li
391.467 -34.2294 li
-69.3328 -34.2294 li
cp
clp
312.627 165.571 mo
320.547 165.571 li
320.547 7.17059 li
312.627 7.17059 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 69.3328 305.196 ]ct
[7.92 0 0 158.4 243.294 139.625 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 22 
/H 440 
/M[22 0 0 -440 0 440 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 22 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
li6;1lV6\%li6J6r8R$:lSRr-lf.5(oe?+oli6;1lV-Uuli6h@o&At.lRqN'lf.5's"<[kli6;1lUpIm
mf3:dlf.5&lRM6#lf%G,q+9m$li6;/lUU7fq#C!dleq)!lR(rtlehY1mmcUhli6;.lUL4e!%$t2leh"q
lQPTon_X0"lU'n[li6;-lU(:fp)r]$leUkklQ,<kqq^eulTa\Uli6;+lTP:gll>?kleLeilQ#BnrVu3<
lTFJOli6;)oK)b.lP]$gle:YclP]NuoDe.0lT"2Hli6;(r]'=*lPJmele(M]m1oX9li6;%lSe&Bli6P,
qUXsjlP&Ualdb;WpCd-3li6;$lSIi>li6n4nC6bZlO`C^ldY5UlO`C^ldP/RlONFar;Z*3lS%Q5li6;"
oe6%mlOE1[ldG)NlO3Rho)J%(lRhE1li6:us"3UilO)tXld>#MmL&q#li6:slRM3-li6S$q9A4TlNunW
lcn`Fp^-R!li6:plR2!(li6q-n'()FlNlhVlcSQ@!%.";li6:llQkd$nc/LdlcAB;lNcbUlc8<7n-Ajr
li6:klQPR!li6XspVlG@lNZ\Tlc&04q?HKpli6:hlQ5?rli-q$mDA0/lNQVRlb`'0rZ(5-li$.clPf'm
oDSL`lbVm*lNQVPlbN94oGHlslhg"^lPJjirVQ'\lb;[$lNHPMm(ED4lPAdhlh]q\lPB!nqZQ6\lauHu
lNHPLp:L%1lPAdhlhKeWlP03unH8+OlaZ6olN?JI!4_C*lP&Rdlh9YRmh5R3lN?JHlaQ0mlN?ePq"<s]
lO`@`lh'MMq%<31lN6DEla5silN7(WmdobMlO`@`lgsMLs0Cr%lN6DCl`f[cncJXhlgjAGlOW:_lga_Q
ormZllN6DAl`KI_quZ?hlgX5BlON4^lgO/?lOW:_lgO/?n.5F-lN6D?l`'1\lN6bIp[7@HlOW:_lg=#9
q@<'+lN-><l_WnWlN.%PmHj/8lON4]lg*u6rhJcilN->;l_EbVo)\Xflg!f1lOW:^lfn2;oUtL[lN->9
l_*PRr;l?flfdZ+lOE.\m-"H5l^mDOlN->6l^dPTq[MillfRN(lOE.\lfR]*r0lp]lN->5l^@&Jo`=df
lfIH#lOE.\lf7i.nsAYNlN->3l^-oGrrMKflf.5qlO<([mc+6*l]^WDlN->2l]^oLq$lWjleq)klO<(Z
pu(f&l]LKAlN$8.l]D&QmgJF]leh#ilO3%Z!!)?Al]19=lN$8,nVm@(lO)qXleUlclO*=cp&OF7l\b!9
lN$8,qhjp$lO3"YleC`]lO!Ulli?A*l\Fd5lN$D-rS$RmlO)qXle1TXoEt@#lN$8(l\4X3lN$b5o@WA]
lO)qXle(NUrX/'#lN$8&l[e@/m/[.dldkBPlO)qXldkWWqLIl=lN$8$l[J.,pAjjdldb<MlO)qXldPcX
n9XC.lN$8"l[%k)lN$8!lZh_'lN$G%r6ahRlO3"Yld>$AoaCL%lN$7tlZDG#lN$e.o$H]ElO3"Yld+m<
rsS3%lN$7rlZ)4tmK!4dld"g9lO)qXlco$>q/>R,lN$7qlYl(sp]0pdlce[3lO)qXlcf<Emqq@tlN$7o
lYGhp!"8)mlcJI-lO3"Yn]C[MlY>_nlN$7mlY,Sln,W@dlcJI+lO3"Ylc8[2pLie"lN$7jlXfAjq>g'd
lc/7%lO<(Zlc&m6m:5GilN$7ilXT>jrX8#llbr*tlO<(Zo>LIClXB)flN$7glX9JqoF'sblb_solO<(Z
rPJ$?lX&lclN$7els'NqlO3"YlbVmllO34_qZ,rtlW`ZalN$7bp0%)llO<(Zlb;[flO<XjnGqmglWEH\
lN$7a!*JSilO3"Ylb)Oamg]4)lN$7`lW3<\lN$Rhpq,illO<(ZlauI^q%!!+lN$7_lW!0[lN$pqm^h^_
lOE.[lalI^s&84mlN$7]lVZsXnc8Ldlac=YlON4\laQUbohar`lN$7ZlV?aUquH3dlaH+SlON4\la?%Q
lON4\la?%Qn.,@+lN$7WlV$OSlN$U`pTj*WlON4\la#hKq@<'+lN$7UlU^=PlN$simBPtJlOW:]l`feK
r^lDblN$7TlUgCOo)SRdl`TPDlON4\l`KqOoLA-UlN$7QlUL1Lr;c9dl`BD?lON4\m&U2glU:%KlN$7N
lU11Oq[Mikl`'2:lON4\l`'A?r'K]ZlN$7KlTjbFo`4^dl_j&6lOE.[l_aMBnil@LlN$7JlTXVErrDEd
l_Ni0lON4\m\KiXlTXVDlN$7HlTXnLq$lWil_<]-lOE.[pnIDTlTFJBlN$7ElT>%TmgeX`l_!K(lOE1\
!!)>WlT4>@lN$7CnN$J,lON4\l_!K'lONUgp&OEMlT"2?lN$7Bq`++*lON4\l^[9"lONsqli?@@lSe&=
lN$CCrL<+2lON4\l^I,toFCX+lN$7>lSe&=lN$aJo9ei$lOE.[l^-oorXS?+lN$7;lSRo;m/[.dl]pcl
lOE.[l]q#sqD7FHlN$78lS7]8pAjjdl]g]ilON4\l]V0"n1a/;lN$75lS%Q6lN$75lS%Q6lN$F9r/g4s
lOE.[l]CEboaUX)lN$72lRqK4lN$dAnrE#glOE.[l](3^rs\9'lN$7/lR_?1mK!4dl\k'[lO<(Zl\Y3`
q((b?lN$7-lRV91p]0pdl\FdTlO<(Zl\>?emj[Q3lN$7*lRD00!"J5ol\4XPlON4\nV-jolR2!.lN$7'
lR2!-n,W@dl\"LNlOE.[l[ndXpF,>:lN$7%lR(p-q>g'dl[e@KlON4\l[Sp\m3V'-lN$7#lQts.rXJ/n
l[A(ElON4\o6g@]lQb^*lN$6ulQc07oFC0elZqe?lOE.[rH[jWlQYX(lN$6qllc?PlON4\lZh_=lONFb
qZ,r+lQGL(lN$6op*',QlOE.[lZVS;lOE^knGqlslQGL'lN$6m!$LVNlON4\lZ2;5mgf:+lN$6ilQ5@%
lN$Qrpi,O?lON4\lYl)0q%!!+lN$6hlQ,:$lN$p%mV_>1lOW:]lYc)0ruC>8lN$6elQ#4$nc8LdlYGf*
lOW:]lYH56oc*3-lN$6clPf(#quH3dlY>`(lO`@^lY,T'lON4\lY,T'n.,@+lN$6`lPf("lN$ThpLWY.
lO`@^lXfB"q@N3/lN$6[lP]!ulN$rom:,B!lON4\lXB2trYOl2lN$6XlPJjso)SRdlX/rolON4\lX'?$
oG-[&lN$6WlP8^rr;c9dlWi`klON4\ls'NqlPAdrlN$6TlP8q"q[VollWWTilOE.[lWWcnr"eT-lN$6Q
lP8^oo`4^dlWEHflO<(ZlW<ouneUO"lN$6OlP8^prrDEdlW3<dlOE.[mT'6dlP/XolN$6NlP/q"q$lWi
lW!0blO<(Zpf-lblP8^olN$6LlP9@,mgSL^lVd$`lO3%Z!!)=_lP8^nlN$6JnJ(j7lO3"YlVZs^lO3Cd
p&ODSlP8^mlN$6Gq\8Q7lO)qXlV?a[lO!Ulli??GlP8^llN$BJrCuSmlNukWlV-UYoEt@#lN$6ElP/Xl
lN$`Po1A6_lNleVlU^=UrX&!!lN$6AlP/Xkm/[.dlUU7TlNc_UlUUL[q@r6#lN$6?lP&RipAjjdlUL1R
lNleVlU:Xbn.b0mlN$6<lP&RglN$6<lP&RglN$E@r'K]^lNc_UlU'nMo`t3rlN$69lP&RglN$cFnil@P
lNZYTlTXVIrs%iplN$66lP&RfmK!4dlTOPIlNQSSlTOhPq%DuslN$66lOrLep]0pdlTFJGlNHMRlT4tW
mh4pilN$63lOrOf!!VZglT+8ElNHMRnN$J,lP&RelN$61lOrLdn,W@dlSn,BlNHMRlSnJLpCccplN$6.
lOrLcq>g'dlS[u@lN?GQlSSVSm1S^elN$6-lOrUfrWDHdlSRo>lNHMRo/$1ulOrLblN$6,lOrsooE+=Y
lS@c<lN?GQrA*gslOiFblN$6)lk'40lN?GQlS.W9lN?YWqZ,q9lO`@alN$6(p(6p/lN6APlS%Q8lN6q`
nGql-lOW:_lN$6'!"\E,lN6APlRhE6mfNFhlN$6&lON4_lN$Q/pateAlN?GQlR_?4q#U'flN$6%lOW:^
lN$o7mORT5lN6APlRV?4rsn>rlN$6#lON4^nc8LdlRM30lN6APlRMW<oaU3glN$6"lON4]quH3dlRD-0
lN-;OlRD-/lN6APlR;'/n,`FflN$6!lON4]lN$T+pF,>9lN6APlR;'-q?$3hlN$5ulOE.\lN$r4m3h3/
lN-;OlR)$.rXA)olN$5slOE.\o)SRdlQtj+lN-;OlQu<6oF'sdlN$5slO3"[r;c9dlQkd)lN-;OlluKT
lO3"ZlN$5qlO34`qZ6!_lQYX&lN-;OlQYg+r!VfklN$5plO)qZo`4^dlQYX%lN6APlQQ*3nd<nIlQGL"
lN."cm/ZGplNukXlN$>prZCG5eH"nWlO*4`irJBelNleWlN$]$oH*<)eH"nVlO!Lif`:=YlNl&A!!)=*
lNl#@lQ#F#qZt^PlQ#3rhuNHNlQ#3qlN-;OlPo^,nHdYFlPo-ql2^/NlPf'oeH#%Vr>Ou,eH"nPlNd%^
iW/9]lNc_VlN$_to,-culN-;OlPSpmrW(RNlPSpmf)YgNlPJjkeH"nOncnppeH"nNlNcAKo`4:mlNZYU
lN$5cr!)WplN-;OlP/XilN$5NlP/XieH#(Qr"SH$lN-;OlP/Xho`=dflN$5alNZYUlN$bone16llN-;O
lOrLerrMKflN$5_lNYuArW)6rlNYl>lOi^lq$$'blN$5^lNQSTp]0pdlO`@clN-;OlOWpsmf_qWlN$5]
lNHPT!!2BclON4aeH#+Lq[VoqeH"nElNHMSn,W@dlOE._lN-;OlOELipB9d_lN$5ZlNHMSq>g'dlO<(^
lN-;OlO3^qm0(r>lO)q[mJuGNlO)q[eH#1Iq$H?ieH"nAlNHt_h>ljJlN6AQlN$kimg8:]lN-;OlNlhZ
!!CaOlNleXgAq*NlNleXeH"n?p&k!jeH"n?lN?5KnGqk[lN6AQlN$5T!!;KgeH"n>lN6MTk5afPlN,N9
J,~>

%%EndBinary
grestore
np
320.397 165.725 mo
323.897 165.725 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
320.397 165.725 mo
323.897 165.725 li
@
330.577 162.882 mo
330.067 162.882 329.687 163.132 329.427 163.632 cv
329.167 164.132 329.047 164.882 329.047 165.882 cv
329.047 166.882 329.167 167.632 329.427 168.132 cv
329.687 168.632 330.067 168.882 330.577 168.882 cv
331.087 168.882 331.467 168.632 331.727 168.132 cv
331.977 167.632 332.107 166.882 332.107 165.882 cv
332.107 164.882 331.977 164.132 331.727 163.632 cv
331.467 163.132 331.087 162.882 330.577 162.882 cv
330.577 162.102 mo
331.387 162.102 332.007 162.432 332.447 163.072 cv
332.877 163.722 333.097 164.662 333.097 165.882 cv
333.097 167.112 332.877 168.052 332.447 168.692 cv
332.007 169.332 331.387 169.652 330.577 169.652 cv
329.757 169.652 329.127 169.332 328.697 168.692 cv
328.267 168.052 328.057 167.112 328.057 165.882 cv
328.057 164.662 328.267 163.722 328.697 163.072 cv
329.127 162.432 329.757 162.102 330.577 162.102 cv
f
334.827 168.282 mo
335.857 168.282 li
335.857 169.522 li
334.827 169.522 li
334.827 168.282 li
f
340.117 162.882 mo
339.607 162.882 339.227 163.132 338.967 163.632 cv
338.707 164.132 338.587 164.882 338.587 165.882 cv
338.587 166.882 338.707 167.632 338.967 168.132 cv
339.227 168.632 339.607 168.882 340.117 168.882 cv
340.627 168.882 341.007 168.632 341.267 168.132 cv
341.517 167.632 341.647 166.882 341.647 165.882 cv
341.647 164.882 341.517 164.132 341.267 163.632 cv
341.007 163.132 340.627 162.882 340.117 162.882 cv
340.117 162.102 mo
340.927 162.102 341.547 162.432 341.987 163.072 cv
342.417 163.722 342.637 164.662 342.637 165.882 cv
342.637 167.112 342.417 168.052 341.987 168.692 cv
341.547 169.332 340.927 169.652 340.117 169.652 cv
339.297 169.652 338.667 169.332 338.237 168.692 cv
337.807 168.052 337.597 167.112 337.597 165.882 cv
337.597 164.662 337.807 163.722 338.237 163.072 cv
338.667 162.432 339.297 162.102 340.117 162.102 cv
f
320.397 133.734 mo
323.897 133.734 li
f
320.397 133.734 mo
323.897 133.734 li
@
330.577 130.891 mo
330.067 130.891 329.687 131.141 329.427 131.641 cv
329.167 132.141 329.047 132.891 329.047 133.891 cv
329.047 134.891 329.167 135.641 329.427 136.141 cv
329.687 136.641 330.067 136.891 330.577 136.891 cv
331.087 136.891 331.467 136.641 331.727 136.141 cv
331.977 135.641 332.107 134.891 332.107 133.891 cv
332.107 132.891 331.977 132.141 331.727 131.641 cv
331.467 131.141 331.087 130.891 330.577 130.891 cv
330.577 130.111 mo
331.387 130.111 332.007 130.441 332.447 131.081 cv
332.877 131.731 333.097 132.671 333.097 133.891 cv
333.097 135.121 332.877 136.061 332.447 136.701 cv
332.007 137.341 331.387 137.661 330.577 137.661 cv
329.757 137.661 329.127 137.341 328.697 136.701 cv
328.267 136.061 328.057 135.121 328.057 133.891 cv
328.057 132.671 328.267 131.731 328.697 131.081 cv
329.127 130.441 329.757 130.111 330.577 130.111 cv
f
334.827 136.291 mo
335.857 136.291 li
335.857 137.531 li
334.827 137.531 li
334.827 136.291 li
f
338.857 136.701 mo
342.297 136.701 li
342.297 137.531 li
337.667 137.531 li
337.667 136.701 li
338.037 136.321 338.547 135.801 339.197 135.141 cv
339.837 134.491 340.247 134.071 340.417 133.881 cv
340.737 133.531 340.957 133.231 341.077 132.981 cv
341.197 132.741 341.267 132.491 341.267 132.251 cv
341.267 131.871 341.127 131.551 340.857 131.311 cv
340.587 131.071 340.237 130.941 339.797 130.941 cv
339.487 130.941 339.157 131.001 338.817 131.101 cv
338.477 131.211 338.107 131.371 337.717 131.591 cv
337.717 130.591 li
338.117 130.431 338.487 130.311 338.827 130.231 cv
339.167 130.151 339.487 130.111 339.777 130.111 cv
340.527 130.111 341.127 130.301 341.577 130.681 cv
342.027 131.061 342.257 131.561 342.257 132.191 cv
342.257 132.491 342.197 132.781 342.087 133.041 cv
341.977 133.311 341.777 133.631 341.477 133.991 cv
341.397 134.091 341.137 134.361 340.697 134.811 cv
340.257 135.261 339.647 135.891 338.857 136.701 cv
f
320.397 101.743 mo
323.897 101.743 li
f
320.397 101.743 mo
323.897 101.743 li
@
330.577 98.8998 mo
330.067 98.8998 329.687 99.1498 329.427 99.6498 cv
329.167 100.15 329.047 100.9 329.047 101.9 cv
329.047 102.9 329.167 103.65 329.427 104.15 cv
329.687 104.65 330.067 104.9 330.577 104.9 cv
331.087 104.9 331.467 104.65 331.727 104.15 cv
331.977 103.65 332.107 102.9 332.107 101.9 cv
332.107 100.9 331.977 100.15 331.727 99.6498 cv
331.467 99.1498 331.087 98.8998 330.577 98.8998 cv
330.577 98.1198 mo
331.387 98.1198 332.007 98.4498 332.447 99.0898 cv
332.877 99.7398 333.097 100.68 333.097 101.9 cv
333.097 103.13 332.877 104.07 332.447 104.71 cv
332.007 105.35 331.387 105.67 330.577 105.67 cv
329.757 105.67 329.127 105.35 328.697 104.71 cv
328.267 104.07 328.057 103.13 328.057 101.9 cv
328.057 100.68 328.267 99.7398 328.697 99.0898 cv
329.127 98.4498 329.757 98.1198 330.577 98.1198 cv
f
334.827 104.3 mo
335.857 104.3 li
335.857 105.54 li
334.827 105.54 li
334.827 104.3 li
f
340.717 99.1098 mo
338.227 103 li
340.717 103 li
340.717 99.1098 li
340.457 98.2498 mo
341.697 98.2498 li
341.697 103 li
342.737 103 li
342.737 103.82 li
341.697 103.82 li
341.697 105.54 li
340.717 105.54 li
340.717 103.82 li
337.427 103.82 li
337.427 102.87 li
340.457 98.2498 li
f
320.397 69.752 mo
323.897 69.752 li
f
320.397 69.752 mo
323.897 69.752 li
@
330.577 66.9089 mo
330.067 66.9089 329.687 67.1589 329.427 67.6589 cv
329.167 68.1589 329.047 68.9089 329.047 69.9089 cv
329.047 70.9089 329.167 71.6589 329.427 72.1589 cv
329.687 72.6589 330.067 72.9089 330.577 72.9089 cv
331.087 72.9089 331.467 72.6589 331.727 72.1589 cv
331.977 71.6589 332.107 70.9089 332.107 69.9089 cv
332.107 68.9089 331.977 68.1589 331.727 67.6589 cv
331.467 67.1589 331.087 66.9089 330.577 66.9089 cv
330.577 66.1289 mo
331.387 66.1289 332.007 66.4589 332.447 67.0989 cv
332.877 67.7489 333.097 68.6889 333.097 69.9089 cv
333.097 71.1389 332.877 72.0789 332.447 72.7189 cv
332.007 73.3589 331.387 73.6789 330.577 73.6789 cv
329.757 73.6789 329.127 73.3589 328.697 72.7189 cv
328.267 72.0789 328.057 71.1389 328.057 69.9089 cv
328.057 68.6889 328.267 67.7489 328.697 67.0989 cv
329.127 66.4589 329.757 66.1289 330.577 66.1289 cv
f
334.827 72.3089 mo
335.857 72.3089 li
335.857 73.5489 li
334.827 73.5489 li
334.827 72.3089 li
f
340.237 69.5089 mo
339.797 69.5089 339.447 69.6689 339.187 69.9689 cv
338.927 70.2689 338.797 70.6889 338.797 71.2089 cv
338.797 71.7389 338.927 72.1589 339.187 72.4589 cv
339.447 72.7589 339.797 72.9089 340.237 72.9089 cv
340.677 72.9089 341.027 72.7589 341.287 72.4589 cv
341.547 72.1589 341.677 71.7389 341.677 71.2089 cv
341.677 70.6889 341.547 70.2689 341.287 69.9689 cv
341.027 69.6689 340.677 69.5089 340.237 69.5089 cv
342.197 66.4189 mo
342.197 67.3189 li
341.947 67.1989 341.697 67.1089 341.447 67.0489 cv
341.187 66.9889 340.937 66.9589 340.697 66.9589 cv
340.037 66.9589 339.537 67.1789 339.197 67.6189 cv
338.857 68.0589 338.657 68.7289 338.617 69.6089 cv
338.807 69.3289 339.047 69.1089 339.337 68.9589 cv
339.627 68.8089 339.947 68.7289 340.297 68.7289 cv
341.027 68.7289 341.607 68.9589 342.027 69.3989 cv
342.447 69.8389 342.667 70.4489 342.667 71.2089 cv
342.667 71.9589 342.437 72.5589 341.997 73.0089 cv
341.557 73.4589 340.967 73.6789 340.237 73.6789 cv
339.397 73.6789 338.747 73.3589 338.307 72.7189 cv
337.857 72.0789 337.637 71.1389 337.637 69.9089 cv
337.637 68.7589 337.907 67.8389 338.457 67.1589 cv
338.997 66.4789 339.737 66.1289 340.657 66.1289 cv
340.897 66.1289 341.147 66.1589 341.407 66.1989 cv
341.657 66.2489 341.917 66.3189 342.197 66.4189 cv
f
320.397 37.761 mo
323.897 37.761 li
f
320.397 37.761 mo
323.897 37.761 li
@
330.577 34.9179 mo
330.067 34.9179 329.687 35.1679 329.427 35.6679 cv
329.167 36.1679 329.047 36.9179 329.047 37.9179 cv
329.047 38.9179 329.167 39.6679 329.427 40.1679 cv
329.687 40.6679 330.067 40.9179 330.577 40.9179 cv
331.087 40.9179 331.467 40.6679 331.727 40.1679 cv
331.977 39.6679 332.107 38.9179 332.107 37.9179 cv
332.107 36.9179 331.977 36.1679 331.727 35.6679 cv
331.467 35.1679 331.087 34.9179 330.577 34.9179 cv
330.577 34.1379 mo
331.387 34.1379 332.007 34.4679 332.447 35.1079 cv
332.877 35.7579 333.097 36.6979 333.097 37.9179 cv
333.097 39.1479 332.877 40.0879 332.447 40.7279 cv
332.007 41.3679 331.387 41.6879 330.577 41.6879 cv
329.757 41.6879 329.127 41.3679 328.697 40.7279 cv
328.267 40.0879 328.057 39.1479 328.057 37.9179 cv
328.057 36.6979 328.267 35.7579 328.697 35.1079 cv
329.127 34.4679 329.757 34.1379 330.577 34.1379 cv
f
334.827 40.3179 mo
335.857 40.3179 li
335.857 41.5579 li
334.827 41.5579 li
334.827 40.3179 li
f
340.117 38.0979 mo
339.647 38.0979 339.277 38.2279 339.007 38.4779 cv
338.737 38.7279 338.607 39.0679 338.607 39.5079 cv
338.607 39.9479 338.737 40.2979 339.007 40.5479 cv
339.277 40.7979 339.647 40.9179 340.117 40.9179 cv
340.577 40.9179 340.947 40.7979 341.217 40.5379 cv
341.487 40.2879 341.627 39.9479 341.627 39.5079 cv
341.627 39.0679 341.487 38.7279 341.227 38.4779 cv
340.957 38.2279 340.587 38.0979 340.117 38.0979 cv
339.127 37.6779 mo
338.707 37.5779 338.377 37.3779 338.137 37.0879 cv
337.897 36.7979 337.787 36.4479 337.787 36.0279 cv
337.787 35.4479 337.987 34.9879 338.407 34.6479 cv
338.817 34.3079 339.387 34.1379 340.117 34.1379 cv
340.837 34.1379 341.407 34.3079 341.827 34.6479 cv
342.237 34.9879 342.447 35.4479 342.447 36.0279 cv
342.447 36.4479 342.327 36.7979 342.087 37.0879 cv
341.847 37.3779 341.527 37.5779 341.107 37.6779 cv
341.577 37.7879 341.947 38.0079 342.217 38.3279 cv
342.477 38.6479 342.617 39.0479 342.617 39.5079 cv
342.617 40.2179 342.397 40.7579 341.967 41.1279 cv
341.527 41.5079 340.917 41.6879 340.117 41.6879 cv
339.307 41.6879 338.687 41.5079 338.257 41.1279 cv
337.827 40.7579 337.617 40.2179 337.617 39.5079 cv
337.617 39.0479 337.747 38.6479 338.017 38.3279 cv
338.277 38.0079 338.647 37.7879 339.127 37.6779 cv
338.767 36.1179 mo
338.767 36.4979 338.877 36.7979 339.117 37.0079 cv
339.357 37.2179 339.687 37.3179 340.117 37.3179 cv
340.537 37.3179 340.867 37.2179 341.107 37.0079 cv
341.347 36.7979 341.467 36.4979 341.467 36.1179 cv
341.467 35.7379 341.347 35.4479 341.107 35.2379 cv
340.867 35.0279 340.537 34.9179 340.117 34.9179 cv
339.687 34.9179 339.357 35.0279 339.117 35.2379 cv
338.877 35.4479 338.767 35.7379 338.767 36.1179 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
