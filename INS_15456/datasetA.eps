%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: datasetA.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: Lavender
%%CreationDate: 2019/11/10, 18:37:48
%%BoundingBox: 0 0 445 77
%%HiResBoundingBox: 0 0 444.4068 76.7535
%%CropBox: 0 0 444.4068 76.7535
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-11-10T18:34:36+08:00"
   xmp:CreatorTool="matplotlib 3.1.1, http://matplotlib.org"
   xmp:ModifyDate="2019-11-10T18:37:26+08:00"
   xmp:MetadataDate="2019-11-10T18:37:26+08:00"
   pdf:Producer="matplotlib pdf backend 3.1.1"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:091cd463-8871-4d37-a020-7e9a68ad16c9"
   xmpMM:InstanceID="uuid:a6a4f6c1-e494-45b8-90c2-9f2f1f65d54b"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -76.7535 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 76.7535 li
444.407 76.7535 li
444.407 0 li
cp
clp
gsave
-.481077 77.6759 mo
444.519 77.6759 li
444.519 -.324152 li
-.481077 -.324152 li
-.481077 77.6759 li
clp
-8.48105 311.676 mo
452.319 311.676 li
452.319 -33.9241 li
-8.48105 -33.9241 li
-8.48105 311.676 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
24.4332 61.8564 mo
94.7399 61.8564 li
94.7399 7.54785 li
24.4332 7.54785 li
cp
f
27.629 61.8564 mo
27.629 65.3564 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
27.629 61.8564 mo
27.629 65.3564 li
@
26.0343 69.4933 mo
25.3643 71.3083 li
26.7043 71.3083 li
26.0343 69.4933 li
25.7543 69.0083 mo
26.3143 69.0083 li
27.7043 72.6533 li
27.1893 72.6533 li
26.8593 71.7183 li
25.2143 71.7183 li
24.8843 72.6533 li
24.3643 72.6533 li
25.7543 69.0083 li
f
28.3643 72.2383 mo
29.1693 72.2383 li
29.1693 69.4583 li
28.2943 69.6333 li
28.2943 69.1833 li
29.1643 69.0083 li
29.6593 69.0083 li
29.6593 72.2383 li
30.4643 72.2383 li
30.4643 72.6533 li
28.3643 72.6533 li
28.3643 72.2383 li
f
48.9341 61.8564 mo
48.9341 65.3564 li
f
48.9341 61.8564 mo
48.9341 65.3564 li
@
47.3394 69.4933 mo
46.6694 71.3083 li
48.0094 71.3083 li
47.3394 69.4933 li
47.0594 69.0083 mo
47.6194 69.0083 li
49.0094 72.6533 li
48.4944 72.6533 li
48.1644 71.7183 li
46.5194 71.7183 li
46.1894 72.6533 li
45.6694 72.6533 li
47.0594 69.0083 li
f
50.0094 72.2383 mo
51.7294 72.2383 li
51.7294 72.6533 li
49.4144 72.6533 li
49.4144 72.2383 li
49.5994 72.0483 49.8544 71.7883 50.1794 71.4583 cv
50.4994 71.1333 50.7044 70.9233 50.7894 70.8283 cv
50.9494 70.6533 51.0594 70.5033 51.1194 70.3783 cv
51.1794 70.2583 51.2144 70.1333 51.2144 70.0133 cv
51.2144 69.8233 51.1444 69.6633 51.0094 69.5433 cv
50.8744 69.4233 50.6994 69.3583 50.4794 69.3583 cv
50.3244 69.3583 50.1594 69.3883 49.9894 69.4383 cv
49.8194 69.4933 49.6344 69.5733 49.4394 69.6833 cv
49.4394 69.1833 li
49.6394 69.1033 49.8244 69.0433 49.9944 69.0033 cv
50.1644 68.9633 50.3244 68.9433 50.4694 68.9433 cv
50.8444 68.9433 51.1444 69.0383 51.3694 69.2283 cv
51.5944 69.4183 51.7094 69.6683 51.7094 69.9833 cv
51.7094 70.1333 51.6794 70.2783 51.6244 70.4083 cv
51.5694 70.5433 51.4694 70.7033 51.3194 70.8833 cv
51.2794 70.9333 51.1494 71.0683 50.9294 71.2933 cv
50.7094 71.5183 50.4044 71.8333 50.0094 72.2383 cv
f
70.2391 61.8564 mo
70.2391 65.3564 li
f
70.2391 61.8564 mo
70.2391 65.3564 li
@
68.6444 69.4933 mo
67.9744 71.3083 li
69.3144 71.3083 li
68.6444 69.4933 li
68.3644 69.0083 mo
68.9244 69.0083 li
70.3144 72.6533 li
69.7994 72.6533 li
69.4694 71.7183 li
67.8244 71.7183 li
67.4944 72.6533 li
66.9744 72.6533 li
68.3644 69.0083 li
f
72.3845 70.6883 mo
72.6195 70.7383 72.8045 70.8433 72.9345 71.0033 cv
73.0645 71.1633 73.1345 71.3633 73.1345 71.5933 cv
73.1345 71.9533 73.0095 72.2333 72.7645 72.4283 cv
72.5145 72.6233 72.1645 72.7183 71.7095 72.7183 cv
71.5545 72.7183 71.3945 72.7033 71.2345 72.6733 cv
71.0745 72.6483 70.9045 72.6033 70.7345 72.5433 cv
70.7345 72.0683 li
70.8695 72.1483 71.0195 72.2083 71.1845 72.2483 cv
71.3445 72.2883 71.5145 72.3083 71.6945 72.3083 cv
72.0045 72.3083 72.2395 72.2483 72.3995 72.1283 cv
72.5595 72.0083 72.6445 71.8283 72.6445 71.5933 cv
72.6445 71.3833 72.5695 71.2133 72.4195 71.0933 cv
72.2695 70.9733 72.0595 70.9083 71.7895 70.9083 cv
71.3645 70.9083 li
71.3645 70.5033 li
71.8095 70.5033 li
72.0495 70.5033 72.2345 70.4583 72.3645 70.3583 cv
72.4945 70.2633 72.5595 70.1233 72.5595 69.9383 cv
72.5595 69.7533 72.4895 69.6083 72.3595 69.5083 cv
72.2245 69.4083 72.0345 69.3583 71.7895 69.3583 cv
71.6545 69.3583 71.5095 69.3733 71.3545 69.4033 cv
71.1995 69.4333 71.0295 69.4783 70.8445 69.5383 cv
70.8445 69.0983 li
71.0295 69.0483 71.2045 69.0083 71.3695 68.9833 cv
71.5295 68.9583 71.6845 68.9433 71.8345 68.9433 cv
72.2045 68.9433 72.4995 69.0283 72.7195 69.1983 cv
72.9395 69.3683 73.0495 69.5983 73.0495 69.8883 cv
73.0495 70.0883 72.9895 70.2583 72.8745 70.3983 cv
72.7595 70.5383 72.5945 70.6383 72.3845 70.6883 cv
f
91.5442 61.8564 mo
91.5442 65.3564 li
f
91.5442 61.8564 mo
91.5442 65.3564 li
@
89.9495 69.4933 mo
89.2795 71.3083 li
90.6195 71.3083 li
89.9495 69.4933 li
89.6695 69.0083 mo
90.2295 69.0083 li
91.6195 72.6533 li
91.1045 72.6533 li
90.7745 71.7183 li
89.1295 71.7183 li
88.7995 72.6533 li
88.2795 72.6533 li
89.6695 69.0083 li
f
93.5495 69.4383 mo
92.3045 71.3833 li
93.5495 71.3833 li
93.5495 69.4383 li
93.4195 69.0083 mo
94.0395 69.0083 li
94.0395 71.3833 li
94.5595 71.3833 li
94.5595 71.7933 li
94.0395 71.7933 li
94.0395 72.6533 li
93.5495 72.6533 li
93.5495 71.7933 li
91.9045 71.7933 li
91.9045 71.3183 li
93.4195 69.0083 li
f
24.4332 61.8564 mo
20.9332 61.8564 li
f
24.4332 61.8564 mo
20.9332 61.8564 li
@
7.86699 60.4349 mo
7.61199 60.4349 7.42199 60.5599 7.29199 60.8099 cv
7.16199 61.0599 7.10199 61.4349 7.10199 61.9349 cv
7.10199 62.4349 7.16199 62.8099 7.29199 63.0599 cv
7.42199 63.3099 7.61199 63.4349 7.86699 63.4349 cv
8.12199 63.4349 8.31199 63.3099 8.44199 63.0599 cv
8.56699 62.8099 8.63199 62.4349 8.63199 61.9349 cv
8.63199 61.4349 8.56699 61.0599 8.44199 60.8099 cv
8.31199 60.5599 8.12199 60.4349 7.86699 60.4349 cv
7.86699 60.0449 mo
8.27199 60.0449 8.58199 60.2099 8.80199 60.5299 cv
9.01699 60.8549 9.12699 61.3249 9.12699 61.9349 cv
9.12699 62.5499 9.01699 63.0199 8.80199 63.3399 cv
8.58199 63.6599 8.27199 63.8199 7.86699 63.8199 cv
7.45699 63.8199 7.14199 63.6599 6.92699 63.3399 cv
6.71199 63.0199 6.60699 62.5499 6.60699 61.9349 cv
6.60699 61.3249 6.71199 60.8549 6.92699 60.5299 cv
7.14199 60.2099 7.45699 60.0449 7.86699 60.0449 cv
f
9.99199 63.1349 mo
10.507 63.1349 li
10.507 63.7549 li
9.99199 63.7549 li
9.99199 63.1349 li
f
11.597 63.6799 mo
11.597 63.2299 li
11.717 63.2899 11.842 63.3349 11.972 63.3649 cv
12.097 63.3949 12.222 63.4099 12.347 63.4099 cv
12.667 63.4099 12.917 63.3049 13.087 63.0849 cv
13.257 62.8649 13.357 62.5349 13.387 62.0849 cv
13.287 62.2249 13.167 62.3349 13.027 62.4099 cv
12.882 62.4849 12.722 62.5199 12.547 62.5199 cv
12.177 62.5199 11.887 62.4099 11.677 62.1899 cv
11.467 61.9699 11.362 61.6699 11.362 61.2849 cv
11.362 60.9149 11.472 60.6149 11.692 60.3849 cv
11.912 60.1599 12.207 60.0449 12.577 60.0449 cv
12.997 60.0449 13.322 60.2099 13.542 60.5299 cv
13.762 60.8549 13.877 61.3249 13.877 61.9349 cv
13.877 62.5149 13.737 62.9699 13.467 63.3099 cv
13.192 63.6499 12.827 63.8199 12.367 63.8199 cv
12.242 63.8199 12.117 63.8049 11.992 63.7849 cv
11.862 63.7649 11.732 63.7299 11.597 63.6799 cv
12.577 62.1349 mo
12.797 62.1349 12.972 62.0599 13.102 61.9099 cv
13.232 61.7599 13.297 61.5499 13.297 61.2849 cv
13.297 61.0249 13.232 60.8149 13.102 60.6649 cv
12.972 60.5149 12.797 60.4349 12.577 60.4349 cv
12.357 60.4349 12.182 60.5149 12.052 60.6649 cv
11.922 60.8149 11.857 61.0249 11.857 61.2849 cv
11.857 61.5499 11.922 61.7599 12.052 61.9099 cv
12.182 62.0599 12.357 62.1349 12.577 62.1349 cv
f
16.117 60.5399 mo
14.872 62.4849 li
16.117 62.4849 li
16.117 60.5399 li
15.987 60.1099 mo
16.607 60.1099 li
16.607 62.4849 li
17.127 62.4849 li
17.127 62.8949 li
16.607 62.8949 li
16.607 63.7549 li
16.117 63.7549 li
16.117 62.8949 li
14.472 62.8949 li
14.472 62.4199 li
15.987 60.1099 li
f
24.4332 44.3007 mo
20.9332 44.3007 li
f
24.4332 44.3007 mo
20.9332 44.3007 li
@
7.86699 42.8792 mo
7.61199 42.8792 7.42199 43.0042 7.29199 43.2542 cv
7.16199 43.5042 7.10199 43.8792 7.10199 44.3792 cv
7.10199 44.8792 7.16199 45.2542 7.29199 45.5042 cv
7.42199 45.7542 7.61199 45.8792 7.86699 45.8792 cv
8.12199 45.8792 8.31199 45.7542 8.44199 45.5042 cv
8.56699 45.2542 8.63199 44.8792 8.63199 44.3792 cv
8.63199 43.8792 8.56699 43.5042 8.44199 43.2542 cv
8.31199 43.0042 8.12199 42.8792 7.86699 42.8792 cv
7.86699 42.4892 mo
8.27199 42.4892 8.58199 42.6542 8.80199 42.9742 cv
9.01699 43.2992 9.12699 43.7692 9.12699 44.3792 cv
9.12699 44.9942 9.01699 45.4642 8.80199 45.7842 cv
8.58199 46.1042 8.27199 46.2642 7.86699 46.2642 cv
7.45699 46.2642 7.14199 46.1042 6.92699 45.7842 cv
6.71199 45.4642 6.60699 44.9942 6.60699 44.3792 cv
6.60699 43.7692 6.71199 43.2992 6.92699 42.9742 cv
7.14199 42.6542 7.45699 42.4892 7.86699 42.4892 cv
f
9.99199 45.5792 mo
10.507 45.5792 li
10.507 46.1992 li
9.99199 46.1992 li
9.99199 45.5792 li
f
11.597 46.1242 mo
11.597 45.6742 li
11.717 45.7342 11.842 45.7792 11.972 45.8092 cv
12.097 45.8392 12.222 45.8542 12.347 45.8542 cv
12.667 45.8542 12.917 45.7492 13.087 45.5292 cv
13.257 45.3092 13.357 44.9792 13.387 44.5292 cv
13.287 44.6692 13.167 44.7792 13.027 44.8542 cv
12.882 44.9292 12.722 44.9642 12.547 44.9642 cv
12.177 44.9642 11.887 44.8542 11.677 44.6342 cv
11.467 44.4142 11.362 44.1142 11.362 43.7292 cv
11.362 43.3592 11.472 43.0592 11.692 42.8292 cv
11.912 42.6042 12.207 42.4892 12.577 42.4892 cv
12.997 42.4892 13.322 42.6542 13.542 42.9742 cv
13.762 43.2992 13.877 43.7692 13.877 44.3792 cv
13.877 44.9592 13.737 45.4142 13.467 45.7542 cv
13.192 46.0942 12.827 46.2642 12.367 46.2642 cv
12.242 46.2642 12.117 46.2492 11.992 46.2292 cv
11.862 46.2092 11.732 46.1742 11.597 46.1242 cv
12.577 44.5792 mo
12.797 44.5792 12.972 44.5042 13.102 44.3542 cv
13.232 44.2042 13.297 43.9942 13.297 43.7292 cv
13.297 43.4692 13.232 43.2592 13.102 43.1092 cv
12.972 42.9592 12.797 42.8792 12.577 42.8792 cv
12.357 42.8792 12.182 42.9592 12.052 43.1092 cv
11.922 43.2592 11.857 43.4692 11.857 43.7292 cv
11.857 43.9942 11.922 44.2042 12.052 44.3542 cv
12.182 44.5042 12.357 44.5792 12.577 44.5792 cv
f
15.877 44.1792 mo
15.657 44.1792 15.482 44.2592 15.352 44.4092 cv
15.222 44.5592 15.157 44.7692 15.157 45.0292 cv
15.157 45.2942 15.222 45.5042 15.352 45.6542 cv
15.482 45.8042 15.657 45.8792 15.877 45.8792 cv
16.097 45.8792 16.272 45.8042 16.402 45.6542 cv
16.532 45.5042 16.597 45.2942 16.597 45.0292 cv
16.597 44.7692 16.532 44.5592 16.402 44.4092 cv
16.272 44.2592 16.097 44.1792 15.877 44.1792 cv
16.857 42.6342 mo
16.857 43.0842 li
16.732 43.0242 16.607 42.9792 16.482 42.9492 cv
16.352 42.9192 16.227 42.9042 16.107 42.9042 cv
15.777 42.9042 15.527 43.0142 15.357 43.2342 cv
15.187 43.4542 15.087 43.7892 15.067 44.2292 cv
15.162 44.0892 15.282 43.9792 15.427 43.9042 cv
15.572 43.8292 15.732 43.7892 15.907 43.7892 cv
16.272 43.7892 16.562 43.9042 16.772 44.1242 cv
16.982 44.3442 17.092 44.6492 17.092 45.0292 cv
17.092 45.4042 16.977 45.7042 16.757 45.9292 cv
16.537 46.1542 16.242 46.2642 15.877 46.2642 cv
15.457 46.2642 15.132 46.1042 14.912 45.7842 cv
14.687 45.4642 14.577 44.9942 14.577 44.3792 cv
14.577 43.8042 14.712 43.3442 14.987 43.0042 cv
15.257 42.6642 15.627 42.4892 16.087 42.4892 cv
16.207 42.4892 16.332 42.5042 16.462 42.5242 cv
16.587 42.5492 16.717 42.5842 16.857 42.6342 cv
f
24.4332 26.745 mo
20.9332 26.745 li
f
24.4332 26.745 mo
20.9332 26.745 li
@
7.86699 25.3234 mo
7.61199 25.3234 7.42199 25.4484 7.29199 25.6984 cv
7.16199 25.9484 7.10199 26.3234 7.10199 26.8234 cv
7.10199 27.3234 7.16199 27.6984 7.29199 27.9484 cv
7.42199 28.1984 7.61199 28.3234 7.86699 28.3234 cv
8.12199 28.3234 8.31199 28.1984 8.44199 27.9484 cv
8.56699 27.6984 8.63199 27.3234 8.63199 26.8234 cv
8.63199 26.3234 8.56699 25.9484 8.44199 25.6984 cv
8.31199 25.4484 8.12199 25.3234 7.86699 25.3234 cv
7.86699 24.9334 mo
8.27199 24.9334 8.58199 25.0984 8.80199 25.4184 cv
9.01699 25.7434 9.12699 26.2134 9.12699 26.8234 cv
9.12699 27.4384 9.01699 27.9084 8.80199 28.2284 cv
8.58199 28.5484 8.27199 28.7084 7.86699 28.7084 cv
7.45699 28.7084 7.14199 28.5484 6.92699 28.2284 cv
6.71199 27.9084 6.60699 27.4384 6.60699 26.8234 cv
6.60699 26.2134 6.71199 25.7434 6.92699 25.4184 cv
7.14199 25.0984 7.45699 24.9334 7.86699 24.9334 cv
f
9.99199 28.0234 mo
10.507 28.0234 li
10.507 28.6434 li
9.99199 28.6434 li
9.99199 28.0234 li
f
11.597 28.5684 mo
11.597 28.1184 li
11.717 28.1784 11.842 28.2234 11.972 28.2534 cv
12.097 28.2834 12.222 28.2984 12.347 28.2984 cv
12.667 28.2984 12.917 28.1934 13.087 27.9734 cv
13.257 27.7534 13.357 27.4234 13.387 26.9734 cv
13.287 27.1134 13.167 27.2234 13.027 27.2984 cv
12.882 27.3734 12.722 27.4084 12.547 27.4084 cv
12.177 27.4084 11.887 27.2984 11.677 27.0784 cv
11.467 26.8584 11.362 26.5584 11.362 26.1734 cv
11.362 25.8034 11.472 25.5034 11.692 25.2734 cv
11.912 25.0484 12.207 24.9334 12.577 24.9334 cv
12.997 24.9334 13.322 25.0984 13.542 25.4184 cv
13.762 25.7434 13.877 26.2134 13.877 26.8234 cv
13.877 27.4034 13.737 27.8584 13.467 28.1984 cv
13.192 28.5384 12.827 28.7084 12.367 28.7084 cv
12.242 28.7084 12.117 28.6934 11.992 28.6734 cv
11.862 28.6534 11.732 28.6184 11.597 28.5684 cv
12.577 27.0234 mo
12.797 27.0234 12.972 26.9484 13.102 26.7984 cv
13.232 26.6484 13.297 26.4384 13.297 26.1734 cv
13.297 25.9134 13.232 25.7034 13.102 25.5534 cv
12.972 25.4034 12.797 25.3234 12.577 25.3234 cv
12.357 25.3234 12.182 25.4034 12.052 25.5534 cv
11.922 25.7034 11.857 25.9134 11.857 26.1734 cv
11.857 26.4384 11.922 26.6484 12.052 26.7984 cv
12.182 26.9484 12.357 27.0234 12.577 27.0234 cv
f
15.817 26.9134 mo
15.582 26.9134 15.397 26.9784 15.262 27.1034 cv
15.127 27.2284 15.062 27.3984 15.062 27.6184 cv
15.062 27.8384 15.127 28.0134 15.262 28.1384 cv
15.397 28.2634 15.582 28.3234 15.817 28.3234 cv
16.047 28.3234 16.232 28.2634 16.367 28.1334 cv
16.502 28.0084 16.572 27.8384 16.572 27.6184 cv
16.572 27.3984 16.502 27.2284 16.372 27.1034 cv
16.237 26.9784 16.052 26.9134 15.817 26.9134 cv
15.322 26.7034 mo
15.112 26.6534 14.947 26.5534 14.827 26.4084 cv
14.707 26.2634 14.652 26.0884 14.652 25.8784 cv
14.652 25.5884 14.752 25.3584 14.962 25.1884 cv
15.167 25.0184 15.452 24.9334 15.817 24.9334 cv
16.177 24.9334 16.462 25.0184 16.672 25.1884 cv
16.877 25.3584 16.982 25.5884 16.982 25.8784 cv
16.982 26.0884 16.922 26.2634 16.802 26.4084 cv
16.682 26.5534 16.522 26.6534 16.312 26.7034 cv
16.547 26.7584 16.732 26.8684 16.867 27.0284 cv
16.997 27.1884 17.067 27.3884 17.067 27.6184 cv
17.067 27.9734 16.957 28.2434 16.742 28.4284 cv
16.522 28.6184 16.217 28.7084 15.817 28.7084 cv
15.412 28.7084 15.102 28.6184 14.887 28.4284 cv
14.672 28.2434 14.567 27.9734 14.567 27.6184 cv
14.567 27.3884 14.632 27.1884 14.767 27.0284 cv
14.897 26.8684 15.082 26.7584 15.322 26.7034 cv
15.142 25.9234 mo
15.142 26.1134 15.197 26.2634 15.317 26.3684 cv
15.437 26.4734 15.602 26.5234 15.817 26.5234 cv
16.027 26.5234 16.192 26.4734 16.312 26.3684 cv
16.432 26.2634 16.492 26.1134 16.492 25.9234 cv
16.492 25.7334 16.432 25.5884 16.312 25.4834 cv
16.192 25.3784 16.027 25.3234 15.817 25.3234 cv
15.602 25.3234 15.437 25.3784 15.317 25.4834 cv
15.197 25.5884 15.142 25.7334 15.142 25.9234 cv
f
24.4332 9.1893 mo
20.9332 9.1893 li
f
24.4332 9.1893 mo
20.9332 9.1893 li
@
6.89699 10.6727 mo
7.70199 10.6727 li
7.70199 7.89274 li
6.82699 8.06774 li
6.82699 7.61774 li
7.69699 7.44274 li
8.19199 7.44274 li
8.19199 10.6727 li
8.99699 10.6727 li
8.99699 11.0877 li
6.89699 11.0877 li
6.89699 10.6727 li
f
9.99199 10.4677 mo
10.507 10.4677 li
10.507 11.0877 li
9.99199 11.0877 li
9.99199 10.4677 li
f
12.637 7.76774 mo
12.382 7.76774 12.192 7.89274 12.062 8.14274 cv
11.932 8.39274 11.872 8.76774 11.872 9.26774 cv
11.872 9.76774 11.932 10.1427 12.062 10.3927 cv
12.192 10.6427 12.382 10.7677 12.637 10.7677 cv
12.892 10.7677 13.082 10.6427 13.212 10.3927 cv
13.337 10.1427 13.402 9.76774 13.402 9.26774 cv
13.402 8.76774 13.337 8.39274 13.212 8.14274 cv
13.082 7.89274 12.892 7.76774 12.637 7.76774 cv
12.637 7.37774 mo
13.042 7.37774 13.352 7.54274 13.572 7.86274 cv
13.787 8.18774 13.897 8.65774 13.897 9.26774 cv
13.897 9.88274 13.787 10.3527 13.572 10.6727 cv
13.352 10.9927 13.042 11.1527 12.637 11.1527 cv
12.227 11.1527 11.912 10.9927 11.697 10.6727 cv
11.482 10.3527 11.377 9.88274 11.377 9.26774 cv
11.377 8.65774 11.482 8.18774 11.697 7.86274 cv
11.912 7.54274 12.227 7.37774 12.637 7.37774 cv
f
15.817 7.76774 mo
15.562 7.76774 15.372 7.89274 15.242 8.14274 cv
15.112 8.39274 15.052 8.76774 15.052 9.26774 cv
15.052 9.76774 15.112 10.1427 15.242 10.3927 cv
15.372 10.6427 15.562 10.7677 15.817 10.7677 cv
16.072 10.7677 16.262 10.6427 16.392 10.3927 cv
16.517 10.1427 16.582 9.76774 16.582 9.26774 cv
16.582 8.76774 16.517 8.39274 16.392 8.14274 cv
16.262 7.89274 16.072 7.76774 15.817 7.76774 cv
15.817 7.37774 mo
16.222 7.37774 16.532 7.54274 16.752 7.86274 cv
16.967 8.18774 17.077 8.65774 17.077 9.26774 cv
17.077 9.88274 16.967 10.3527 16.752 10.6727 cv
16.532 10.9927 16.222 11.1527 15.817 11.1527 cv
15.407 11.1527 15.092 10.9927 14.877 10.6727 cv
14.662 10.3527 14.557 9.88274 14.557 9.26774 cv
14.557 8.65774 14.662 8.18774 14.877 7.86274 cv
15.092 7.54274 15.407 7.37774 15.817 7.37774 cv
f
1 lw
2 lc
27.629 53.0786 mo
48.9341 35.084 li
70.2391 31.6606 li
91.5442 9.71597 li
1 /0 /CSD get_res sepcs
.337255 sep
@
gsave
25.6291 55.0786 mo
29.629 55.0786 li
29.629 51.0786 li
25.6291 51.0786 li
25.6291 55.0786 li
clp
27.629 51.5786 mo
26.129 54.5786 li
29.129 54.5786 li
cp
f
0 lc
0 lj
27.629 51.5786 mo
26.129 54.5786 li
29.129 54.5786 li
cp
@
grestore
gsave
46.934 37.084 mo
50.9341 37.084 li
50.9341 33.084 li
46.934 33.084 li
46.934 37.084 li
clp
48.9341 33.584 mo
47.4341 36.584 li
50.4341 36.584 li
cp
f
0 lc
0 lj
48.9341 33.584 mo
47.4341 36.584 li
50.4341 36.584 li
cp
@
grestore
gsave
68.2391 33.6606 mo
72.2391 33.6606 li
72.2391 29.6606 li
68.2391 29.6606 li
68.2391 33.6606 li
clp
70.2391 30.1606 mo
68.7391 33.1606 li
71.7391 33.1606 li
cp
f
0 lc
0 lj
70.2391 30.1606 mo
68.7391 33.1606 li
71.7391 33.1606 li
cp
@
grestore
gsave
89.5442 11.7159 mo
93.5441 11.7159 li
93.5441 7.71596 li
89.5442 7.71596 li
89.5442 11.7159 li
clp
91.5442 8.21594 mo
90.0442 11.2159 li
93.0442 11.2159 li
cp
f
0 lc
0 lj
91.5442 8.21594 mo
90.0442 11.2159 li
93.0442 11.2159 li
cp
@
grestore
27.629 28.0617 mo
48.9341 21.3027 li
70.2391 22.9705 li
91.5442 9.89154 li
/1 
[/DeviceCMYK] /CSA add_res
0 .760891 .735378 0 cmyk
@
gsave
25.6291 30.0617 mo
29.629 30.0617 li
29.629 26.0617 li
25.6291 26.0617 li
25.6291 30.0617 li
clp
27.629 29.5617 mo
28.0268 29.5617 28.4084 29.4036 28.6897 29.1223 cv
28.9709 28.841 29.129 28.4595 29.129 28.0617 cv
29.129 27.6639 28.9709 27.2823 28.6897 27.001 cv
28.4084 26.7197 28.0268 26.5617 27.629 26.5617 cv
27.2312 26.5617 26.8496 26.7197 26.5683 27.001 cv
26.287 27.2823 26.129 27.6639 26.129 28.0617 cv
26.129 28.4595 26.287 28.841 26.5683 29.1223 cv
26.8496 29.4036 27.2312 29.5617 27.629 29.5617 cv
cp
f
0 lc
27.629 29.5617 mo
28.0268 29.5617 28.4084 29.4036 28.6897 29.1223 cv
28.9709 28.841 29.129 28.4595 29.129 28.0617 cv
29.129 27.6639 28.9709 27.2823 28.6897 27.001 cv
28.4084 26.7197 28.0268 26.5617 27.629 26.5617 cv
27.2312 26.5617 26.8496 26.7197 26.5683 27.001 cv
26.287 27.2823 26.129 27.6639 26.129 28.0617 cv
26.129 28.4595 26.287 28.841 26.5683 29.1223 cv
26.8496 29.4036 27.2312 29.5617 27.629 29.5617 cv
cp
@
grestore
gsave
46.934 23.3027 mo
50.9341 23.3027 li
50.9341 19.3027 li
46.934 19.3027 li
46.934 23.3027 li
clp
48.9341 22.8027 mo
49.3319 22.8027 49.7134 22.6447 49.9947 22.3634 cv
50.276 22.0821 50.4341 21.7005 50.4341 21.3027 cv
50.4341 20.9049 50.276 20.5234 49.9947 20.2421 cv
49.7134 19.9608 49.3319 19.8027 48.9341 19.8027 cv
48.5363 19.8027 48.1547 19.9608 47.8734 20.2421 cv
47.5921 20.5234 47.4341 20.9049 47.4341 21.3027 cv
47.4341 21.7005 47.5921 22.0821 47.8734 22.3634 cv
48.1547 22.6447 48.5363 22.8027 48.9341 22.8027 cv
cp
f
0 lc
48.9341 22.8027 mo
49.3319 22.8027 49.7134 22.6447 49.9947 22.3634 cv
50.276 22.0821 50.4341 21.7005 50.4341 21.3027 cv
50.4341 20.9049 50.276 20.5234 49.9947 20.2421 cv
49.7134 19.9608 49.3319 19.8027 48.9341 19.8027 cv
48.5363 19.8027 48.1547 19.9608 47.8734 20.2421 cv
47.5921 20.5234 47.4341 20.9049 47.4341 21.3027 cv
47.4341 21.7005 47.5921 22.0821 47.8734 22.3634 cv
48.1547 22.6447 48.5363 22.8027 48.9341 22.8027 cv
cp
@
grestore
gsave
68.2391 24.9705 mo
72.2391 24.9705 li
72.2391 20.9705 li
68.2391 20.9705 li
68.2391 24.9705 li
clp
70.2391 24.4705 mo
70.6369 24.4705 71.0185 24.3125 71.2998 24.0312 cv
71.5811 23.7499 71.7391 23.3683 71.7391 22.9705 cv
71.7391 22.5727 71.5811 22.1912 71.2998 21.9099 cv
71.0185 21.6286 70.6369 21.4705 70.2391 21.4705 cv
69.8413 21.4705 69.4597 21.6286 69.1785 21.9099 cv
68.8972 22.1912 68.7391 22.5727 68.7391 22.9705 cv
68.7391 23.3683 68.8972 23.7499 69.1785 24.0312 cv
69.4597 24.3125 69.8413 24.4705 70.2391 24.4705 cv
cp
f
0 lc
70.2391 24.4705 mo
70.6369 24.4705 71.0185 24.3125 71.2998 24.0312 cv
71.5811 23.7499 71.7391 23.3683 71.7391 22.9705 cv
71.7391 22.5727 71.5811 22.1912 71.2998 21.9099 cv
71.0185 21.6286 70.6369 21.4705 70.2391 21.4705 cv
69.8413 21.4705 69.4597 21.6286 69.1785 21.9099 cv
68.8972 22.1912 68.7391 22.5727 68.7391 22.9705 cv
68.7391 23.3683 68.8972 23.7499 69.1785 24.0312 cv
69.4597 24.3125 69.8413 24.4705 70.2391 24.4705 cv
cp
@
grestore
gsave
89.5442 11.8915 mo
93.5441 11.8915 li
93.5441 7.89154 li
89.5442 7.89154 li
89.5442 11.8915 li
clp
91.5442 11.3915 mo
91.942 11.3915 92.3236 11.2335 92.6048 10.9522 cv
92.8861 10.6709 93.0442 10.2893 93.0442 9.89151 cv
93.0442 9.4937 92.8861 9.11214 92.6048 8.83085 cv
92.3236 8.54956 91.942 8.39151 91.5442 8.39151 cv
91.1464 8.39151 90.7648 8.54956 90.4835 8.83085 cv
90.2022 9.11214 90.0442 9.4937 90.0442 9.89151 cv
90.0442 10.2893 90.2022 10.6709 90.4835 10.9522 cv
90.7648 11.2335 91.1464 11.3915 91.5442 11.3915 cv
cp
f
0 lc
91.5442 11.3915 mo
91.942 11.3915 92.3236 11.2335 92.6048 10.9522 cv
92.8861 10.6709 93.0442 10.2893 93.0442 9.89151 cv
93.0442 9.4937 92.8861 9.11214 92.6048 8.83085 cv
92.3236 8.54956 91.942 8.39151 91.5442 8.39151 cv
91.1464 8.39151 90.7648 8.54956 90.4835 8.83085 cv
90.2022 9.11214 90.0442 9.4937 90.0442 9.89151 cv
90.0442 10.2893 90.2022 10.6709 90.4835 10.9522 cv
90.7648 11.2335 91.1464 11.3915 91.5442 11.3915 cv
cp
@
grestore
27.629 49.9536 mo
48.9341 45.2707 li
70.2391 35.6273 li
91.5442 33.0212 li
.468757 .0952163 .538781 0 cmyk
@
gsave
25.7024 51.6671 mo
29.5556 51.6671 li
29.5556 47.9537 li
25.7024 47.9537 li
25.7024 51.6671 li
clp
27.629 48.4536 mo
27.2922 49.4901 li
26.2024 49.4901 li
27.0841 50.1307 li
26.7473 51.1672 li
27.629 50.5266 li
28.5107 51.1672 li
28.1739 50.1307 li
29.0556 49.4901 li
27.9658 49.4901 li
cp
f
0 lc
2 lj
27.629 48.4536 mo
27.2922 49.4901 li
26.2024 49.4901 li
27.0841 50.1307 li
26.7473 51.1672 li
27.629 50.5266 li
28.5107 51.1672 li
28.1739 50.1307 li
29.0556 49.4901 li
27.9658 49.4901 li
cp
@
grestore
gsave
47.0075 46.9842 mo
50.8606 46.9842 li
50.8606 43.2707 li
47.0075 43.2707 li
47.0075 46.9842 li
clp
48.9341 43.7707 mo
48.5973 44.8071 li
47.5075 44.8071 li
48.3892 45.4477 li
48.0524 46.4842 li
48.9341 45.8436 li
49.8157 46.4842 li
49.479 45.4477 li
50.3606 44.8071 li
49.2708 44.8071 li
cp
f
0 lc
2 lj
48.9341 43.7707 mo
48.5973 44.8071 li
47.5075 44.8071 li
48.3892 45.4477 li
48.0524 46.4842 li
48.9341 45.8436 li
49.8157 46.4842 li
49.479 45.4477 li
50.3606 44.8071 li
49.2708 44.8071 li
cp
@
grestore
gsave
68.3126 37.3409 mo
72.1657 37.3409 li
72.1657 33.6273 li
68.3126 33.6273 li
68.3126 37.3409 li
clp
70.2391 34.1273 mo
69.9024 35.1638 li
68.8125 35.1638 li
69.6942 35.8044 li
69.3574 36.8408 li
70.2391 36.2003 li
71.1208 36.8408 li
70.784 35.8044 li
71.6657 35.1638 li
70.5759 35.1638 li
cp
f
0 lc
2 lj
70.2391 34.1273 mo
69.9024 35.1638 li
68.8125 35.1638 li
69.6942 35.8044 li
69.3574 36.8408 li
70.2391 36.2003 li
71.1208 36.8408 li
70.784 35.8044 li
71.6657 35.1638 li
70.5759 35.1638 li
cp
@
grestore
gsave
89.6176 34.7348 mo
93.4708 34.7348 li
93.4708 31.0212 li
89.6176 31.0212 li
89.6176 34.7348 li
clp
91.5442 31.5212 mo
91.2074 32.5577 li
90.1176 32.5577 li
90.9993 33.1982 li
90.6625 34.2347 li
91.5442 33.5941 li
92.4259 34.2347 li
92.0891 33.1982 li
92.9708 32.5577 li
91.881 32.5577 li
cp
f
0 lc
2 lj
91.5442 31.5212 mo
91.2074 32.5577 li
90.1176 32.5577 li
90.9993 33.1982 li
90.6625 34.2347 li
91.5442 33.5941 li
92.4259 34.2347 li
92.0891 33.1982 li
92.9708 32.5577 li
91.881 32.5577 li
cp
@
grestore
27.629 46.2994 mo
48.9341 42.8357 li
70.2391 34.1474 li
91.5442 30.9944 li
.749203 .420264 .103029 .000457771 cmyk
@
gsave
25.6291 48.2994 mo
29.629 48.2994 li
29.629 44.2994 li
25.6291 44.2994 li
25.6291 48.2994 li
clp
26.129 47.7994 mo
29.129 47.7994 li
29.129 44.7994 li
26.129 44.7994 li
cp
f
0 lc
0 lj
26.129 47.7994 mo
29.129 47.7994 li
29.129 44.7994 li
26.129 44.7994 li
cp
@
grestore
gsave
46.934 44.8357 mo
50.9341 44.8357 li
50.9341 40.8357 li
46.934 40.8357 li
46.934 44.8357 li
clp
47.4341 44.3357 mo
50.4341 44.3357 li
50.4341 41.3357 li
47.4341 41.3357 li
cp
f
0 lc
0 lj
47.4341 44.3357 mo
50.4341 44.3357 li
50.4341 41.3357 li
47.4341 41.3357 li
cp
@
grestore
gsave
68.2391 36.1474 mo
72.2391 36.1474 li
72.2391 32.1474 li
68.2391 32.1474 li
68.2391 36.1474 li
clp
68.7391 35.6474 mo
71.7391 35.6474 li
71.7391 32.6474 li
68.7391 32.6474 li
cp
f
0 lc
0 lj
68.7391 35.6474 mo
71.7391 35.6474 li
71.7391 32.6474 li
68.7391 32.6474 li
cp
@
grestore
gsave
89.5442 32.9944 mo
93.5441 32.9944 li
93.5441 28.9944 li
89.5442 28.9944 li
89.5442 32.9944 li
clp
90.0442 32.4944 mo
93.0442 32.4944 li
93.0442 29.4944 li
90.0442 29.4944 li
cp
f
0 lc
0 lj
90.0442 32.4944 mo
93.0442 32.4944 li
93.0442 29.4944 li
90.0442 29.4944 li
cp
@
grestore
.8 lw
0 lj
24.4332 61.8564 mo
24.4332 7.54785 li
1 /0 /CSD get_res sepcs
1 sep
@
94.7399 61.8564 mo
94.7399 7.54785 li
@
24.4332 61.8564 mo
94.7399 61.8564 li
@
24.4332 7.54785 mo
94.7399 7.54785 li
@
115.832 61.8564 mo
186.139 61.8564 li
186.139 7.54785 li
115.832 7.54785 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
119.028 61.8564 mo
119.028 65.3564 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
119.028 61.8564 mo
119.028 65.3564 li
@
117.433 69.4933 mo
116.763 71.3083 li
118.103 71.3083 li
117.433 69.4933 li
117.153 69.0083 mo
117.713 69.0083 li
119.103 72.6533 li
118.588 72.6533 li
118.258 71.7183 li
116.613 71.7183 li
116.283 72.6533 li
115.763 72.6533 li
117.153 69.0083 li
f
119.763 72.2383 mo
120.568 72.2383 li
120.568 69.4583 li
119.693 69.6333 li
119.693 69.1833 li
120.563 69.0083 li
121.058 69.0083 li
121.058 72.2383 li
121.863 72.2383 li
121.863 72.6533 li
119.763 72.6533 li
119.763 72.2383 li
f
140.333 61.8564 mo
140.333 65.3564 li
f
140.333 61.8564 mo
140.333 65.3564 li
@
138.738 69.4933 mo
138.068 71.3083 li
139.408 71.3083 li
138.738 69.4933 li
138.458 69.0083 mo
139.018 69.0083 li
140.408 72.6533 li
139.893 72.6533 li
139.563 71.7183 li
137.918 71.7183 li
137.588 72.6533 li
137.068 72.6533 li
138.458 69.0083 li
f
141.408 72.2383 mo
143.128 72.2383 li
143.128 72.6533 li
140.813 72.6533 li
140.813 72.2383 li
140.998 72.0483 141.253 71.7883 141.578 71.4583 cv
141.898 71.1333 142.103 70.9233 142.188 70.8283 cv
142.348 70.6533 142.458 70.5033 142.518 70.3783 cv
142.578 70.2583 142.613 70.1333 142.613 70.0133 cv
142.613 69.8233 142.543 69.6633 142.408 69.5433 cv
142.273 69.4233 142.098 69.3583 141.878 69.3583 cv
141.723 69.3583 141.558 69.3883 141.388 69.4383 cv
141.218 69.4933 141.033 69.5733 140.838 69.6833 cv
140.838 69.1833 li
141.038 69.1033 141.223 69.0433 141.393 69.0033 cv
141.563 68.9633 141.723 68.9433 141.868 68.9433 cv
142.243 68.9433 142.543 69.0383 142.768 69.2283 cv
142.993 69.4183 143.108 69.6683 143.108 69.9833 cv
143.108 70.1333 143.078 70.2783 143.023 70.4083 cv
142.968 70.5433 142.868 70.7033 142.718 70.8833 cv
142.678 70.9333 142.548 71.0683 142.328 71.2933 cv
142.108 71.5183 141.803 71.8333 141.408 72.2383 cv
f
161.638 61.8564 mo
161.638 65.3564 li
f
161.638 61.8564 mo
161.638 65.3564 li
@
160.043 69.4933 mo
159.373 71.3083 li
160.713 71.3083 li
160.043 69.4933 li
159.763 69.0083 mo
160.323 69.0083 li
161.713 72.6533 li
161.198 72.6533 li
160.868 71.7183 li
159.223 71.7183 li
158.893 72.6533 li
158.373 72.6533 li
159.763 69.0083 li
f
163.783 70.6883 mo
164.018 70.7383 164.203 70.8433 164.333 71.0033 cv
164.463 71.1633 164.533 71.3633 164.533 71.5933 cv
164.533 71.9533 164.408 72.2333 164.163 72.4283 cv
163.913 72.6233 163.563 72.7183 163.108 72.7183 cv
162.953 72.7183 162.793 72.7033 162.633 72.6733 cv
162.473 72.6483 162.303 72.6033 162.133 72.5433 cv
162.133 72.0683 li
162.268 72.1483 162.418 72.2083 162.583 72.2483 cv
162.743 72.2883 162.913 72.3083 163.093 72.3083 cv
163.403 72.3083 163.638 72.2483 163.798 72.1283 cv
163.958 72.0083 164.043 71.8283 164.043 71.5933 cv
164.043 71.3833 163.968 71.2133 163.818 71.0933 cv
163.668 70.9733 163.458 70.9083 163.188 70.9083 cv
162.763 70.9083 li
162.763 70.5033 li
163.208 70.5033 li
163.448 70.5033 163.633 70.4583 163.763 70.3583 cv
163.893 70.2633 163.958 70.1233 163.958 69.9383 cv
163.958 69.7533 163.888 69.6083 163.758 69.5083 cv
163.623 69.4083 163.433 69.3583 163.188 69.3583 cv
163.053 69.3583 162.908 69.3733 162.753 69.4033 cv
162.598 69.4333 162.428 69.4783 162.243 69.5383 cv
162.243 69.0983 li
162.428 69.0483 162.603 69.0083 162.768 68.9833 cv
162.928 68.9583 163.083 68.9433 163.233 68.9433 cv
163.603 68.9433 163.898 69.0283 164.118 69.1983 cv
164.338 69.3683 164.448 69.5983 164.448 69.8883 cv
164.448 70.0883 164.388 70.2583 164.273 70.3983 cv
164.158 70.5383 163.993 70.6383 163.783 70.6883 cv
f
182.943 61.8564 mo
182.943 65.3564 li
f
182.943 61.8564 mo
182.943 65.3564 li
@
181.348 69.4933 mo
180.678 71.3083 li
182.018 71.3083 li
181.348 69.4933 li
181.068 69.0083 mo
181.628 69.0083 li
183.018 72.6533 li
182.503 72.6533 li
182.173 71.7183 li
180.528 71.7183 li
180.198 72.6533 li
179.678 72.6533 li
181.068 69.0083 li
f
184.948 69.4383 mo
183.703 71.3833 li
184.948 71.3833 li
184.948 69.4383 li
184.818 69.0083 mo
185.438 69.0083 li
185.438 71.3833 li
185.958 71.3833 li
185.958 71.7933 li
185.438 71.7933 li
185.438 72.6533 li
184.948 72.6533 li
184.948 71.7933 li
183.303 71.7933 li
183.303 71.3183 li
184.818 69.0083 li
f
115.832 61.8564 mo
112.332 61.8564 li
f
115.832 61.8564 mo
112.332 61.8564 li
@
99.2657 60.4349 mo
99.0107 60.4349 98.8207 60.5599 98.6907 60.8099 cv
98.5607 61.0599 98.5007 61.4349 98.5007 61.9349 cv
98.5007 62.4349 98.5607 62.8099 98.6907 63.0599 cv
98.8207 63.3099 99.0107 63.4349 99.2657 63.4349 cv
99.5207 63.4349 99.7107 63.3099 99.8407 63.0599 cv
99.9657 62.8099 100.031 62.4349 100.031 61.9349 cv
100.031 61.4349 99.9657 61.0599 99.8407 60.8099 cv
99.7107 60.5599 99.5207 60.4349 99.2657 60.4349 cv
99.2657 60.0449 mo
99.6707 60.0449 99.9807 60.2099 100.201 60.5299 cv
100.416 60.8549 100.526 61.3249 100.526 61.9349 cv
100.526 62.5499 100.416 63.0199 100.201 63.3399 cv
99.9807 63.6599 99.6707 63.8199 99.2657 63.8199 cv
98.8557 63.8199 98.5407 63.6599 98.3257 63.3399 cv
98.1107 63.0199 98.0057 62.5499 98.0057 61.9349 cv
98.0057 61.3249 98.1107 60.8549 98.3257 60.5299 cv
98.5407 60.2099 98.8557 60.0449 99.2657 60.0449 cv
f
101.391 63.1349 mo
101.906 63.1349 li
101.906 63.7549 li
101.391 63.7549 li
101.391 63.1349 li
f
102.996 63.6799 mo
102.996 63.2299 li
103.116 63.2899 103.241 63.3349 103.371 63.3649 cv
103.496 63.3949 103.621 63.4099 103.746 63.4099 cv
104.066 63.4099 104.316 63.3049 104.486 63.0849 cv
104.656 62.8649 104.756 62.5349 104.786 62.0849 cv
104.686 62.2249 104.566 62.3349 104.426 62.4099 cv
104.281 62.4849 104.121 62.5199 103.946 62.5199 cv
103.576 62.5199 103.286 62.4099 103.076 62.1899 cv
102.866 61.9699 102.761 61.6699 102.761 61.2849 cv
102.761 60.9149 102.871 60.6149 103.091 60.3849 cv
103.311 60.1599 103.606 60.0449 103.976 60.0449 cv
104.396 60.0449 104.721 60.2099 104.941 60.5299 cv
105.161 60.8549 105.276 61.3249 105.276 61.9349 cv
105.276 62.5149 105.136 62.9699 104.866 63.3099 cv
104.591 63.6499 104.226 63.8199 103.766 63.8199 cv
103.641 63.8199 103.516 63.8049 103.391 63.7849 cv
103.261 63.7649 103.131 63.7299 102.996 63.6799 cv
103.976 62.1349 mo
104.196 62.1349 104.371 62.0599 104.501 61.9099 cv
104.631 61.7599 104.696 61.5499 104.696 61.2849 cv
104.696 61.0249 104.631 60.8149 104.501 60.6649 cv
104.371 60.5149 104.196 60.4349 103.976 60.4349 cv
103.756 60.4349 103.581 60.5149 103.451 60.6649 cv
103.321 60.8149 103.256 61.0249 103.256 61.2849 cv
103.256 61.5499 103.321 61.7599 103.451 61.9099 cv
103.581 62.0599 103.756 62.1349 103.976 62.1349 cv
f
107.516 60.5399 mo
106.271 62.4849 li
107.516 62.4849 li
107.516 60.5399 li
107.386 60.1099 mo
108.006 60.1099 li
108.006 62.4849 li
108.526 62.4849 li
108.526 62.8949 li
108.006 62.8949 li
108.006 63.7549 li
107.516 63.7549 li
107.516 62.8949 li
105.871 62.8949 li
105.871 62.4199 li
107.386 60.1099 li
f
115.832 44.2977 mo
112.332 44.2977 li
f
115.832 44.2977 mo
112.332 44.2977 li
@
99.2657 42.8762 mo
99.0107 42.8762 98.8207 43.0012 98.6907 43.2512 cv
98.5607 43.5012 98.5007 43.8762 98.5007 44.3762 cv
98.5007 44.8762 98.5607 45.2512 98.6907 45.5012 cv
98.8207 45.7512 99.0107 45.8762 99.2657 45.8762 cv
99.5207 45.8762 99.7107 45.7512 99.8407 45.5012 cv
99.9657 45.2512 100.031 44.8762 100.031 44.3762 cv
100.031 43.8762 99.9657 43.5012 99.8407 43.2512 cv
99.7107 43.0012 99.5207 42.8762 99.2657 42.8762 cv
99.2657 42.4862 mo
99.6707 42.4862 99.9807 42.6512 100.201 42.9712 cv
100.416 43.2962 100.526 43.7662 100.526 44.3762 cv
100.526 44.9912 100.416 45.4612 100.201 45.7812 cv
99.9807 46.1012 99.6707 46.2612 99.2657 46.2612 cv
98.8557 46.2612 98.5407 46.1012 98.3257 45.7812 cv
98.1107 45.4612 98.0057 44.9912 98.0057 44.3762 cv
98.0057 43.7662 98.1107 43.2962 98.3257 42.9712 cv
98.5407 42.6512 98.8557 42.4862 99.2657 42.4862 cv
f
101.391 45.5762 mo
101.906 45.5762 li
101.906 46.1962 li
101.391 46.1962 li
101.391 45.5762 li
f
102.996 46.1212 mo
102.996 45.6712 li
103.116 45.7312 103.241 45.7762 103.371 45.8062 cv
103.496 45.8362 103.621 45.8512 103.746 45.8512 cv
104.066 45.8512 104.316 45.7462 104.486 45.5262 cv
104.656 45.3062 104.756 44.9762 104.786 44.5262 cv
104.686 44.6662 104.566 44.7762 104.426 44.8512 cv
104.281 44.9262 104.121 44.9612 103.946 44.9612 cv
103.576 44.9612 103.286 44.8512 103.076 44.6312 cv
102.866 44.4112 102.761 44.1112 102.761 43.7262 cv
102.761 43.3562 102.871 43.0562 103.091 42.8262 cv
103.311 42.6012 103.606 42.4862 103.976 42.4862 cv
104.396 42.4862 104.721 42.6512 104.941 42.9712 cv
105.161 43.2962 105.276 43.7662 105.276 44.3762 cv
105.276 44.9562 105.136 45.4112 104.866 45.7512 cv
104.591 46.0912 104.226 46.2612 103.766 46.2612 cv
103.641 46.2612 103.516 46.2462 103.391 46.2262 cv
103.261 46.2062 103.131 46.1712 102.996 46.1212 cv
103.976 44.5762 mo
104.196 44.5762 104.371 44.5012 104.501 44.3512 cv
104.631 44.2012 104.696 43.9912 104.696 43.7262 cv
104.696 43.4662 104.631 43.2562 104.501 43.1062 cv
104.371 42.9562 104.196 42.8762 103.976 42.8762 cv
103.756 42.8762 103.581 42.9562 103.451 43.1062 cv
103.321 43.2562 103.256 43.4662 103.256 43.7262 cv
103.256 43.9912 103.321 44.2012 103.451 44.3512 cv
103.581 44.5012 103.756 44.5762 103.976 44.5762 cv
f
107.276 44.1762 mo
107.056 44.1762 106.881 44.2562 106.751 44.4062 cv
106.621 44.5562 106.556 44.7662 106.556 45.0262 cv
106.556 45.2912 106.621 45.5012 106.751 45.6512 cv
106.881 45.8012 107.056 45.8762 107.276 45.8762 cv
107.496 45.8762 107.671 45.8012 107.801 45.6512 cv
107.931 45.5012 107.996 45.2912 107.996 45.0262 cv
107.996 44.7662 107.931 44.5562 107.801 44.4062 cv
107.671 44.2562 107.496 44.1762 107.276 44.1762 cv
108.256 42.6312 mo
108.256 43.0812 li
108.131 43.0212 108.006 42.9762 107.881 42.9462 cv
107.751 42.9162 107.626 42.9012 107.506 42.9012 cv
107.176 42.9012 106.926 43.0112 106.756 43.2312 cv
106.586 43.4512 106.486 43.7862 106.466 44.2262 cv
106.561 44.0862 106.681 43.9762 106.826 43.9012 cv
106.971 43.8262 107.131 43.7862 107.306 43.7862 cv
107.671 43.7862 107.961 43.9012 108.171 44.1212 cv
108.381 44.3412 108.491 44.6462 108.491 45.0262 cv
108.491 45.4012 108.376 45.7012 108.156 45.9262 cv
107.936 46.1512 107.641 46.2612 107.276 46.2612 cv
106.856 46.2612 106.531 46.1012 106.311 45.7812 cv
106.086 45.4612 105.976 44.9912 105.976 44.3762 cv
105.976 43.8012 106.111 43.3412 106.386 43.0012 cv
106.656 42.6612 107.026 42.4862 107.486 42.4862 cv
107.606 42.4862 107.731 42.5012 107.861 42.5212 cv
107.986 42.5462 108.116 42.5812 108.256 42.6312 cv
f
115.832 26.739 mo
112.332 26.739 li
f
115.832 26.739 mo
112.332 26.739 li
@
99.2657 25.3175 mo
99.0107 25.3175 98.8207 25.4425 98.6907 25.6925 cv
98.5607 25.9425 98.5007 26.3175 98.5007 26.8175 cv
98.5007 27.3175 98.5607 27.6925 98.6907 27.9425 cv
98.8207 28.1925 99.0107 28.3175 99.2657 28.3175 cv
99.5207 28.3175 99.7107 28.1925 99.8407 27.9425 cv
99.9657 27.6925 100.031 27.3175 100.031 26.8175 cv
100.031 26.3175 99.9657 25.9425 99.8407 25.6925 cv
99.7107 25.4425 99.5207 25.3175 99.2657 25.3175 cv
99.2657 24.9275 mo
99.6707 24.9275 99.9807 25.0925 100.201 25.4125 cv
100.416 25.7375 100.526 26.2075 100.526 26.8175 cv
100.526 27.4325 100.416 27.9025 100.201 28.2225 cv
99.9807 28.5425 99.6707 28.7025 99.2657 28.7025 cv
98.8557 28.7025 98.5407 28.5425 98.3257 28.2225 cv
98.1107 27.9025 98.0057 27.4325 98.0057 26.8175 cv
98.0057 26.2075 98.1107 25.7375 98.3257 25.4125 cv
98.5407 25.0925 98.8557 24.9275 99.2657 24.9275 cv
f
101.391 28.0175 mo
101.906 28.0175 li
101.906 28.6375 li
101.391 28.6375 li
101.391 28.0175 li
f
102.996 28.5625 mo
102.996 28.1125 li
103.116 28.1725 103.241 28.2175 103.371 28.2475 cv
103.496 28.2775 103.621 28.2925 103.746 28.2925 cv
104.066 28.2925 104.316 28.1875 104.486 27.9675 cv
104.656 27.7475 104.756 27.4175 104.786 26.9675 cv
104.686 27.1075 104.566 27.2175 104.426 27.2925 cv
104.281 27.3675 104.121 27.4025 103.946 27.4025 cv
103.576 27.4025 103.286 27.2925 103.076 27.0725 cv
102.866 26.8525 102.761 26.5525 102.761 26.1675 cv
102.761 25.7975 102.871 25.4975 103.091 25.2675 cv
103.311 25.0425 103.606 24.9275 103.976 24.9275 cv
104.396 24.9275 104.721 25.0925 104.941 25.4125 cv
105.161 25.7375 105.276 26.2075 105.276 26.8175 cv
105.276 27.3975 105.136 27.8525 104.866 28.1925 cv
104.591 28.5325 104.226 28.7025 103.766 28.7025 cv
103.641 28.7025 103.516 28.6875 103.391 28.6675 cv
103.261 28.6475 103.131 28.6125 102.996 28.5625 cv
103.976 27.0175 mo
104.196 27.0175 104.371 26.9425 104.501 26.7925 cv
104.631 26.6425 104.696 26.4325 104.696 26.1675 cv
104.696 25.9075 104.631 25.6975 104.501 25.5475 cv
104.371 25.3975 104.196 25.3175 103.976 25.3175 cv
103.756 25.3175 103.581 25.3975 103.451 25.5475 cv
103.321 25.6975 103.256 25.9075 103.256 26.1675 cv
103.256 26.4325 103.321 26.6425 103.451 26.7925 cv
103.581 26.9425 103.756 27.0175 103.976 27.0175 cv
f
107.216 26.9075 mo
106.981 26.9075 106.796 26.9725 106.661 27.0975 cv
106.526 27.2225 106.461 27.3925 106.461 27.6125 cv
106.461 27.8325 106.526 28.0075 106.661 28.1325 cv
106.796 28.2575 106.981 28.3175 107.216 28.3175 cv
107.446 28.3175 107.631 28.2575 107.766 28.1275 cv
107.901 28.0025 107.971 27.8325 107.971 27.6125 cv
107.971 27.3925 107.901 27.2225 107.771 27.0975 cv
107.636 26.9725 107.451 26.9075 107.216 26.9075 cv
106.721 26.6975 mo
106.511 26.6475 106.346 26.5475 106.226 26.4025 cv
106.106 26.2575 106.051 26.0825 106.051 25.8725 cv
106.051 25.5825 106.151 25.3525 106.361 25.1825 cv
106.566 25.0125 106.851 24.9275 107.216 24.9275 cv
107.576 24.9275 107.861 25.0125 108.071 25.1825 cv
108.276 25.3525 108.381 25.5825 108.381 25.8725 cv
108.381 26.0825 108.321 26.2575 108.201 26.4025 cv
108.081 26.5475 107.921 26.6475 107.711 26.6975 cv
107.946 26.7525 108.131 26.8625 108.266 27.0225 cv
108.396 27.1825 108.466 27.3825 108.466 27.6125 cv
108.466 27.9675 108.356 28.2375 108.141 28.4225 cv
107.921 28.6125 107.616 28.7025 107.216 28.7025 cv
106.811 28.7025 106.501 28.6125 106.286 28.4225 cv
106.071 28.2375 105.966 27.9675 105.966 27.6125 cv
105.966 27.3825 106.031 27.1825 106.166 27.0225 cv
106.296 26.8625 106.481 26.7525 106.721 26.6975 cv
106.541 25.9175 mo
106.541 26.1075 106.596 26.2575 106.716 26.3625 cv
106.836 26.4675 107.001 26.5175 107.216 26.5175 cv
107.426 26.5175 107.591 26.4675 107.711 26.3625 cv
107.831 26.2575 107.891 26.1075 107.891 25.9175 cv
107.891 25.7275 107.831 25.5825 107.711 25.4775 cv
107.591 25.3725 107.426 25.3175 107.216 25.3175 cv
107.001 25.3175 106.836 25.3725 106.716 25.4775 cv
106.596 25.5825 106.541 25.7275 106.541 25.9175 cv
f
115.832 9.18036 mo
112.332 9.18036 li
f
115.832 9.18036 mo
112.332 9.18036 li
@
98.2957 10.6638 mo
99.1007 10.6638 li
99.1007 7.8838 li
98.2257 8.0588 li
98.2257 7.6088 li
99.0957 7.4338 li
99.5907 7.4338 li
99.5907 10.6638 li
100.396 10.6638 li
100.396 11.0788 li
98.2957 11.0788 li
98.2957 10.6638 li
f
101.391 10.4588 mo
101.906 10.4588 li
101.906 11.0788 li
101.391 11.0788 li
101.391 10.4588 li
f
104.036 7.7588 mo
103.781 7.7588 103.591 7.8838 103.461 8.1338 cv
103.331 8.3838 103.271 8.7588 103.271 9.2588 cv
103.271 9.7588 103.331 10.1338 103.461 10.3838 cv
103.591 10.6338 103.781 10.7588 104.036 10.7588 cv
104.291 10.7588 104.481 10.6338 104.611 10.3838 cv
104.736 10.1338 104.801 9.7588 104.801 9.2588 cv
104.801 8.7588 104.736 8.3838 104.611 8.1338 cv
104.481 7.8838 104.291 7.7588 104.036 7.7588 cv
104.036 7.3688 mo
104.441 7.3688 104.751 7.5338 104.971 7.8538 cv
105.186 8.1788 105.296 8.6488 105.296 9.2588 cv
105.296 9.8738 105.186 10.3438 104.971 10.6638 cv
104.751 10.9838 104.441 11.1438 104.036 11.1438 cv
103.626 11.1438 103.311 10.9838 103.096 10.6638 cv
102.881 10.3438 102.776 9.8738 102.776 9.2588 cv
102.776 8.6488 102.881 8.1788 103.096 7.8538 cv
103.311 7.5338 103.626 7.3688 104.036 7.3688 cv
f
107.216 7.7588 mo
106.961 7.7588 106.771 7.8838 106.641 8.1338 cv
106.511 8.3838 106.451 8.7588 106.451 9.2588 cv
106.451 9.7588 106.511 10.1338 106.641 10.3838 cv
106.771 10.6338 106.961 10.7588 107.216 10.7588 cv
107.471 10.7588 107.661 10.6338 107.791 10.3838 cv
107.916 10.1338 107.981 9.7588 107.981 9.2588 cv
107.981 8.7588 107.916 8.3838 107.791 8.1338 cv
107.661 7.8838 107.471 7.7588 107.216 7.7588 cv
107.216 7.3688 mo
107.621 7.3688 107.931 7.5338 108.151 7.8538 cv
108.366 8.1788 108.476 8.6488 108.476 9.2588 cv
108.476 9.8738 108.366 10.3438 108.151 10.6638 cv
107.931 10.9838 107.621 11.1438 107.216 11.1438 cv
106.806 11.1438 106.491 10.9838 106.276 10.6638 cv
106.061 10.3438 105.956 9.8738 105.956 9.2588 cv
105.956 8.6488 106.061 8.1788 106.276 7.8538 cv
106.491 7.5338 106.806 7.3688 107.216 7.3688 cv
f
1 lw
2 lc
119.028 53.8145 mo
140.333 39.7061 li
161.638 44.7718 li
182.943 9.75101 li
1 /0 /CSD get_res sepcs
.337255 sep
@
gsave
117.028 55.8145 mo
121.028 55.8145 li
121.028 51.8145 li
117.028 51.8145 li
117.028 55.8145 li
clp
119.028 52.3145 mo
117.528 55.3145 li
120.528 55.3145 li
cp
f
0 lc
0 lj
119.028 52.3145 mo
117.528 55.3145 li
120.528 55.3145 li
cp
@
grestore
gsave
138.333 41.7061 mo
142.333 41.7061 li
142.333 37.7061 li
138.333 37.7061 li
138.333 41.7061 li
clp
140.333 38.2061 mo
138.833 41.2061 li
141.833 41.2061 li
cp
f
0 lc
0 lj
140.333 38.2061 mo
138.833 41.2061 li
141.833 41.2061 li
cp
@
grestore
gsave
159.638 46.7719 mo
163.638 46.7719 li
163.638 42.7719 li
159.638 42.7719 li
159.638 46.7719 li
clp
161.638 43.2718 mo
160.138 46.2718 li
163.138 46.2718 li
cp
f
0 lc
0 lj
161.638 43.2718 mo
160.138 46.2718 li
163.138 46.2718 li
cp
@
grestore
gsave
180.943 11.751 mo
184.943 11.751 li
184.943 7.75103 li
180.943 7.75103 li
180.943 11.751 li
clp
182.943 8.25104 mo
181.443 11.251 li
184.443 11.251 li
cp
f
0 lc
0 lj
182.943 8.25104 mo
181.443 11.251 li
184.443 11.251 li
cp
@
grestore
119.028 31.8223 mo
140.333 24.1404 li
161.638 28.8724 li
182.943 10.0759 li
0 .760891 .735378 0 cmyk
@
gsave
117.028 33.8223 mo
121.028 33.8223 li
121.028 29.8223 li
117.028 29.8223 li
117.028 33.8223 li
clp
119.028 33.3223 mo
119.426 33.3223 119.807 33.1642 120.088 32.883 cv
120.37 32.6017 120.528 32.2201 120.528 31.8223 cv
120.528 31.4245 120.37 31.0429 120.088 30.7616 cv
119.807 30.4803 119.426 30.3223 119.028 30.3223 cv
118.63 30.3223 118.248 30.4803 117.967 30.7616 cv
117.686 31.0429 117.528 31.4245 117.528 31.8223 cv
117.528 32.2201 117.686 32.6017 117.967 32.883 cv
118.248 33.1642 118.63 33.3223 119.028 33.3223 cv
cp
f
0 lc
119.028 33.3223 mo
119.426 33.3223 119.807 33.1642 120.088 32.883 cv
120.37 32.6017 120.528 32.2201 120.528 31.8223 cv
120.528 31.4245 120.37 31.0429 120.088 30.7616 cv
119.807 30.4803 119.426 30.3223 119.028 30.3223 cv
118.63 30.3223 118.248 30.4803 117.967 30.7616 cv
117.686 31.0429 117.528 31.4245 117.528 31.8223 cv
117.528 32.2201 117.686 32.6017 117.967 32.883 cv
118.248 33.1642 118.63 33.3223 119.028 33.3223 cv
cp
@
grestore
gsave
138.333 26.1404 mo
142.333 26.1404 li
142.333 22.1404 li
138.333 22.1404 li
138.333 26.1404 li
clp
140.333 25.6404 mo
140.731 25.6404 141.112 25.4823 141.393 25.201 cv
141.675 24.9198 141.833 24.5382 141.833 24.1404 cv
141.833 23.7426 141.675 23.361 141.393 23.0797 cv
141.112 22.7984 140.731 22.6404 140.333 22.6404 cv
139.935 22.6404 139.553 22.7984 139.272 23.0797 cv
138.991 23.361 138.833 23.7426 138.833 24.1404 cv
138.833 24.5382 138.991 24.9198 139.272 25.201 cv
139.553 25.4823 139.935 25.6404 140.333 25.6404 cv
cp
f
0 lc
140.333 25.6404 mo
140.731 25.6404 141.112 25.4823 141.393 25.201 cv
141.675 24.9198 141.833 24.5382 141.833 24.1404 cv
141.833 23.7426 141.675 23.361 141.393 23.0797 cv
141.112 22.7984 140.731 22.6404 140.333 22.6404 cv
139.935 22.6404 139.553 22.7984 139.272 23.0797 cv
138.991 23.361 138.833 23.7426 138.833 24.1404 cv
138.833 24.5382 138.991 24.9198 139.272 25.201 cv
139.553 25.4823 139.935 25.6404 140.333 25.6404 cv
cp
@
grestore
gsave
159.638 30.8724 mo
163.638 30.8724 li
163.638 26.8724 li
159.638 26.8724 li
159.638 30.8724 li
clp
161.638 30.3724 mo
162.036 30.3724 162.417 30.2144 162.698 29.9331 cv
162.98 29.6518 163.138 29.2702 163.138 28.8724 cv
163.138 28.4746 162.98 28.0931 162.698 27.8118 cv
162.417 27.5305 162.036 27.3724 161.638 27.3724 cv
161.24 27.3724 160.858 27.5305 160.577 27.8118 cv
160.296 28.0931 160.138 28.4746 160.138 28.8724 cv
160.138 29.2702 160.296 29.6518 160.577 29.9331 cv
160.858 30.2144 161.24 30.3724 161.638 30.3724 cv
cp
f
0 lc
161.638 30.3724 mo
162.036 30.3724 162.417 30.2144 162.698 29.9331 cv
162.98 29.6518 163.138 29.2702 163.138 28.8724 cv
163.138 28.4746 162.98 28.0931 162.698 27.8118 cv
162.417 27.5305 162.036 27.3724 161.638 27.3724 cv
161.24 27.3724 160.858 27.5305 160.577 27.8118 cv
160.296 28.0931 160.138 28.4746 160.138 28.8724 cv
160.138 29.2702 160.296 29.6518 160.577 29.9331 cv
160.858 30.2144 161.24 30.3724 161.638 30.3724 cv
cp
@
grestore
gsave
180.943 12.0759 mo
184.943 12.0759 li
184.943 8.07588 li
180.943 8.07588 li
180.943 12.0759 li
clp
182.943 11.5759 mo
183.341 11.5759 183.722 11.4178 184.004 11.1365 cv
184.285 10.8552 184.443 10.4737 184.443 10.0759 cv
184.443 9.67806 184.285 9.2965 184.004 9.01521 cv
183.722 8.73392 183.341 8.57587 182.943 8.57587 cv
182.545 8.57587 182.163 8.73392 181.882 9.01521 cv
181.601 9.2965 181.443 9.67806 181.443 10.0759 cv
181.443 10.4737 181.601 10.8552 181.882 11.1365 cv
182.163 11.4178 182.545 11.5759 182.943 11.5759 cv
cp
f
0 lc
182.943 11.5759 mo
183.341 11.5759 183.722 11.4178 184.004 11.1365 cv
184.285 10.8552 184.443 10.4737 184.443 10.0759 cv
184.443 9.67806 184.285 9.2965 184.004 9.01521 cv
183.722 8.73392 183.341 8.57587 182.943 8.57587 cv
182.545 8.57587 182.163 8.73392 181.882 9.01521 cv
181.601 9.2965 181.443 9.67806 181.443 10.0759 cv
181.443 10.4737 181.601 10.8552 181.882 11.1365 cv
182.163 11.4178 182.545 11.5759 182.943 11.5759 cv
cp
@
grestore
119.028 48.4144 mo
140.333 44.353 li
161.638 33.8977 li
182.943 31.1059 li
.468757 .0952163 .538781 0 cmyk
@
gsave
117.101 50.1279 mo
120.954 50.1279 li
120.954 46.4144 li
117.101 46.4144 li
117.101 50.1279 li
clp
119.028 46.9144 mo
118.691 47.9508 li
117.601 47.9508 li
118.483 48.5914 li
118.146 49.6279 li
119.028 48.9873 li
119.909 49.6279 li
119.573 48.5914 li
120.454 47.9508 li
119.364 47.9508 li
cp
f
0 lc
2 lj
119.028 46.9144 mo
118.691 47.9508 li
117.601 47.9508 li
118.483 48.5914 li
118.146 49.6279 li
119.028 48.9873 li
119.909 49.6279 li
119.573 48.5914 li
120.454 47.9508 li
119.364 47.9508 li
cp
@
grestore
gsave
138.406 46.0666 mo
142.259 46.0666 li
142.259 42.353 li
138.406 42.353 li
138.406 46.0666 li
clp
140.333 42.8531 mo
139.996 43.8895 li
138.906 43.8895 li
139.788 44.5301 li
139.451 45.5666 li
140.333 44.926 li
141.214 45.5666 li
140.878 44.5301 li
141.759 43.8895 li
140.67 43.8895 li
cp
f
0 lc
2 lj
140.333 42.8531 mo
139.996 43.8895 li
138.906 43.8895 li
139.788 44.5301 li
139.451 45.5666 li
140.333 44.926 li
141.214 45.5666 li
140.878 44.5301 li
141.759 43.8895 li
140.67 43.8895 li
cp
@
grestore
gsave
159.711 35.6112 mo
163.564 35.6112 li
163.564 31.8977 li
159.711 31.8977 li
159.711 35.6112 li
clp
161.638 32.3977 mo
161.301 33.4342 li
160.211 33.4342 li
161.093 34.0748 li
160.756 35.1113 li
161.638 34.4707 li
162.52 35.1113 li
162.183 34.0748 li
163.064 33.4342 li
161.975 33.4342 li
cp
f
0 lc
2 lj
161.638 32.3977 mo
161.301 33.4342 li
160.211 33.4342 li
161.093 34.0748 li
160.756 35.1113 li
161.638 34.4707 li
162.52 35.1113 li
162.183 34.0748 li
163.064 33.4342 li
161.975 33.4342 li
cp
@
grestore
gsave
181.016 32.8194 mo
184.869 32.8194 li
184.869 29.1059 li
181.016 29.1059 li
181.016 32.8194 li
clp
182.943 29.6059 mo
182.606 30.6424 li
181.516 30.6424 li
182.398 31.2829 li
182.061 32.3194 li
182.943 31.6788 li
183.825 32.3194 li
183.488 31.2829 li
184.369 30.6424 li
183.28 30.6424 li
cp
f
0 lc
2 lj
182.943 29.6059 mo
182.606 30.6424 li
181.516 30.6424 li
182.398 31.2829 li
182.061 32.3194 li
182.943 31.6788 li
183.825 32.3194 li
183.488 31.2829 li
184.369 30.6424 li
183.28 30.6424 li
cp
@
grestore
119.028 44.2503 mo
140.333 41.7561 li
161.638 32.1234 li
182.943 28.1648 li
.749203 .420264 .103029 .000457771 cmyk
@
gsave
117.028 46.2503 mo
121.028 46.2503 li
121.028 42.2503 li
117.028 42.2503 li
117.028 46.2503 li
clp
117.528 45.7503 mo
120.528 45.7503 li
120.528 42.7503 li
117.528 42.7503 li
cp
f
0 lc
0 lj
117.528 45.7503 mo
120.528 45.7503 li
120.528 42.7503 li
117.528 42.7503 li
cp
@
grestore
gsave
138.333 43.7561 mo
142.333 43.7561 li
142.333 39.7561 li
138.333 39.7561 li
138.333 43.7561 li
clp
138.833 43.2561 mo
141.833 43.2561 li
141.833 40.2561 li
138.833 40.2561 li
cp
f
0 lc
0 lj
138.833 43.2561 mo
141.833 43.2561 li
141.833 40.2561 li
138.833 40.2561 li
cp
@
grestore
gsave
159.638 34.1235 mo
163.638 34.1235 li
163.638 30.1235 li
159.638 30.1235 li
159.638 34.1235 li
clp
160.138 33.6234 mo
163.138 33.6234 li
163.138 30.6234 li
160.138 30.6234 li
cp
f
0 lc
0 lj
160.138 33.6234 mo
163.138 33.6234 li
163.138 30.6234 li
160.138 30.6234 li
cp
@
grestore
gsave
180.943 30.1648 mo
184.943 30.1648 li
184.943 26.1648 li
180.943 26.1648 li
180.943 30.1648 li
clp
181.443 29.6648 mo
184.443 29.6648 li
184.443 26.6648 li
181.443 26.6648 li
cp
f
0 lc
0 lj
181.443 29.6648 mo
184.443 29.6648 li
184.443 26.6648 li
181.443 26.6648 li
cp
@
grestore
.8 lw
0 lj
115.832 61.8564 mo
115.832 7.54785 li
1 /0 /CSD get_res sepcs
1 sep
@
186.139 61.8564 mo
186.139 7.54785 li
@
115.832 61.8564 mo
186.139 61.8564 li
@
115.832 7.54785 mo
186.139 7.54785 li
@
207.231 61.8564 mo
277.537 61.8564 li
277.537 7.54785 li
207.231 7.54785 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
210.426 61.8564 mo
210.426 65.3564 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
210.426 61.8564 mo
210.426 65.3564 li
@
208.832 69.4933 mo
208.162 71.3083 li
209.502 71.3083 li
208.832 69.4933 li
208.552 69.0083 mo
209.112 69.0083 li
210.502 72.6533 li
209.987 72.6533 li
209.657 71.7183 li
208.012 71.7183 li
207.682 72.6533 li
207.162 72.6533 li
208.552 69.0083 li
f
211.162 72.2383 mo
211.967 72.2383 li
211.967 69.4583 li
211.092 69.6333 li
211.092 69.1833 li
211.962 69.0083 li
212.457 69.0083 li
212.457 72.2383 li
213.262 72.2383 li
213.262 72.6533 li
211.162 72.6533 li
211.162 72.2383 li
f
231.731 61.8564 mo
231.731 65.3564 li
f
231.731 61.8564 mo
231.731 65.3564 li
@
230.137 69.4933 mo
229.467 71.3083 li
230.807 71.3083 li
230.137 69.4933 li
229.857 69.0083 mo
230.417 69.0083 li
231.807 72.6533 li
231.292 72.6533 li
230.962 71.7183 li
229.317 71.7183 li
228.987 72.6533 li
228.467 72.6533 li
229.857 69.0083 li
f
232.807 72.2383 mo
234.527 72.2383 li
234.527 72.6533 li
232.212 72.6533 li
232.212 72.2383 li
232.397 72.0483 232.652 71.7883 232.977 71.4583 cv
233.297 71.1333 233.502 70.9233 233.587 70.8283 cv
233.747 70.6533 233.857 70.5033 233.917 70.3783 cv
233.977 70.2583 234.012 70.1333 234.012 70.0133 cv
234.012 69.8233 233.942 69.6633 233.807 69.5433 cv
233.672 69.4233 233.497 69.3583 233.277 69.3583 cv
233.122 69.3583 232.957 69.3883 232.787 69.4383 cv
232.617 69.4933 232.432 69.5733 232.237 69.6833 cv
232.237 69.1833 li
232.437 69.1033 232.622 69.0433 232.792 69.0033 cv
232.962 68.9633 233.122 68.9433 233.267 68.9433 cv
233.642 68.9433 233.942 69.0383 234.167 69.2283 cv
234.392 69.4183 234.507 69.6683 234.507 69.9833 cv
234.507 70.1333 234.477 70.2783 234.422 70.4083 cv
234.367 70.5433 234.267 70.7033 234.117 70.8833 cv
234.077 70.9333 233.947 71.0683 233.727 71.2933 cv
233.507 71.5183 233.202 71.8333 232.807 72.2383 cv
f
253.037 61.8564 mo
253.037 65.3564 li
f
253.037 61.8564 mo
253.037 65.3564 li
@
251.442 69.4933 mo
250.772 71.3083 li
252.112 71.3083 li
251.442 69.4933 li
251.162 69.0083 mo
251.722 69.0083 li
253.112 72.6533 li
252.597 72.6533 li
252.267 71.7183 li
250.622 71.7183 li
250.292 72.6533 li
249.772 72.6533 li
251.162 69.0083 li
f
255.182 70.6883 mo
255.417 70.7383 255.602 70.8433 255.732 71.0033 cv
255.862 71.1633 255.932 71.3633 255.932 71.5933 cv
255.932 71.9533 255.807 72.2333 255.562 72.4283 cv
255.312 72.6233 254.962 72.7183 254.507 72.7183 cv
254.352 72.7183 254.192 72.7033 254.032 72.6733 cv
253.872 72.6483 253.702 72.6033 253.532 72.5433 cv
253.532 72.0683 li
253.667 72.1483 253.817 72.2083 253.982 72.2483 cv
254.142 72.2883 254.312 72.3083 254.492 72.3083 cv
254.802 72.3083 255.037 72.2483 255.197 72.1283 cv
255.357 72.0083 255.442 71.8283 255.442 71.5933 cv
255.442 71.3833 255.367 71.2133 255.217 71.0933 cv
255.067 70.9733 254.857 70.9083 254.587 70.9083 cv
254.162 70.9083 li
254.162 70.5033 li
254.607 70.5033 li
254.847 70.5033 255.032 70.4583 255.162 70.3583 cv
255.292 70.2633 255.357 70.1233 255.357 69.9383 cv
255.357 69.7533 255.287 69.6083 255.157 69.5083 cv
255.022 69.4083 254.832 69.3583 254.587 69.3583 cv
254.452 69.3583 254.307 69.3733 254.152 69.4033 cv
253.997 69.4333 253.827 69.4783 253.642 69.5383 cv
253.642 69.0983 li
253.827 69.0483 254.002 69.0083 254.167 68.9833 cv
254.327 68.9583 254.482 68.9433 254.632 68.9433 cv
255.002 68.9433 255.297 69.0283 255.517 69.1983 cv
255.737 69.3683 255.847 69.5983 255.847 69.8883 cv
255.847 70.0883 255.787 70.2583 255.672 70.3983 cv
255.557 70.5383 255.392 70.6383 255.182 70.6883 cv
f
274.342 61.8564 mo
274.342 65.3564 li
f
274.342 61.8564 mo
274.342 65.3564 li
@
272.747 69.4933 mo
272.077 71.3083 li
273.417 71.3083 li
272.747 69.4933 li
272.467 69.0083 mo
273.027 69.0083 li
274.417 72.6533 li
273.902 72.6533 li
273.572 71.7183 li
271.927 71.7183 li
271.597 72.6533 li
271.077 72.6533 li
272.467 69.0083 li
f
276.347 69.4383 mo
275.102 71.3833 li
276.347 71.3833 li
276.347 69.4383 li
276.217 69.0083 mo
276.837 69.0083 li
276.837 71.3833 li
277.357 71.3833 li
277.357 71.7933 li
276.837 71.7933 li
276.837 72.6533 li
276.347 72.6533 li
276.347 71.7933 li
274.702 71.7933 li
274.702 71.3183 li
276.217 69.0083 li
f
207.231 61.8564 mo
203.731 61.8564 li
f
207.231 61.8564 mo
203.731 61.8564 li
@
190.664 60.4349 mo
190.409 60.4349 190.219 60.5599 190.089 60.8099 cv
189.959 61.0599 189.899 61.4349 189.899 61.9349 cv
189.899 62.4349 189.959 62.8099 190.089 63.0599 cv
190.219 63.3099 190.409 63.4349 190.664 63.4349 cv
190.919 63.4349 191.109 63.3099 191.239 63.0599 cv
191.364 62.8099 191.429 62.4349 191.429 61.9349 cv
191.429 61.4349 191.364 61.0599 191.239 60.8099 cv
191.109 60.5599 190.919 60.4349 190.664 60.4349 cv
190.664 60.0449 mo
191.069 60.0449 191.379 60.2099 191.599 60.5299 cv
191.814 60.8549 191.924 61.3249 191.924 61.9349 cv
191.924 62.5499 191.814 63.0199 191.599 63.3399 cv
191.379 63.6599 191.069 63.8199 190.664 63.8199 cv
190.254 63.8199 189.939 63.6599 189.724 63.3399 cv
189.509 63.0199 189.404 62.5499 189.404 61.9349 cv
189.404 61.3249 189.509 60.8549 189.724 60.5299 cv
189.939 60.2099 190.254 60.0449 190.664 60.0449 cv
f
192.789 63.1349 mo
193.304 63.1349 li
193.304 63.7549 li
192.789 63.7549 li
192.789 63.1349 li
f
194.394 63.6799 mo
194.394 63.2299 li
194.514 63.2899 194.639 63.3349 194.769 63.3649 cv
194.894 63.3949 195.019 63.4099 195.144 63.4099 cv
195.464 63.4099 195.714 63.3049 195.884 63.0849 cv
196.054 62.8649 196.154 62.5349 196.184 62.0849 cv
196.084 62.2249 195.964 62.3349 195.824 62.4099 cv
195.679 62.4849 195.519 62.5199 195.344 62.5199 cv
194.974 62.5199 194.684 62.4099 194.474 62.1899 cv
194.264 61.9699 194.159 61.6699 194.159 61.2849 cv
194.159 60.9149 194.269 60.6149 194.489 60.3849 cv
194.709 60.1599 195.004 60.0449 195.374 60.0449 cv
195.794 60.0449 196.119 60.2099 196.339 60.5299 cv
196.559 60.8549 196.674 61.3249 196.674 61.9349 cv
196.674 62.5149 196.534 62.9699 196.264 63.3099 cv
195.989 63.6499 195.624 63.8199 195.164 63.8199 cv
195.039 63.8199 194.914 63.8049 194.789 63.7849 cv
194.659 63.7649 194.529 63.7299 194.394 63.6799 cv
195.374 62.1349 mo
195.594 62.1349 195.769 62.0599 195.899 61.9099 cv
196.029 61.7599 196.094 61.5499 196.094 61.2849 cv
196.094 61.0249 196.029 60.8149 195.899 60.6649 cv
195.769 60.5149 195.594 60.4349 195.374 60.4349 cv
195.154 60.4349 194.979 60.5149 194.849 60.6649 cv
194.719 60.8149 194.654 61.0249 194.654 61.2849 cv
194.654 61.5499 194.719 61.7599 194.849 61.9099 cv
194.979 62.0599 195.154 62.1349 195.374 62.1349 cv
f
197.984 63.3399 mo
199.704 63.3399 li
199.704 63.7549 li
197.389 63.7549 li
197.389 63.3399 li
197.574 63.1499 197.829 62.8899 198.154 62.5599 cv
198.474 62.2349 198.679 62.0249 198.764 61.9299 cv
198.924 61.7549 199.034 61.6049 199.094 61.4799 cv
199.154 61.3599 199.189 61.2349 199.189 61.1149 cv
199.189 60.9249 199.119 60.7649 198.984 60.6449 cv
198.849 60.5249 198.674 60.4599 198.454 60.4599 cv
198.299 60.4599 198.134 60.4899 197.964 60.5399 cv
197.794 60.5949 197.609 60.6749 197.414 60.7849 cv
197.414 60.2849 li
197.614 60.2049 197.799 60.1449 197.969 60.1049 cv
198.139 60.0649 198.299 60.0449 198.444 60.0449 cv
198.819 60.0449 199.119 60.1399 199.344 60.3299 cv
199.569 60.5199 199.684 60.7699 199.684 61.0849 cv
199.684 61.2349 199.654 61.3799 199.599 61.5099 cv
199.544 61.6449 199.444 61.8049 199.294 61.9849 cv
199.254 62.0349 199.124 62.1699 198.904 62.3949 cv
198.684 62.6199 198.379 62.9349 197.984 63.3399 cv
f
207.231 48.6403 mo
203.731 48.6403 li
f
207.231 48.6403 mo
203.731 48.6403 li
@
190.664 47.2188 mo
190.409 47.2188 190.219 47.3438 190.089 47.5938 cv
189.959 47.8438 189.899 48.2188 189.899 48.7188 cv
189.899 49.2188 189.959 49.5938 190.089 49.8438 cv
190.219 50.0938 190.409 50.2188 190.664 50.2188 cv
190.919 50.2188 191.109 50.0938 191.239 49.8438 cv
191.364 49.5938 191.429 49.2188 191.429 48.7188 cv
191.429 48.2188 191.364 47.8438 191.239 47.5938 cv
191.109 47.3438 190.919 47.2188 190.664 47.2188 cv
190.664 46.8288 mo
191.069 46.8288 191.379 46.9938 191.599 47.3138 cv
191.814 47.6388 191.924 48.1088 191.924 48.7188 cv
191.924 49.3338 191.814 49.8038 191.599 50.1238 cv
191.379 50.4438 191.069 50.6038 190.664 50.6038 cv
190.254 50.6038 189.939 50.4438 189.724 50.1238 cv
189.509 49.8038 189.404 49.3338 189.404 48.7188 cv
189.404 48.1088 189.509 47.6388 189.724 47.3138 cv
189.939 46.9938 190.254 46.8288 190.664 46.8288 cv
f
192.789 49.9188 mo
193.304 49.9188 li
193.304 50.5388 li
192.789 50.5388 li
192.789 49.9188 li
f
194.394 50.4638 mo
194.394 50.0138 li
194.514 50.0738 194.639 50.1188 194.769 50.1488 cv
194.894 50.1788 195.019 50.1938 195.144 50.1938 cv
195.464 50.1938 195.714 50.0888 195.884 49.8688 cv
196.054 49.6488 196.154 49.3188 196.184 48.8688 cv
196.084 49.0088 195.964 49.1188 195.824 49.1938 cv
195.679 49.2688 195.519 49.3038 195.344 49.3038 cv
194.974 49.3038 194.684 49.1938 194.474 48.9738 cv
194.264 48.7538 194.159 48.4538 194.159 48.0688 cv
194.159 47.6988 194.269 47.3988 194.489 47.1688 cv
194.709 46.9438 195.004 46.8288 195.374 46.8288 cv
195.794 46.8288 196.119 46.9938 196.339 47.3138 cv
196.559 47.6388 196.674 48.1088 196.674 48.7188 cv
196.674 49.2988 196.534 49.7538 196.264 50.0938 cv
195.989 50.4338 195.624 50.6038 195.164 50.6038 cv
195.039 50.6038 194.914 50.5888 194.789 50.5688 cv
194.659 50.5488 194.529 50.5138 194.394 50.4638 cv
195.374 48.9188 mo
195.594 48.9188 195.769 48.8438 195.899 48.6938 cv
196.029 48.5438 196.094 48.3338 196.094 48.0688 cv
196.094 47.8088 196.029 47.5988 195.899 47.4488 cv
195.769 47.2988 195.594 47.2188 195.374 47.2188 cv
195.154 47.2188 194.979 47.2988 194.849 47.4488 cv
194.719 47.5988 194.654 47.8088 194.654 48.0688 cv
194.654 48.3338 194.719 48.5438 194.849 48.6938 cv
194.979 48.8438 195.154 48.9188 195.374 48.9188 cv
f
198.914 47.3238 mo
197.669 49.2688 li
198.914 49.2688 li
198.914 47.3238 li
198.784 46.8938 mo
199.404 46.8938 li
199.404 49.2688 li
199.924 49.2688 li
199.924 49.6788 li
199.404 49.6788 li
199.404 50.5388 li
198.914 50.5388 li
198.914 49.6788 li
197.269 49.6788 li
197.269 49.2038 li
198.784 46.8938 li
f
207.231 35.4242 mo
203.731 35.4242 li
f
207.231 35.4242 mo
203.731 35.4242 li
@
190.664 34.0027 mo
190.409 34.0027 190.219 34.1277 190.089 34.3777 cv
189.959 34.6277 189.899 35.0027 189.899 35.5027 cv
189.899 36.0027 189.959 36.3777 190.089 36.6277 cv
190.219 36.8777 190.409 37.0027 190.664 37.0027 cv
190.919 37.0027 191.109 36.8777 191.239 36.6277 cv
191.364 36.3777 191.429 36.0027 191.429 35.5027 cv
191.429 35.0027 191.364 34.6277 191.239 34.3777 cv
191.109 34.1277 190.919 34.0027 190.664 34.0027 cv
190.664 33.6127 mo
191.069 33.6127 191.379 33.7777 191.599 34.0977 cv
191.814 34.4227 191.924 34.8927 191.924 35.5027 cv
191.924 36.1177 191.814 36.5877 191.599 36.9077 cv
191.379 37.2277 191.069 37.3877 190.664 37.3877 cv
190.254 37.3877 189.939 37.2277 189.724 36.9077 cv
189.509 36.5877 189.404 36.1177 189.404 35.5027 cv
189.404 34.8927 189.509 34.4227 189.724 34.0977 cv
189.939 33.7777 190.254 33.6127 190.664 33.6127 cv
f
192.789 36.7027 mo
193.304 36.7027 li
193.304 37.3227 li
192.789 37.3227 li
192.789 36.7027 li
f
194.394 37.2477 mo
194.394 36.7977 li
194.514 36.8577 194.639 36.9027 194.769 36.9327 cv
194.894 36.9627 195.019 36.9777 195.144 36.9777 cv
195.464 36.9777 195.714 36.8727 195.884 36.6527 cv
196.054 36.4327 196.154 36.1027 196.184 35.6527 cv
196.084 35.7927 195.964 35.9027 195.824 35.9777 cv
195.679 36.0527 195.519 36.0877 195.344 36.0877 cv
194.974 36.0877 194.684 35.9777 194.474 35.7577 cv
194.264 35.5377 194.159 35.2377 194.159 34.8527 cv
194.159 34.4827 194.269 34.1827 194.489 33.9527 cv
194.709 33.7277 195.004 33.6127 195.374 33.6127 cv
195.794 33.6127 196.119 33.7777 196.339 34.0977 cv
196.559 34.4227 196.674 34.8927 196.674 35.5027 cv
196.674 36.0827 196.534 36.5377 196.264 36.8777 cv
195.989 37.2177 195.624 37.3877 195.164 37.3877 cv
195.039 37.3877 194.914 37.3727 194.789 37.3527 cv
194.659 37.3327 194.529 37.2977 194.394 37.2477 cv
195.374 35.7027 mo
195.594 35.7027 195.769 35.6277 195.899 35.4777 cv
196.029 35.3277 196.094 35.1177 196.094 34.8527 cv
196.094 34.5927 196.029 34.3827 195.899 34.2327 cv
195.769 34.0827 195.594 34.0027 195.374 34.0027 cv
195.154 34.0027 194.979 34.0827 194.849 34.2327 cv
194.719 34.3827 194.654 34.5927 194.654 34.8527 cv
194.654 35.1177 194.719 35.3277 194.849 35.4777 cv
194.979 35.6277 195.154 35.7027 195.374 35.7027 cv
f
198.674 35.3027 mo
198.454 35.3027 198.279 35.3827 198.149 35.5327 cv
198.019 35.6827 197.954 35.8927 197.954 36.1527 cv
197.954 36.4177 198.019 36.6277 198.149 36.7777 cv
198.279 36.9277 198.454 37.0027 198.674 37.0027 cv
198.894 37.0027 199.069 36.9277 199.199 36.7777 cv
199.329 36.6277 199.394 36.4177 199.394 36.1527 cv
199.394 35.8927 199.329 35.6827 199.199 35.5327 cv
199.069 35.3827 198.894 35.3027 198.674 35.3027 cv
199.654 33.7577 mo
199.654 34.2077 li
199.529 34.1477 199.404 34.1027 199.279 34.0727 cv
199.149 34.0427 199.024 34.0277 198.904 34.0277 cv
198.574 34.0277 198.324 34.1377 198.154 34.3577 cv
197.984 34.5777 197.884 34.9127 197.864 35.3527 cv
197.959 35.2127 198.079 35.1027 198.224 35.0277 cv
198.369 34.9527 198.529 34.9127 198.704 34.9127 cv
199.069 34.9127 199.359 35.0277 199.569 35.2477 cv
199.779 35.4677 199.889 35.7727 199.889 36.1527 cv
199.889 36.5277 199.774 36.8277 199.554 37.0527 cv
199.334 37.2777 199.039 37.3877 198.674 37.3877 cv
198.254 37.3877 197.929 37.2277 197.709 36.9077 cv
197.484 36.5877 197.374 36.1177 197.374 35.5027 cv
197.374 34.9277 197.509 34.4677 197.784 34.1277 cv
198.054 33.7877 198.424 33.6127 198.884 33.6127 cv
199.004 33.6127 199.129 33.6277 199.259 33.6477 cv
199.384 33.6727 199.514 33.7077 199.654 33.7577 cv
f
207.231 22.2081 mo
203.731 22.2081 li
f
207.231 22.2081 mo
203.731 22.2081 li
@
190.664 20.7866 mo
190.409 20.7866 190.219 20.9116 190.089 21.1616 cv
189.959 21.4116 189.899 21.7866 189.899 22.2866 cv
189.899 22.7866 189.959 23.1616 190.089 23.4116 cv
190.219 23.6616 190.409 23.7866 190.664 23.7866 cv
190.919 23.7866 191.109 23.6616 191.239 23.4116 cv
191.364 23.1616 191.429 22.7866 191.429 22.2866 cv
191.429 21.7866 191.364 21.4116 191.239 21.1616 cv
191.109 20.9116 190.919 20.7866 190.664 20.7866 cv
190.664 20.3966 mo
191.069 20.3966 191.379 20.5616 191.599 20.8816 cv
191.814 21.2066 191.924 21.6766 191.924 22.2866 cv
191.924 22.9016 191.814 23.3716 191.599 23.6916 cv
191.379 24.0116 191.069 24.1716 190.664 24.1716 cv
190.254 24.1716 189.939 24.0116 189.724 23.6916 cv
189.509 23.3716 189.404 22.9016 189.404 22.2866 cv
189.404 21.6766 189.509 21.2066 189.724 20.8816 cv
189.939 20.5616 190.254 20.3966 190.664 20.3966 cv
f
192.789 23.4866 mo
193.304 23.4866 li
193.304 24.1066 li
192.789 24.1066 li
192.789 23.4866 li
f
194.394 24.0316 mo
194.394 23.5816 li
194.514 23.6416 194.639 23.6866 194.769 23.7166 cv
194.894 23.7466 195.019 23.7616 195.144 23.7616 cv
195.464 23.7616 195.714 23.6566 195.884 23.4366 cv
196.054 23.2166 196.154 22.8866 196.184 22.4366 cv
196.084 22.5766 195.964 22.6866 195.824 22.7616 cv
195.679 22.8366 195.519 22.8716 195.344 22.8716 cv
194.974 22.8716 194.684 22.7616 194.474 22.5416 cv
194.264 22.3216 194.159 22.0216 194.159 21.6366 cv
194.159 21.2666 194.269 20.9666 194.489 20.7366 cv
194.709 20.5116 195.004 20.3966 195.374 20.3966 cv
195.794 20.3966 196.119 20.5616 196.339 20.8816 cv
196.559 21.2066 196.674 21.6766 196.674 22.2866 cv
196.674 22.8666 196.534 23.3216 196.264 23.6616 cv
195.989 24.0016 195.624 24.1716 195.164 24.1716 cv
195.039 24.1716 194.914 24.1566 194.789 24.1366 cv
194.659 24.1166 194.529 24.0816 194.394 24.0316 cv
195.374 22.4866 mo
195.594 22.4866 195.769 22.4116 195.899 22.2616 cv
196.029 22.1116 196.094 21.9016 196.094 21.6366 cv
196.094 21.3766 196.029 21.1666 195.899 21.0166 cv
195.769 20.8666 195.594 20.7866 195.374 20.7866 cv
195.154 20.7866 194.979 20.8666 194.849 21.0166 cv
194.719 21.1666 194.654 21.3766 194.654 21.6366 cv
194.654 21.9016 194.719 22.1116 194.849 22.2616 cv
194.979 22.4116 195.154 22.4866 195.374 22.4866 cv
f
198.614 22.3766 mo
198.379 22.3766 198.194 22.4416 198.059 22.5666 cv
197.924 22.6916 197.859 22.8616 197.859 23.0816 cv
197.859 23.3016 197.924 23.4766 198.059 23.6016 cv
198.194 23.7266 198.379 23.7866 198.614 23.7866 cv
198.844 23.7866 199.029 23.7266 199.164 23.5966 cv
199.299 23.4716 199.369 23.3016 199.369 23.0816 cv
199.369 22.8616 199.299 22.6916 199.169 22.5666 cv
199.034 22.4416 198.849 22.3766 198.614 22.3766 cv
198.119 22.1666 mo
197.909 22.1166 197.744 22.0166 197.624 21.8716 cv
197.504 21.7266 197.449 21.5516 197.449 21.3416 cv
197.449 21.0516 197.549 20.8216 197.759 20.6516 cv
197.964 20.4816 198.249 20.3966 198.614 20.3966 cv
198.974 20.3966 199.259 20.4816 199.469 20.6516 cv
199.674 20.8216 199.779 21.0516 199.779 21.3416 cv
199.779 21.5516 199.719 21.7266 199.599 21.8716 cv
199.479 22.0166 199.319 22.1166 199.109 22.1666 cv
199.344 22.2216 199.529 22.3316 199.664 22.4916 cv
199.794 22.6516 199.864 22.8516 199.864 23.0816 cv
199.864 23.4366 199.754 23.7066 199.539 23.8916 cv
199.319 24.0816 199.014 24.1716 198.614 24.1716 cv
198.209 24.1716 197.899 24.0816 197.684 23.8916 cv
197.469 23.7066 197.364 23.4366 197.364 23.0816 cv
197.364 22.8516 197.429 22.6516 197.564 22.4916 cv
197.694 22.3316 197.879 22.2216 198.119 22.1666 cv
197.939 21.3866 mo
197.939 21.5766 197.994 21.7266 198.114 21.8316 cv
198.234 21.9366 198.399 21.9866 198.614 21.9866 cv
198.824 21.9866 198.989 21.9366 199.109 21.8316 cv
199.229 21.7266 199.289 21.5766 199.289 21.3866 cv
199.289 21.1966 199.229 21.0516 199.109 20.9466 cv
198.989 20.8416 198.824 20.7866 198.614 20.7866 cv
198.399 20.7866 198.234 20.8416 198.114 20.9466 cv
197.994 21.0516 197.939 21.1966 197.939 21.3866 cv
f
207.231 8.99203 mo
203.731 8.99203 li
f
207.231 8.99203 mo
203.731 8.99203 li
@
189.694 10.4755 mo
190.499 10.4755 li
190.499 7.69547 li
189.624 7.87047 li
189.624 7.42047 li
190.494 7.24547 li
190.989 7.24547 li
190.989 10.4755 li
191.794 10.4755 li
191.794 10.8905 li
189.694 10.8905 li
189.694 10.4755 li
f
192.789 10.2705 mo
193.304 10.2705 li
193.304 10.8905 li
192.789 10.8905 li
192.789 10.2705 li
f
195.434 7.57047 mo
195.179 7.57047 194.989 7.69547 194.859 7.94547 cv
194.729 8.19547 194.669 8.57047 194.669 9.07047 cv
194.669 9.57047 194.729 9.94547 194.859 10.1955 cv
194.989 10.4455 195.179 10.5705 195.434 10.5705 cv
195.689 10.5705 195.879 10.4455 196.009 10.1955 cv
196.134 9.94547 196.199 9.57047 196.199 9.07047 cv
196.199 8.57047 196.134 8.19547 196.009 7.94547 cv
195.879 7.69547 195.689 7.57047 195.434 7.57047 cv
195.434 7.18047 mo
195.839 7.18047 196.149 7.34547 196.369 7.66547 cv
196.584 7.99047 196.694 8.46047 196.694 9.07047 cv
196.694 9.68547 196.584 10.1555 196.369 10.4755 cv
196.149 10.7955 195.839 10.9555 195.434 10.9555 cv
195.024 10.9555 194.709 10.7955 194.494 10.4755 cv
194.279 10.1555 194.174 9.68547 194.174 9.07047 cv
194.174 8.46047 194.279 7.99047 194.494 7.66547 cv
194.709 7.34547 195.024 7.18047 195.434 7.18047 cv
f
198.614 7.57047 mo
198.359 7.57047 198.169 7.69547 198.039 7.94547 cv
197.909 8.19547 197.849 8.57047 197.849 9.07047 cv
197.849 9.57047 197.909 9.94547 198.039 10.1955 cv
198.169 10.4455 198.359 10.5705 198.614 10.5705 cv
198.869 10.5705 199.059 10.4455 199.189 10.1955 cv
199.314 9.94547 199.379 9.57047 199.379 9.07047 cv
199.379 8.57047 199.314 8.19547 199.189 7.94547 cv
199.059 7.69547 198.869 7.57047 198.614 7.57047 cv
198.614 7.18047 mo
199.019 7.18047 199.329 7.34547 199.549 7.66547 cv
199.764 7.99047 199.874 8.46047 199.874 9.07047 cv
199.874 9.68547 199.764 10.1555 199.549 10.4755 cv
199.329 10.7955 199.019 10.9555 198.614 10.9555 cv
198.204 10.9555 197.889 10.7955 197.674 10.4755 cv
197.459 10.1555 197.354 9.68547 197.354 9.07047 cv
197.354 8.46047 197.459 7.99047 197.674 7.66547 cv
197.889 7.34547 198.204 7.18047 198.614 7.18047 cv
f
gsave
207.231 61.8564 mo
277.537 61.8564 li
277.537 7.54789 li
207.231 7.54789 li
207.231 61.8564 li
clp
1 lw
2 lc
210.426 47.7284 mo
231.731 33.9374 li
253.037 36.0255 li
274.342 9.46121 li
1 /0 /CSD get_res sepcs
.337255 sep
@
gsave
208.426 49.7284 mo
212.426 49.7284 li
212.426 45.7283 li
208.426 45.7283 li
208.426 49.7284 li
clp
210.426 46.2284 mo
208.926 49.2284 li
211.926 49.2284 li
cp
f
0 lc
0 lj
210.426 46.2284 mo
208.926 49.2284 li
211.926 49.2284 li
cp
@
grestore
gsave
229.732 35.9375 mo
233.732 35.9375 li
233.732 31.9374 li
229.732 31.9374 li
229.732 35.9375 li
clp
231.732 32.4374 mo
230.232 35.4374 li
233.232 35.4374 li
cp
f
0 lc
0 lj
231.732 32.4374 mo
230.232 35.4374 li
233.232 35.4374 li
cp
@
grestore
gsave
251.037 38.0255 mo
255.037 38.0255 li
255.037 34.0255 li
251.037 34.0255 li
251.037 38.0255 li
clp
253.037 34.5255 mo
251.537 37.5255 li
254.537 37.5255 li
cp
f
0 lc
0 lj
253.037 34.5255 mo
251.537 37.5255 li
254.537 37.5255 li
cp
@
grestore
gsave
272.342 11.4611 mo
276.342 11.4611 li
276.342 7.46114 li
272.342 7.46114 li
272.342 11.4611 li
clp
274.342 7.96118 mo
272.842 10.9612 li
275.842 10.9612 li
cp
f
0 lc
0 lj
274.342 7.96118 mo
272.842 10.9612 li
275.842 10.9612 li
cp
@
grestore
grestore
1 lw
2 lc
210.426 26.9725 mo
231.731 21.4284 li
253.037 25.2544 li
274.342 9.67926 li
0 .760891 .735378 0 cmyk
@
gsave
208.426 28.9726 mo
212.426 28.9726 li
212.426 24.9725 li
208.426 24.9725 li
208.426 28.9726 li
clp
210.426 28.4725 mo
210.824 28.4725 211.206 28.3145 211.487 28.0332 cv
211.768 27.7519 211.926 27.3703 211.926 26.9725 cv
211.926 26.5747 211.768 26.1932 211.487 25.9119 cv
211.206 25.6306 210.824 25.4725 210.426 25.4725 cv
210.029 25.4725 209.647 25.6306 209.366 25.9119 cv
209.084 26.1932 208.926 26.5747 208.926 26.9725 cv
208.926 27.3703 209.084 27.7519 209.366 28.0332 cv
209.647 28.3145 210.029 28.4725 210.426 28.4725 cv
cp
f
0 lc
210.426 28.4725 mo
210.824 28.4725 211.206 28.3145 211.487 28.0332 cv
211.768 27.7519 211.926 27.3703 211.926 26.9725 cv
211.926 26.5747 211.768 26.1932 211.487 25.9119 cv
211.206 25.6306 210.824 25.4725 210.426 25.4725 cv
210.029 25.4725 209.647 25.6306 209.366 25.9119 cv
209.084 26.1932 208.926 26.5747 208.926 26.9725 cv
208.926 27.3703 209.084 27.7519 209.366 28.0332 cv
209.647 28.3145 210.029 28.4725 210.426 28.4725 cv
cp
@
grestore
gsave
229.732 23.4283 mo
233.732 23.4283 li
233.732 19.4283 li
229.732 19.4283 li
229.732 23.4283 li
clp
231.732 22.9284 mo
232.129 22.9284 232.511 22.7703 232.792 22.489 cv
233.073 22.2077 233.232 21.8262 233.232 21.4284 cv
233.232 21.0306 233.073 20.649 232.792 20.3677 cv
232.511 20.0864 232.129 19.9284 231.732 19.9284 cv
231.334 19.9284 230.952 20.0864 230.671 20.3677 cv
230.39 20.649 230.232 21.0306 230.232 21.4284 cv
230.232 21.8262 230.39 22.2077 230.671 22.489 cv
230.952 22.7703 231.334 22.9284 231.732 22.9284 cv
cp
f
0 lc
231.732 22.9284 mo
232.129 22.9284 232.511 22.7703 232.792 22.489 cv
233.073 22.2077 233.232 21.8262 233.232 21.4284 cv
233.232 21.0306 233.073 20.649 232.792 20.3677 cv
232.511 20.0864 232.129 19.9284 231.732 19.9284 cv
231.334 19.9284 230.952 20.0864 230.671 20.3677 cv
230.39 20.649 230.232 21.0306 230.232 21.4284 cv
230.232 21.8262 230.39 22.2077 230.671 22.489 cv
230.952 22.7703 231.334 22.9284 231.732 22.9284 cv
cp
@
grestore
gsave
251.037 27.2545 mo
255.037 27.2545 li
255.037 23.2545 li
251.037 23.2545 li
251.037 27.2545 li
clp
253.037 26.7544 mo
253.434 26.7544 253.816 26.5964 254.097 26.3151 cv
254.379 26.0338 254.537 25.6522 254.537 25.2544 cv
254.537 24.8566 254.379 24.4751 254.097 24.1938 cv
253.816 23.9125 253.434 23.7544 253.037 23.7544 cv
252.639 23.7544 252.257 23.9125 251.976 24.1938 cv
251.695 24.4751 251.537 24.8566 251.537 25.2544 cv
251.537 25.6522 251.695 26.0338 251.976 26.3151 cv
252.257 26.5964 252.639 26.7544 253.037 26.7544 cv
cp
f
0 lc
253.037 26.7544 mo
253.434 26.7544 253.816 26.5964 254.097 26.3151 cv
254.379 26.0338 254.537 25.6522 254.537 25.2544 cv
254.537 24.8566 254.379 24.4751 254.097 24.1938 cv
253.816 23.9125 253.434 23.7544 253.037 23.7544 cv
252.639 23.7544 252.257 23.9125 251.976 24.1938 cv
251.695 24.4751 251.537 24.8566 251.537 25.2544 cv
251.537 25.6522 251.695 26.0338 251.976 26.3151 cv
252.257 26.5964 252.639 26.7544 253.037 26.7544 cv
cp
@
grestore
gsave
272.342 11.6793 mo
276.342 11.6793 li
276.342 7.67928 li
272.342 7.67928 li
272.342 11.6793 li
clp
274.342 11.1793 mo
274.739 11.1793 275.121 11.0212 275.402 10.7399 cv
275.684 10.4586 275.842 10.0771 275.842 9.67926 cv
275.842 9.28146 275.684 8.89989 275.402 8.6186 cv
275.121 8.33731 274.739 8.17926 274.342 8.17926 cv
273.944 8.17926 273.562 8.33731 273.281 8.6186 cv
273 8.89989 272.842 9.28146 272.842 9.67926 cv
272.842 10.0771 273 10.4586 273.281 10.7399 cv
273.562 11.0212 273.944 11.1793 274.342 11.1793 cv
cp
f
0 lc
274.342 11.1793 mo
274.739 11.1793 275.121 11.0212 275.402 10.7399 cv
275.684 10.4586 275.842 10.0771 275.842 9.67926 cv
275.842 9.28146 275.684 8.89989 275.402 8.6186 cv
275.121 8.33731 274.739 8.17926 274.342 8.17926 cv
273.944 8.17926 273.562 8.33731 273.281 8.6186 cv
273 8.89989 272.842 9.28146 272.842 9.67926 cv
272.842 10.0771 273 10.4586 273.281 10.7399 cv
273.562 11.0212 273.944 11.1793 274.342 11.1793 cv
cp
@
grestore
210.426 40.8071 mo
231.731 37.1886 li
253.037 28.9906 li
274.342 25.8082 li
.468757 .0952163 .538781 0 cmyk
@
gsave
208.5 42.5206 mo
212.353 42.5206 li
212.353 38.8072 li
208.5 38.8072 li
208.5 42.5206 li
clp
210.426 39.3071 mo
210.09 40.3436 li
209 40.3436 li
209.882 40.9842 li
209.545 42.0207 li
210.426 41.3801 li
211.308 42.0207 li
210.971 40.9842 li
211.853 40.3436 li
210.763 40.3436 li
cp
f
0 lc
2 lj
210.426 39.3071 mo
210.09 40.3436 li
209 40.3436 li
209.882 40.9842 li
209.545 42.0207 li
210.426 41.3801 li
211.308 42.0207 li
210.971 40.9842 li
211.853 40.3436 li
210.763 40.3436 li
cp
@
grestore
gsave
229.805 38.9021 mo
233.658 38.9021 li
233.658 35.1886 li
229.805 35.1886 li
229.805 38.9021 li
clp
231.732 35.6886 mo
231.395 36.725 li
230.305 36.725 li
231.187 37.3656 li
230.85 38.4021 li
231.732 37.7615 li
232.613 38.4021 li
232.276 37.3656 li
233.158 36.725 li
232.068 36.725 li
cp
f
0 lc
2 lj
231.732 35.6886 mo
231.395 36.725 li
230.305 36.725 li
231.187 37.3656 li
230.85 38.4021 li
231.732 37.7615 li
232.613 38.4021 li
232.276 37.3656 li
233.158 36.725 li
232.068 36.725 li
cp
@
grestore
gsave
251.11 30.7042 mo
254.963 30.7042 li
254.963 26.9906 li
251.11 26.9906 li
251.11 30.7042 li
clp
253.037 27.4906 mo
252.7 28.5271 li
251.61 28.5271 li
252.492 29.1677 li
252.155 30.2042 li
253.037 29.5636 li
253.918 30.2042 li
253.581 29.1677 li
254.463 28.5271 li
253.373 28.5271 li
cp
f
0 lc
2 lj
253.037 27.4906 mo
252.7 28.5271 li
251.61 28.5271 li
252.492 29.1677 li
252.155 30.2042 li
253.037 29.5636 li
253.918 30.2042 li
253.581 29.1677 li
254.463 28.5271 li
253.373 28.5271 li
cp
@
grestore
gsave
272.415 27.5217 mo
276.268 27.5217 li
276.268 23.8082 li
272.415 23.8082 li
272.415 27.5217 li
clp
274.342 24.3082 mo
274.005 25.3447 li
272.915 25.3447 li
273.797 25.9852 li
273.46 27.0217 li
274.342 26.3811 li
275.223 27.0217 li
274.887 25.9852 li
275.768 25.3447 li
274.678 25.3447 li
cp
f
0 lc
2 lj
274.342 24.3082 mo
274.005 25.3447 li
272.915 25.3447 li
273.797 25.9852 li
273.46 27.0217 li
274.342 26.3811 li
275.223 27.0217 li
274.887 25.9852 li
275.768 25.3447 li
274.678 25.3447 li
cp
@
grestore
210.426 37.9465 mo
231.731 35.3033 li
253.037 28.0985 li
274.342 26.5014 li
.749203 .420264 .103029 .000457771 cmyk
@
gsave
208.426 39.9464 mo
212.426 39.9464 li
212.426 35.9465 li
208.426 35.9465 li
208.426 39.9464 li
clp
208.926 39.4465 mo
211.926 39.4465 li
211.926 36.4465 li
208.926 36.4465 li
cp
f
0 lc
0 lj
208.926 39.4465 mo
211.926 39.4465 li
211.926 36.4465 li
208.926 36.4465 li
cp
@
grestore
gsave
229.732 37.3033 mo
233.732 37.3033 li
233.732 33.3033 li
229.732 33.3033 li
229.732 37.3033 li
clp
230.232 36.8033 mo
233.232 36.8033 li
233.232 33.8033 li
230.232 33.8033 li
cp
f
0 lc
0 lj
230.232 36.8033 mo
233.232 36.8033 li
233.232 33.8033 li
230.232 33.8033 li
cp
@
grestore
gsave
251.037 30.0986 mo
255.037 30.0986 li
255.037 26.0986 li
251.037 26.0986 li
251.037 30.0986 li
clp
251.537 29.5985 mo
254.537 29.5985 li
254.537 26.5985 li
251.537 26.5985 li
cp
f
0 lc
0 lj
251.537 29.5985 mo
254.537 29.5985 li
254.537 26.5985 li
251.537 26.5985 li
cp
@
grestore
gsave
272.342 28.5014 mo
276.342 28.5014 li
276.342 24.5014 li
272.342 24.5014 li
272.342 28.5014 li
clp
272.842 28.0014 mo
275.842 28.0014 li
275.842 25.0014 li
272.842 25.0014 li
cp
f
0 lc
0 lj
272.842 28.0014 mo
275.842 28.0014 li
275.842 25.0014 li
272.842 25.0014 li
cp
@
grestore
.8 lw
0 lj
207.231 61.8564 mo
207.231 7.54785 li
1 /0 /CSD get_res sepcs
1 sep
@
277.537 61.8564 mo
277.537 7.54785 li
@
207.231 61.8564 mo
277.537 61.8564 li
@
207.231 7.54785 mo
277.537 7.54785 li
@
298.629 61.8564 mo
368.936 61.8564 li
368.936 7.54785 li
298.629 7.54785 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
301.825 61.8564 mo
301.825 65.3564 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
301.825 61.8564 mo
301.825 65.3564 li
@
300.23 69.4933 mo
299.56 71.3083 li
300.9 71.3083 li
300.23 69.4933 li
299.95 69.0083 mo
300.51 69.0083 li
301.9 72.6533 li
301.385 72.6533 li
301.055 71.7183 li
299.41 71.7183 li
299.08 72.6533 li
298.56 72.6533 li
299.95 69.0083 li
f
302.56 72.2383 mo
303.365 72.2383 li
303.365 69.4583 li
302.49 69.6333 li
302.49 69.1833 li
303.36 69.0083 li
303.855 69.0083 li
303.855 72.2383 li
304.66 72.2383 li
304.66 72.6533 li
302.56 72.6533 li
302.56 72.2383 li
f
323.13 61.8564 mo
323.13 65.3564 li
f
323.13 61.8564 mo
323.13 65.3564 li
@
321.536 69.4933 mo
320.866 71.3083 li
322.206 71.3083 li
321.536 69.4933 li
321.256 69.0083 mo
321.816 69.0083 li
323.206 72.6533 li
322.691 72.6533 li
322.361 71.7183 li
320.716 71.7183 li
320.386 72.6533 li
319.866 72.6533 li
321.256 69.0083 li
f
324.206 72.2383 mo
325.926 72.2383 li
325.926 72.6533 li
323.611 72.6533 li
323.611 72.2383 li
323.796 72.0483 324.051 71.7883 324.376 71.4583 cv
324.696 71.1333 324.901 70.9233 324.986 70.8283 cv
325.146 70.6533 325.256 70.5033 325.316 70.3783 cv
325.376 70.2583 325.411 70.1333 325.411 70.0133 cv
325.411 69.8233 325.341 69.6633 325.206 69.5433 cv
325.071 69.4233 324.896 69.3583 324.676 69.3583 cv
324.521 69.3583 324.356 69.3883 324.186 69.4383 cv
324.016 69.4933 323.831 69.5733 323.636 69.6833 cv
323.636 69.1833 li
323.836 69.1033 324.021 69.0433 324.191 69.0033 cv
324.361 68.9633 324.521 68.9433 324.666 68.9433 cv
325.041 68.9433 325.341 69.0383 325.566 69.2283 cv
325.791 69.4183 325.906 69.6683 325.906 69.9833 cv
325.906 70.1333 325.876 70.2783 325.821 70.4083 cv
325.766 70.5433 325.666 70.7033 325.516 70.8833 cv
325.476 70.9333 325.346 71.0683 325.126 71.2933 cv
324.906 71.5183 324.601 71.8333 324.206 72.2383 cv
f
344.435 61.8564 mo
344.435 65.3564 li
f
344.435 61.8564 mo
344.435 65.3564 li
@
342.841 69.4933 mo
342.171 71.3083 li
343.511 71.3083 li
342.841 69.4933 li
342.561 69.0083 mo
343.121 69.0083 li
344.511 72.6533 li
343.996 72.6533 li
343.666 71.7183 li
342.021 71.7183 li
341.691 72.6533 li
341.171 72.6533 li
342.561 69.0083 li
f
346.581 70.6883 mo
346.816 70.7383 347.001 70.8433 347.131 71.0033 cv
347.261 71.1633 347.331 71.3633 347.331 71.5933 cv
347.331 71.9533 347.206 72.2333 346.961 72.4283 cv
346.711 72.6233 346.361 72.7183 345.906 72.7183 cv
345.751 72.7183 345.591 72.7033 345.431 72.6733 cv
345.271 72.6483 345.101 72.6033 344.931 72.5433 cv
344.931 72.0683 li
345.066 72.1483 345.216 72.2083 345.381 72.2483 cv
345.541 72.2883 345.711 72.3083 345.891 72.3083 cv
346.201 72.3083 346.436 72.2483 346.596 72.1283 cv
346.756 72.0083 346.841 71.8283 346.841 71.5933 cv
346.841 71.3833 346.766 71.2133 346.616 71.0933 cv
346.466 70.9733 346.256 70.9083 345.986 70.9083 cv
345.561 70.9083 li
345.561 70.5033 li
346.006 70.5033 li
346.246 70.5033 346.431 70.4583 346.561 70.3583 cv
346.691 70.2633 346.756 70.1233 346.756 69.9383 cv
346.756 69.7533 346.686 69.6083 346.556 69.5083 cv
346.421 69.4083 346.231 69.3583 345.986 69.3583 cv
345.851 69.3583 345.706 69.3733 345.551 69.4033 cv
345.396 69.4333 345.226 69.4783 345.041 69.5383 cv
345.041 69.0983 li
345.226 69.0483 345.401 69.0083 345.566 68.9833 cv
345.726 68.9583 345.881 68.9433 346.031 68.9433 cv
346.401 68.9433 346.696 69.0283 346.916 69.1983 cv
347.136 69.3683 347.246 69.5983 347.246 69.8883 cv
347.246 70.0883 347.186 70.2583 347.071 70.3983 cv
346.956 70.5383 346.791 70.6383 346.581 70.6883 cv
f
365.74 61.8564 mo
365.74 65.3564 li
f
365.74 61.8564 mo
365.74 65.3564 li
@
364.146 69.4933 mo
363.476 71.3083 li
364.816 71.3083 li
364.146 69.4933 li
363.866 69.0083 mo
364.426 69.0083 li
365.816 72.6533 li
365.301 72.6533 li
364.971 71.7183 li
363.326 71.7183 li
362.996 72.6533 li
362.476 72.6533 li
363.866 69.0083 li
f
367.746 69.4383 mo
366.501 71.3833 li
367.746 71.3833 li
367.746 69.4383 li
367.616 69.0083 mo
368.236 69.0083 li
368.236 71.3833 li
368.756 71.3833 li
368.756 71.7933 li
368.236 71.7933 li
368.236 72.6533 li
367.746 72.6533 li
367.746 71.7933 li
366.101 71.7933 li
366.101 71.3183 li
367.616 69.0083 li
f
298.629 61.8564 mo
295.129 61.8564 li
f
298.629 61.8564 mo
295.129 61.8564 li
@
282.063 60.4349 mo
281.808 60.4349 281.618 60.5599 281.488 60.8099 cv
281.358 61.0599 281.298 61.4349 281.298 61.9349 cv
281.298 62.4349 281.358 62.8099 281.488 63.0599 cv
281.618 63.3099 281.808 63.4349 282.063 63.4349 cv
282.318 63.4349 282.508 63.3099 282.638 63.0599 cv
282.763 62.8099 282.828 62.4349 282.828 61.9349 cv
282.828 61.4349 282.763 61.0599 282.638 60.8099 cv
282.508 60.5599 282.318 60.4349 282.063 60.4349 cv
282.063 60.0449 mo
282.468 60.0449 282.778 60.2099 282.998 60.5299 cv
283.213 60.8549 283.323 61.3249 283.323 61.9349 cv
283.323 62.5499 283.213 63.0199 282.998 63.3399 cv
282.778 63.6599 282.468 63.8199 282.063 63.8199 cv
281.653 63.8199 281.338 63.6599 281.123 63.3399 cv
280.908 63.0199 280.803 62.5499 280.803 61.9349 cv
280.803 61.3249 280.908 60.8549 281.123 60.5299 cv
281.338 60.2099 281.653 60.0449 282.063 60.0449 cv
f
284.188 63.1349 mo
284.703 63.1349 li
284.703 63.7549 li
284.188 63.7549 li
284.188 63.1349 li
f
285.793 63.6799 mo
285.793 63.2299 li
285.913 63.2899 286.038 63.3349 286.168 63.3649 cv
286.293 63.3949 286.418 63.4099 286.543 63.4099 cv
286.863 63.4099 287.113 63.3049 287.283 63.0849 cv
287.453 62.8649 287.553 62.5349 287.583 62.0849 cv
287.483 62.2249 287.363 62.3349 287.223 62.4099 cv
287.078 62.4849 286.918 62.5199 286.743 62.5199 cv
286.373 62.5199 286.083 62.4099 285.873 62.1899 cv
285.663 61.9699 285.558 61.6699 285.558 61.2849 cv
285.558 60.9149 285.668 60.6149 285.888 60.3849 cv
286.108 60.1599 286.403 60.0449 286.773 60.0449 cv
287.193 60.0449 287.518 60.2099 287.738 60.5299 cv
287.958 60.8549 288.073 61.3249 288.073 61.9349 cv
288.073 62.5149 287.933 62.9699 287.663 63.3099 cv
287.388 63.6499 287.023 63.8199 286.563 63.8199 cv
286.438 63.8199 286.313 63.8049 286.188 63.7849 cv
286.058 63.7649 285.928 63.7299 285.793 63.6799 cv
286.773 62.1349 mo
286.993 62.1349 287.168 62.0599 287.298 61.9099 cv
287.428 61.7599 287.493 61.5499 287.493 61.2849 cv
287.493 61.0249 287.428 60.8149 287.298 60.6649 cv
287.168 60.5149 286.993 60.4349 286.773 60.4349 cv
286.553 60.4349 286.378 60.5149 286.248 60.6649 cv
286.118 60.8149 286.053 61.0249 286.053 61.2849 cv
286.053 61.5499 286.118 61.7599 286.248 61.9099 cv
286.378 62.0599 286.553 62.1349 286.773 62.1349 cv
f
289.383 63.3399 mo
291.103 63.3399 li
291.103 63.7549 li
288.788 63.7549 li
288.788 63.3399 li
288.973 63.1499 289.228 62.8899 289.553 62.5599 cv
289.873 62.2349 290.078 62.0249 290.163 61.9299 cv
290.323 61.7549 290.433 61.6049 290.493 61.4799 cv
290.553 61.3599 290.588 61.2349 290.588 61.1149 cv
290.588 60.9249 290.518 60.7649 290.383 60.6449 cv
290.248 60.5249 290.073 60.4599 289.853 60.4599 cv
289.698 60.4599 289.533 60.4899 289.363 60.5399 cv
289.193 60.5949 289.008 60.6749 288.813 60.7849 cv
288.813 60.2849 li
289.013 60.2049 289.198 60.1449 289.368 60.1049 cv
289.538 60.0649 289.698 60.0449 289.843 60.0449 cv
290.218 60.0449 290.518 60.1399 290.743 60.3299 cv
290.968 60.5199 291.083 60.7699 291.083 61.0849 cv
291.083 61.2349 291.053 61.3799 290.998 61.5099 cv
290.943 61.6449 290.843 61.8049 290.693 61.9849 cv
290.653 62.0349 290.523 62.1699 290.303 62.3949 cv
290.083 62.6199 289.778 62.9349 289.383 63.3399 cv
f
298.629 48.683 mo
295.129 48.683 li
f
298.629 48.683 mo
295.129 48.683 li
@
282.063 47.2615 mo
281.808 47.2615 281.618 47.3865 281.488 47.6365 cv
281.358 47.8865 281.298 48.2615 281.298 48.7615 cv
281.298 49.2615 281.358 49.6365 281.488 49.8865 cv
281.618 50.1365 281.808 50.2615 282.063 50.2615 cv
282.318 50.2615 282.508 50.1365 282.638 49.8865 cv
282.763 49.6365 282.828 49.2615 282.828 48.7615 cv
282.828 48.2615 282.763 47.8865 282.638 47.6365 cv
282.508 47.3865 282.318 47.2615 282.063 47.2615 cv
282.063 46.8715 mo
282.468 46.8715 282.778 47.0365 282.998 47.3565 cv
283.213 47.6815 283.323 48.1515 283.323 48.7615 cv
283.323 49.3765 283.213 49.8465 282.998 50.1665 cv
282.778 50.4865 282.468 50.6465 282.063 50.6465 cv
281.653 50.6465 281.338 50.4865 281.123 50.1665 cv
280.908 49.8465 280.803 49.3765 280.803 48.7615 cv
280.803 48.1515 280.908 47.6815 281.123 47.3565 cv
281.338 47.0365 281.653 46.8715 282.063 46.8715 cv
f
284.188 49.9615 mo
284.703 49.9615 li
284.703 50.5815 li
284.188 50.5815 li
284.188 49.9615 li
f
285.793 50.5065 mo
285.793 50.0565 li
285.913 50.1165 286.038 50.1615 286.168 50.1915 cv
286.293 50.2215 286.418 50.2365 286.543 50.2365 cv
286.863 50.2365 287.113 50.1315 287.283 49.9115 cv
287.453 49.6915 287.553 49.3615 287.583 48.9115 cv
287.483 49.0515 287.363 49.1615 287.223 49.2365 cv
287.078 49.3115 286.918 49.3465 286.743 49.3465 cv
286.373 49.3465 286.083 49.2365 285.873 49.0165 cv
285.663 48.7965 285.558 48.4965 285.558 48.1115 cv
285.558 47.7415 285.668 47.4415 285.888 47.2115 cv
286.108 46.9865 286.403 46.8715 286.773 46.8715 cv
287.193 46.8715 287.518 47.0365 287.738 47.3565 cv
287.958 47.6815 288.073 48.1515 288.073 48.7615 cv
288.073 49.3415 287.933 49.7965 287.663 50.1365 cv
287.388 50.4765 287.023 50.6465 286.563 50.6465 cv
286.438 50.6465 286.313 50.6315 286.188 50.6115 cv
286.058 50.5915 285.928 50.5565 285.793 50.5065 cv
286.773 48.9615 mo
286.993 48.9615 287.168 48.8865 287.298 48.7365 cv
287.428 48.5865 287.493 48.3765 287.493 48.1115 cv
287.493 47.8515 287.428 47.6415 287.298 47.4915 cv
287.168 47.3415 286.993 47.2615 286.773 47.2615 cv
286.553 47.2615 286.378 47.3415 286.248 47.4915 cv
286.118 47.6415 286.053 47.8515 286.053 48.1115 cv
286.053 48.3765 286.118 48.5865 286.248 48.7365 cv
286.378 48.8865 286.553 48.9615 286.773 48.9615 cv
f
290.313 47.3665 mo
289.068 49.3115 li
290.313 49.3115 li
290.313 47.3665 li
290.183 46.9365 mo
290.803 46.9365 li
290.803 49.3115 li
291.323 49.3115 li
291.323 49.7215 li
290.803 49.7215 li
290.803 50.5815 li
290.313 50.5815 li
290.313 49.7215 li
288.668 49.7215 li
288.668 49.2465 li
290.183 46.9365 li
f
298.629 35.5096 mo
295.129 35.5096 li
f
298.629 35.5096 mo
295.129 35.5096 li
@
282.063 34.0881 mo
281.808 34.0881 281.618 34.2131 281.488 34.4631 cv
281.358 34.7131 281.298 35.0881 281.298 35.5881 cv
281.298 36.0881 281.358 36.4631 281.488 36.7131 cv
281.618 36.9631 281.808 37.0881 282.063 37.0881 cv
282.318 37.0881 282.508 36.9631 282.638 36.7131 cv
282.763 36.4631 282.828 36.0881 282.828 35.5881 cv
282.828 35.0881 282.763 34.7131 282.638 34.4631 cv
282.508 34.2131 282.318 34.0881 282.063 34.0881 cv
282.063 33.6981 mo
282.468 33.6981 282.778 33.8631 282.998 34.1831 cv
283.213 34.5081 283.323 34.9781 283.323 35.5881 cv
283.323 36.2031 283.213 36.6731 282.998 36.9931 cv
282.778 37.3131 282.468 37.4731 282.063 37.4731 cv
281.653 37.4731 281.338 37.3131 281.123 36.9931 cv
280.908 36.6731 280.803 36.2031 280.803 35.5881 cv
280.803 34.9781 280.908 34.5081 281.123 34.1831 cv
281.338 33.8631 281.653 33.6981 282.063 33.6981 cv
f
284.188 36.7881 mo
284.703 36.7881 li
284.703 37.4081 li
284.188 37.4081 li
284.188 36.7881 li
f
285.793 37.3331 mo
285.793 36.8831 li
285.913 36.9431 286.038 36.9881 286.168 37.0181 cv
286.293 37.0481 286.418 37.0631 286.543 37.0631 cv
286.863 37.0631 287.113 36.9581 287.283 36.7381 cv
287.453 36.5181 287.553 36.1881 287.583 35.7381 cv
287.483 35.8781 287.363 35.9881 287.223 36.0631 cv
287.078 36.1381 286.918 36.1731 286.743 36.1731 cv
286.373 36.1731 286.083 36.0631 285.873 35.8431 cv
285.663 35.6231 285.558 35.3231 285.558 34.9381 cv
285.558 34.5681 285.668 34.2681 285.888 34.0381 cv
286.108 33.8131 286.403 33.6981 286.773 33.6981 cv
287.193 33.6981 287.518 33.8631 287.738 34.1831 cv
287.958 34.5081 288.073 34.9781 288.073 35.5881 cv
288.073 36.1681 287.933 36.6231 287.663 36.9631 cv
287.388 37.3031 287.023 37.4731 286.563 37.4731 cv
286.438 37.4731 286.313 37.4581 286.188 37.4381 cv
286.058 37.4181 285.928 37.3831 285.793 37.3331 cv
286.773 35.7881 mo
286.993 35.7881 287.168 35.7131 287.298 35.5631 cv
287.428 35.4131 287.493 35.2031 287.493 34.9381 cv
287.493 34.6781 287.428 34.4681 287.298 34.3181 cv
287.168 34.1681 286.993 34.0881 286.773 34.0881 cv
286.553 34.0881 286.378 34.1681 286.248 34.3181 cv
286.118 34.4681 286.053 34.6781 286.053 34.9381 cv
286.053 35.2031 286.118 35.4131 286.248 35.5631 cv
286.378 35.7131 286.553 35.7881 286.773 35.7881 cv
f
290.073 35.3881 mo
289.853 35.3881 289.678 35.4681 289.548 35.6181 cv
289.418 35.7681 289.353 35.9781 289.353 36.2381 cv
289.353 36.5031 289.418 36.7131 289.548 36.8631 cv
289.678 37.0131 289.853 37.0881 290.073 37.0881 cv
290.293 37.0881 290.468 37.0131 290.598 36.8631 cv
290.728 36.7131 290.793 36.5031 290.793 36.2381 cv
290.793 35.9781 290.728 35.7681 290.598 35.6181 cv
290.468 35.4681 290.293 35.3881 290.073 35.3881 cv
291.053 33.8431 mo
291.053 34.2931 li
290.928 34.2331 290.803 34.1881 290.678 34.1581 cv
290.548 34.1281 290.423 34.1131 290.303 34.1131 cv
289.973 34.1131 289.723 34.2231 289.553 34.4431 cv
289.383 34.6631 289.283 34.9981 289.263 35.4381 cv
289.358 35.2981 289.478 35.1881 289.623 35.1131 cv
289.768 35.0381 289.928 34.9981 290.103 34.9981 cv
290.468 34.9981 290.758 35.1131 290.968 35.3331 cv
291.178 35.5531 291.288 35.8581 291.288 36.2381 cv
291.288 36.6131 291.173 36.9131 290.953 37.1381 cv
290.733 37.3631 290.438 37.4731 290.073 37.4731 cv
289.653 37.4731 289.328 37.3131 289.108 36.9931 cv
288.883 36.6731 288.773 36.2031 288.773 35.5881 cv
288.773 35.0131 288.908 34.5531 289.183 34.2131 cv
289.453 33.8731 289.823 33.6981 290.283 33.6981 cv
290.403 33.6981 290.528 33.7131 290.658 33.7331 cv
290.783 33.7581 290.913 33.7931 291.053 33.8431 cv
f
298.629 22.3363 mo
295.129 22.3363 li
f
298.629 22.3363 mo
295.129 22.3363 li
@
282.063 20.9147 mo
281.808 20.9147 281.618 21.0397 281.488 21.2897 cv
281.358 21.5397 281.298 21.9147 281.298 22.4147 cv
281.298 22.9147 281.358 23.2897 281.488 23.5397 cv
281.618 23.7897 281.808 23.9147 282.063 23.9147 cv
282.318 23.9147 282.508 23.7897 282.638 23.5397 cv
282.763 23.2897 282.828 22.9147 282.828 22.4147 cv
282.828 21.9147 282.763 21.5397 282.638 21.2897 cv
282.508 21.0397 282.318 20.9147 282.063 20.9147 cv
282.063 20.5247 mo
282.468 20.5247 282.778 20.6897 282.998 21.0097 cv
283.213 21.3347 283.323 21.8047 283.323 22.4147 cv
283.323 23.0297 283.213 23.4997 282.998 23.8197 cv
282.778 24.1397 282.468 24.2997 282.063 24.2997 cv
281.653 24.2997 281.338 24.1397 281.123 23.8197 cv
280.908 23.4997 280.803 23.0297 280.803 22.4147 cv
280.803 21.8047 280.908 21.3347 281.123 21.0097 cv
281.338 20.6897 281.653 20.5247 282.063 20.5247 cv
f
284.188 23.6147 mo
284.703 23.6147 li
284.703 24.2347 li
284.188 24.2347 li
284.188 23.6147 li
f
285.793 24.1597 mo
285.793 23.7097 li
285.913 23.7697 286.038 23.8147 286.168 23.8447 cv
286.293 23.8747 286.418 23.8897 286.543 23.8897 cv
286.863 23.8897 287.113 23.7847 287.283 23.5647 cv
287.453 23.3447 287.553 23.0147 287.583 22.5647 cv
287.483 22.7047 287.363 22.8147 287.223 22.8897 cv
287.078 22.9647 286.918 22.9997 286.743 22.9997 cv
286.373 22.9997 286.083 22.8897 285.873 22.6697 cv
285.663 22.4497 285.558 22.1497 285.558 21.7647 cv
285.558 21.3947 285.668 21.0947 285.888 20.8647 cv
286.108 20.6397 286.403 20.5247 286.773 20.5247 cv
287.193 20.5247 287.518 20.6897 287.738 21.0097 cv
287.958 21.3347 288.073 21.8047 288.073 22.4147 cv
288.073 22.9947 287.933 23.4497 287.663 23.7897 cv
287.388 24.1297 287.023 24.2997 286.563 24.2997 cv
286.438 24.2997 286.313 24.2847 286.188 24.2647 cv
286.058 24.2447 285.928 24.2097 285.793 24.1597 cv
286.773 22.6147 mo
286.993 22.6147 287.168 22.5397 287.298 22.3897 cv
287.428 22.2397 287.493 22.0297 287.493 21.7647 cv
287.493 21.5047 287.428 21.2947 287.298 21.1447 cv
287.168 20.9947 286.993 20.9147 286.773 20.9147 cv
286.553 20.9147 286.378 20.9947 286.248 21.1447 cv
286.118 21.2947 286.053 21.5047 286.053 21.7647 cv
286.053 22.0297 286.118 22.2397 286.248 22.3897 cv
286.378 22.5397 286.553 22.6147 286.773 22.6147 cv
f
290.013 22.5047 mo
289.778 22.5047 289.593 22.5697 289.458 22.6947 cv
289.323 22.8197 289.258 22.9897 289.258 23.2097 cv
289.258 23.4297 289.323 23.6047 289.458 23.7297 cv
289.593 23.8547 289.778 23.9147 290.013 23.9147 cv
290.243 23.9147 290.428 23.8547 290.563 23.7247 cv
290.698 23.5997 290.768 23.4297 290.768 23.2097 cv
290.768 22.9897 290.698 22.8197 290.568 22.6947 cv
290.433 22.5697 290.248 22.5047 290.013 22.5047 cv
289.518 22.2947 mo
289.308 22.2447 289.143 22.1447 289.023 21.9997 cv
288.903 21.8547 288.848 21.6797 288.848 21.4697 cv
288.848 21.1797 288.948 20.9497 289.158 20.7797 cv
289.363 20.6097 289.648 20.5247 290.013 20.5247 cv
290.373 20.5247 290.658 20.6097 290.868 20.7797 cv
291.073 20.9497 291.178 21.1797 291.178 21.4697 cv
291.178 21.6797 291.118 21.8547 290.998 21.9997 cv
290.878 22.1447 290.718 22.2447 290.508 22.2947 cv
290.743 22.3497 290.928 22.4597 291.063 22.6197 cv
291.193 22.7797 291.263 22.9797 291.263 23.2097 cv
291.263 23.5647 291.153 23.8347 290.938 24.0197 cv
290.718 24.2097 290.413 24.2997 290.013 24.2997 cv
289.608 24.2997 289.298 24.2097 289.083 24.0197 cv
288.868 23.8347 288.763 23.5647 288.763 23.2097 cv
288.763 22.9797 288.828 22.7797 288.963 22.6197 cv
289.093 22.4597 289.278 22.3497 289.518 22.2947 cv
289.338 21.5147 mo
289.338 21.7047 289.393 21.8547 289.513 21.9597 cv
289.633 22.0647 289.798 22.1147 290.013 22.1147 cv
290.223 22.1147 290.388 22.0647 290.508 21.9597 cv
290.628 21.8547 290.688 21.7047 290.688 21.5147 cv
290.688 21.3247 290.628 21.1797 290.508 21.0747 cv
290.388 20.9697 290.223 20.9147 290.013 20.9147 cv
289.798 20.9147 289.633 20.9697 289.513 21.0747 cv
289.393 21.1797 289.338 21.3247 289.338 21.5147 cv
f
298.629 9.1629 mo
295.129 9.1629 li
f
298.629 9.1629 mo
295.129 9.1629 li
@
281.093 10.6463 mo
281.898 10.6463 li
281.898 7.86634 li
281.023 8.04134 li
281.023 7.59134 li
281.893 7.41634 li
282.388 7.41634 li
282.388 10.6463 li
283.193 10.6463 li
283.193 11.0613 li
281.093 11.0613 li
281.093 10.6463 li
f
284.188 10.4413 mo
284.703 10.4413 li
284.703 11.0613 li
284.188 11.0613 li
284.188 10.4413 li
f
286.833 7.74134 mo
286.578 7.74134 286.388 7.86634 286.258 8.11634 cv
286.128 8.36634 286.068 8.74134 286.068 9.24134 cv
286.068 9.74134 286.128 10.1163 286.258 10.3663 cv
286.388 10.6163 286.578 10.7413 286.833 10.7413 cv
287.088 10.7413 287.278 10.6163 287.408 10.3663 cv
287.533 10.1163 287.598 9.74134 287.598 9.24134 cv
287.598 8.74134 287.533 8.36634 287.408 8.11634 cv
287.278 7.86634 287.088 7.74134 286.833 7.74134 cv
286.833 7.35134 mo
287.238 7.35134 287.548 7.51634 287.768 7.83634 cv
287.983 8.16134 288.093 8.63134 288.093 9.24134 cv
288.093 9.85634 287.983 10.3263 287.768 10.6463 cv
287.548 10.9663 287.238 11.1263 286.833 11.1263 cv
286.423 11.1263 286.108 10.9663 285.893 10.6463 cv
285.678 10.3263 285.573 9.85634 285.573 9.24134 cv
285.573 8.63134 285.678 8.16134 285.893 7.83634 cv
286.108 7.51634 286.423 7.35134 286.833 7.35134 cv
f
290.013 7.74134 mo
289.758 7.74134 289.568 7.86634 289.438 8.11634 cv
289.308 8.36634 289.248 8.74134 289.248 9.24134 cv
289.248 9.74134 289.308 10.1163 289.438 10.3663 cv
289.568 10.6163 289.758 10.7413 290.013 10.7413 cv
290.268 10.7413 290.458 10.6163 290.588 10.3663 cv
290.713 10.1163 290.778 9.74134 290.778 9.24134 cv
290.778 8.74134 290.713 8.36634 290.588 8.11634 cv
290.458 7.86634 290.268 7.74134 290.013 7.74134 cv
290.013 7.35134 mo
290.418 7.35134 290.728 7.51634 290.948 7.83634 cv
291.163 8.16134 291.273 8.63134 291.273 9.24134 cv
291.273 9.85634 291.163 10.3263 290.948 10.6463 cv
290.728 10.9663 290.418 11.1263 290.013 11.1263 cv
289.603 11.1263 289.288 10.9663 289.073 10.6463 cv
288.858 10.3263 288.753 9.85634 288.753 9.24134 cv
288.753 8.63134 288.858 8.16134 289.073 7.83634 cv
289.288 7.51634 289.603 7.35134 290.013 7.35134 cv
f
1 lw
2 lc
301.825 50.8698 mo
323.13 35.2989 li
344.435 36.9719 li
365.74 9.61078 li
1 /0 /CSD get_res sepcs
.337255 sep
@
gsave
299.825 52.8698 mo
303.825 52.8698 li
303.825 48.8698 li
299.825 48.8698 li
299.825 52.8698 li
clp
301.825 49.3698 mo
300.325 52.3698 li
303.325 52.3698 li
cp
f
0 lc
0 lj
301.825 49.3698 mo
300.325 52.3698 li
303.325 52.3698 li
cp
@
grestore
gsave
321.13 37.2989 mo
325.13 37.2989 li
325.13 33.2989 li
321.13 33.2989 li
321.13 37.2989 li
clp
323.13 33.7989 mo
321.63 36.7989 li
324.63 36.7989 li
cp
f
0 lc
0 lj
323.13 33.7989 mo
321.63 36.7989 li
324.63 36.7989 li
cp
@
grestore
gsave
342.435 38.9719 mo
346.435 38.9719 li
346.435 34.9719 li
342.435 34.9719 li
342.435 38.9719 li
clp
344.435 35.4719 mo
342.935 38.4719 li
345.935 38.4719 li
cp
f
0 lc
0 lj
344.435 35.4719 mo
342.935 38.4719 li
345.935 38.4719 li
cp
@
grestore
gsave
363.74 11.6107 mo
367.74 11.6107 li
367.74 7.61076 li
363.74 7.61076 li
363.74 11.6107 li
clp
365.74 8.11078 mo
364.24 11.1108 li
367.24 11.1108 li
cp
f
0 lc
0 lj
365.74 8.11078 mo
364.24 11.1108 li
367.24 11.1108 li
cp
@
grestore
301.825 28.2643 mo
323.13 22.4614 li
344.435 26.0314 li
365.74 9.84134 li
0 .760891 .735378 0 cmyk
@
gsave
299.825 30.2643 mo
303.825 30.2643 li
303.825 26.2644 li
299.825 26.2644 li
299.825 30.2643 li
clp
301.825 29.7643 mo
302.223 29.7643 302.604 29.6063 302.886 29.325 cv
303.167 29.0437 303.325 28.6621 303.325 28.2643 cv
303.325 27.8665 303.167 27.4849 302.886 27.2037 cv
302.604 26.9224 302.223 26.7643 301.825 26.7643 cv
301.427 26.7643 301.046 26.9224 300.764 27.2037 cv
300.483 27.4849 300.325 27.8665 300.325 28.2643 cv
300.325 28.6621 300.483 29.0437 300.764 29.325 cv
301.046 29.6063 301.427 29.7643 301.825 29.7643 cv
cp
f
0 lc
301.825 29.7643 mo
302.223 29.7643 302.604 29.6063 302.886 29.325 cv
303.167 29.0437 303.325 28.6621 303.325 28.2643 cv
303.325 27.8665 303.167 27.4849 302.886 27.2037 cv
302.604 26.9224 302.223 26.7643 301.825 26.7643 cv
301.427 26.7643 301.046 26.9224 300.764 27.2037 cv
300.483 27.4849 300.325 27.8665 300.325 28.2643 cv
300.325 28.6621 300.483 29.0437 300.764 29.325 cv
301.046 29.6063 301.427 29.7643 301.825 29.7643 cv
cp
@
grestore
gsave
321.13 24.4615 mo
325.13 24.4615 li
325.13 20.4615 li
321.13 20.4615 li
321.13 24.4615 li
clp
323.13 23.9614 mo
323.528 23.9614 323.91 23.8034 324.191 23.5221 cv
324.472 23.2408 324.63 22.8592 324.63 22.4614 cv
324.63 22.0636 324.472 21.6821 324.191 21.4008 cv
323.91 21.1195 323.528 20.9614 323.13 20.9614 cv
322.732 20.9614 322.351 21.1195 322.07 21.4008 cv
321.788 21.6821 321.63 22.0636 321.63 22.4614 cv
321.63 22.8592 321.788 23.2408 322.07 23.5221 cv
322.351 23.8034 322.732 23.9614 323.13 23.9614 cv
cp
f
0 lc
323.13 23.9614 mo
323.528 23.9614 323.91 23.8034 324.191 23.5221 cv
324.472 23.2408 324.63 22.8592 324.63 22.4614 cv
324.63 22.0636 324.472 21.6821 324.191 21.4008 cv
323.91 21.1195 323.528 20.9614 323.13 20.9614 cv
322.732 20.9614 322.351 21.1195 322.07 21.4008 cv
321.788 21.6821 321.63 22.0636 321.63 22.4614 cv
321.63 22.8592 321.788 23.2408 322.07 23.5221 cv
322.351 23.8034 322.732 23.9614 323.13 23.9614 cv
cp
@
grestore
gsave
342.435 28.0314 mo
346.435 28.0314 li
346.435 24.0314 li
342.435 24.0314 li
342.435 28.0314 li
clp
344.435 27.5314 mo
344.833 27.5314 345.215 27.3734 345.496 27.0921 cv
345.777 26.8108 345.935 26.4292 345.935 26.0314 cv
345.935 25.6336 345.777 25.252 345.496 24.9707 cv
345.215 24.6895 344.833 24.5314 344.435 24.5314 cv
344.037 24.5314 343.656 24.6895 343.375 24.9707 cv
343.093 25.252 342.935 25.6336 342.935 26.0314 cv
342.935 26.4292 343.093 26.8108 343.375 27.0921 cv
343.656 27.3734 344.037 27.5314 344.435 27.5314 cv
cp
f
0 lc
344.435 27.5314 mo
344.833 27.5314 345.215 27.3734 345.496 27.0921 cv
345.777 26.8108 345.935 26.4292 345.935 26.0314 cv
345.935 25.6336 345.777 25.252 345.496 24.9707 cv
345.215 24.6895 344.833 24.5314 344.435 24.5314 cv
344.037 24.5314 343.656 24.6895 343.375 24.9707 cv
343.093 25.252 342.935 25.6336 342.935 26.0314 cv
342.935 26.4292 343.093 26.8108 343.375 27.0921 cv
343.656 27.3734 344.037 27.5314 344.435 27.5314 cv
cp
@
grestore
gsave
363.74 11.8413 mo
367.74 11.8413 li
367.74 7.84136 li
363.74 7.84136 li
363.74 11.8413 li
clp
365.74 11.3413 mo
366.138 11.3413 366.52 11.1833 366.801 10.902 cv
367.082 10.6207 367.24 10.2391 367.24 9.84131 cv
367.24 9.4435 367.082 9.06194 366.801 8.78065 cv
366.52 8.49936 366.138 8.34131 365.74 8.34131 cv
365.342 8.34131 364.961 8.49936 364.68 8.78065 cv
364.398 9.06194 364.24 9.4435 364.24 9.84131 cv
364.24 10.2391 364.398 10.6207 364.68 10.902 cv
364.961 11.1833 365.342 11.3413 365.74 11.3413 cv
cp
f
0 lc
365.74 11.3413 mo
366.138 11.3413 366.52 11.1833 366.801 10.902 cv
367.082 10.6207 367.24 10.2391 367.24 9.84131 cv
367.24 9.4435 367.082 9.06194 366.801 8.78065 cv
366.52 8.49936 366.138 8.34131 365.74 8.34131 cv
365.342 8.34131 364.961 8.49936 364.68 8.78065 cv
364.398 9.06194 364.24 9.4435 364.24 9.84131 cv
364.24 10.2391 364.398 10.6207 364.68 10.902 cv
364.961 11.1833 365.342 11.3413 365.74 11.3413 cv
cp
@
grestore
301.825 40.4359 mo
323.13 36.8277 li
344.435 28.7385 li
365.74 25.8674 li
.468757 .0952163 .538781 0 cmyk
@
gsave
299.899 42.1494 mo
303.752 42.1494 li
303.752 38.4359 li
299.899 38.4359 li
299.899 42.1494 li
clp
301.825 38.9359 mo
301.488 39.9723 li
300.399 39.9723 li
301.28 40.6129 li
300.943 41.6494 li
301.825 41.0088 li
302.707 41.6494 li
302.37 40.6129 li
303.252 39.9723 li
302.162 39.9723 li
cp
f
0 lc
2 lj
301.825 38.9359 mo
301.488 39.9723 li
300.399 39.9723 li
301.28 40.6129 li
300.943 41.6494 li
301.825 41.0088 li
302.707 41.6494 li
302.37 40.6129 li
303.252 39.9723 li
302.162 39.9723 li
cp
@
grestore
gsave
321.204 38.5412 mo
325.057 38.5412 li
325.057 34.8276 li
321.204 34.8276 li
321.204 38.5412 li
clp
323.13 35.3277 mo
322.793 36.3641 li
321.704 36.3641 li
322.585 37.0047 li
322.249 38.0412 li
323.13 37.4006 li
324.012 38.0412 li
323.675 37.0047 li
324.557 36.3641 li
323.467 36.3641 li
cp
f
0 lc
2 lj
323.13 35.3277 mo
322.793 36.3641 li
321.704 36.3641 li
322.585 37.0047 li
322.249 38.0412 li
323.13 37.4006 li
324.012 38.0412 li
323.675 37.0047 li
324.557 36.3641 li
323.467 36.3641 li
cp
@
grestore
gsave
342.509 30.452 mo
346.362 30.452 li
346.362 26.7386 li
342.509 26.7386 li
342.509 30.452 li
clp
344.435 27.2386 mo
344.098 28.275 li
343.009 28.275 li
343.89 28.9156 li
343.554 29.9521 li
344.435 29.3115 li
345.317 29.9521 li
344.98 28.9156 li
345.862 28.275 li
344.772 28.275 li
cp
f
0 lc
2 lj
344.435 27.2386 mo
344.098 28.275 li
343.009 28.275 li
343.89 28.9156 li
343.554 29.9521 li
344.435 29.3115 li
345.317 29.9521 li
344.98 28.9156 li
345.862 28.275 li
344.772 28.275 li
cp
@
grestore
gsave
363.814 27.5809 mo
367.667 27.5809 li
367.667 23.8675 li
363.814 23.8675 li
363.814 27.5809 li
clp
365.74 24.3674 mo
365.404 25.4039 li
364.314 25.4039 li
365.195 26.0445 li
364.859 27.081 li
365.74 26.4404 li
366.622 27.081 li
366.285 26.0445 li
367.167 25.4039 li
366.077 25.4039 li
cp
f
0 lc
2 lj
365.74 24.3674 mo
365.404 25.4039 li
364.314 25.4039 li
365.195 26.0445 li
364.859 27.081 li
365.74 26.4404 li
366.622 27.081 li
366.285 26.0445 li
367.167 25.4039 li
366.077 25.4039 li
cp
@
grestore
301.825 37.4514 mo
323.13 34.878 li
344.435 27.6919 li
365.74 25.2766 li
.749203 .420264 .103029 .000457771 cmyk
@
gsave
299.825 39.4515 mo
303.825 39.4515 li
303.825 35.4515 li
299.825 35.4515 li
299.825 39.4515 li
clp
300.325 38.9514 mo
303.325 38.9514 li
303.325 35.9514 li
300.325 35.9514 li
cp
f
0 lc
0 lj
300.325 38.9514 mo
303.325 38.9514 li
303.325 35.9514 li
300.325 35.9514 li
cp
@
grestore
gsave
321.13 36.878 mo
325.13 36.878 li
325.13 32.878 li
321.13 32.878 li
321.13 36.878 li
clp
321.63 36.378 mo
324.63 36.378 li
324.63 33.378 li
321.63 33.378 li
cp
f
0 lc
0 lj
321.63 36.378 mo
324.63 36.378 li
324.63 33.378 li
321.63 33.378 li
cp
@
grestore
gsave
342.435 29.6919 mo
346.435 29.6919 li
346.435 25.692 li
342.435 25.692 li
342.435 29.6919 li
clp
342.935 29.1919 mo
345.935 29.1919 li
345.935 26.1919 li
342.935 26.1919 li
cp
f
0 lc
0 lj
342.935 29.1919 mo
345.935 29.1919 li
345.935 26.1919 li
342.935 26.1919 li
cp
@
grestore
gsave
363.74 27.2766 mo
367.74 27.2766 li
367.74 23.2766 li
363.74 23.2766 li
363.74 27.2766 li
clp
364.24 26.7766 mo
367.24 26.7766 li
367.24 23.7766 li
364.24 23.7766 li
cp
f
0 lc
0 lj
364.24 26.7766 mo
367.24 26.7766 li
367.24 23.7766 li
364.24 23.7766 li
cp
@
grestore
.8 lw
0 lj
298.629 61.8564 mo
298.629 7.54785 li
1 /0 /CSD get_res sepcs
1 sep
@
368.936 61.8564 mo
368.936 7.54785 li
@
298.629 61.8564 mo
368.936 61.8564 li
@
298.629 7.54785 mo
368.936 7.54785 li
@
436.442 53.4713 mo
373.251 53.4713 li
373.062 53.4695 373.014 53.4272 373.005 53.4178 cv
372.996 53.4085 372.953 53.3611 372.951 53.1713 cv
372.951 30.0712 li
372.953 29.8814 372.996 29.834 373.005 29.8248 cv
373.014 29.8154 373.062 29.773 373.251 29.7713 cv
436.442 29.7713 li
436.632 29.773 436.679 29.8154 436.688 29.8248 cv
436.698 29.834 436.74 29.8814 436.742 30.0712 cv
436.742 53.1713 li
436.74 53.3611 436.698 53.4085 436.688 53.4178 cv
436.679 53.4272 436.632 53.4695 436.442 53.4713 cv
0 0 0 0 cmyk
f
436.452 54.4713 mo
436.448 54.4713 436.445 54.4713 436.442 54.4713 cv
373.251 54.4713 li
373.248 54.4713 373.245 54.4713 373.242 54.4713 cv
372.901 54.4714 372.553 54.3797 372.298 54.1248 cv
372.041 53.8673 371.95 53.5148 371.951 53.1713 cv
371.951 30.0712 li
371.95 29.7278 372.041 29.3752 372.298 29.1177 cv
372.553 28.8631 372.901 28.7713 373.241 28.7713 cv
373.245 28.7713 373.248 28.7713 373.251 28.7713 cv
436.442 28.7713 li
436.445 28.7713 436.449 28.7713 436.452 28.7713 cv
436.793 28.7713 437.141 28.8631 437.396 29.1177 cv
437.653 29.3752 437.744 29.7278 437.742 30.0712 cv
437.742 53.1713 li
437.744 53.5148 437.653 53.8673 437.396 54.1248 cv
437.141 54.3796 436.792 54.4713 436.452 54.4713 cv
373.251 53.4713 mo
436.442 53.4713 li
436.632 53.4695 436.679 53.4272 436.688 53.4178 cv
436.698 53.4085 436.74 53.3611 436.742 53.1713 cv
436.742 30.0712 li
436.74 29.8814 436.698 29.834 436.688 29.8248 cv
436.679 29.8154 436.632 29.773 436.442 29.7713 cv
373.251 29.7713 li
373.062 29.773 373.014 29.8154 373.005 29.8248 cv
372.996 29.834 372.953 29.8814 372.951 30.0712 cv
372.951 53.1713 li
372.953 53.3611 372.996 53.4085 373.005 53.4178 cv
373.014 53.4272 373.062 53.4695 373.251 53.4713 cv
373.251 53.4713 li
.15433 .116732 .12192 0 cmyk
f
1 lw
1 lj
374.051 32.5182 mo
382.051 32.5182 li
1 /0 /CSD get_res sepcs
.337255 sep
@
378.051 31.0182 mo
376.551 34.0182 li
379.551 34.0182 li
cp
f
0 lc
0 lj
378.051 31.0182 mo
376.551 34.0182 li
379.551 34.0182 li
cp
@
387.827 31.2262 mo
387.827 31.6422 li
387.691 31.5222 387.551 31.4302 387.399 31.3662 cv
387.247 31.3062 387.091 31.2742 386.923 31.2742 cv
386.587 31.2742 386.331 31.3782 386.155 31.5822 cv
385.979 31.7862 385.891 32.0782 385.891 32.4622 cv
385.891 32.8462 385.979 33.1422 386.155 33.3462 cv
386.331 33.5502 386.587 33.6502 386.923 33.6502 cv
387.091 33.6502 387.247 33.6222 387.399 33.5582 cv
387.551 33.4982 387.691 33.4062 387.827 33.2822 cv
387.827 33.6942 li
387.687 33.7902 387.539 33.8582 387.387 33.9022 cv
387.235 33.9462 387.071 33.9701 386.899 33.9701 cv
386.459 33.9701 386.111 33.8382 385.855 33.5702 cv
385.599 33.3022 385.475 32.9342 385.475 32.4622 cv
385.475 31.9942 385.599 31.6262 385.855 31.3542 cv
386.111 31.0862 386.459 30.9502 386.899 30.9502 cv
387.075 30.9502 387.239 30.9742 387.391 31.0182 cv
387.543 31.0662 387.691 31.1342 387.827 31.2262 cv
1 /0 /CSD get_res sepcs
1 sep
f
388.435 31.0022 mo
388.967 31.0022 li
390.259 33.4422 li
390.259 31.0022 li
390.643 31.0022 li
390.643 33.9182 li
390.111 33.9182 li
388.819 31.4782 li
388.819 33.9182 li
388.435 33.9182 li
388.435 31.0022 li
f
391.427 31.0022 mo
391.959 31.0022 li
393.251 33.4422 li
393.251 31.0022 li
393.635 31.0022 li
393.635 33.9182 li
393.103 33.9182 li
391.811 31.4782 li
391.811 33.9182 li
391.427 33.9182 li
391.427 31.0022 li
f
394.223 32.6622 mo
395.275 32.6622 li
395.275 32.9822 li
394.223 32.9822 li
394.223 32.6622 li
f
395.863 31.0022 mo
396.259 31.0022 li
396.259 33.5862 li
397.679 33.5862 li
397.679 33.9182 li
395.863 33.9182 li
395.863 31.0022 li
f
399.839 31.0982 mo
399.839 31.4822 li
399.687 31.4102 399.547 31.3582 399.415 31.3222 cv
399.279 31.2902 399.151 31.2702 399.031 31.2702 cv
398.815 31.2702 398.647 31.3142 398.531 31.3942 cv
398.415 31.4782 398.359 31.5982 398.359 31.7502 cv
398.359 31.8782 398.395 31.9782 398.475 32.0422 cv
398.551 32.1102 398.699 32.1622 398.915 32.2022 cv
399.155 32.2502 li
399.447 32.3062 399.663 32.4062 399.803 32.5462 cv
399.943 32.6902 400.015 32.8782 400.015 33.1142 cv
400.015 33.3982 399.919 33.6102 399.731 33.7542 cv
399.539 33.8982 399.263 33.9701 398.899 33.9701 cv
398.759 33.9701 398.611 33.9542 398.455 33.9262 cv
398.299 33.8982 398.139 33.8542 397.975 33.7902 cv
397.975 33.3822 li
398.135 33.4742 398.291 33.5422 398.443 33.5862 cv
398.595 33.6342 398.747 33.6542 398.899 33.6542 cv
399.123 33.6542 399.295 33.6102 399.419 33.5222 cv
399.539 33.4342 399.603 33.3102 399.603 33.1422 cv
399.603 32.9982 399.559 32.8862 399.471 32.8062 cv
399.383 32.7262 399.239 32.6662 399.039 32.6262 cv
398.799 32.5782 li
398.503 32.5222 398.291 32.4302 398.159 32.3022 cv
398.027 32.1782 397.963 32.0062 397.963 31.7822 cv
397.963 31.5262 398.051 31.3222 398.235 31.1742 cv
398.415 31.0262 398.667 30.9502 398.987 30.9502 cv
399.123 30.9502 399.259 30.9622 399.403 30.9862 cv
399.543 31.0102 399.687 31.0502 399.839 31.0982 cv
f
400.231 31.0022 mo
402.695 31.0022 li
402.695 31.3342 li
401.659 31.3342 li
401.659 33.9182 li
401.263 33.9182 li
401.263 31.3342 li
400.231 31.3342 li
400.231 31.0022 li
f
403.075 31.0022 mo
403.663 31.0022 li
404.407 32.9862 li
405.155 31.0022 li
405.743 31.0022 li
405.743 33.9182 li
405.359 33.9182 li
405.359 31.3582 li
404.607 33.3582 li
404.211 33.3582 li
403.459 31.3582 li
403.459 33.9182 li
403.075 33.9182 li
403.075 31.0022 li
f
2 lc
1 lj
374.051 38.3932 mo
382.051 38.3932 li
0 .760891 .735378 0 cmyk
@
378.051 39.8932 mo
378.449 39.8932 378.831 39.7351 379.112 39.4538 cv
379.393 39.1725 379.551 38.791 379.551 38.3932 cv
379.551 37.9953 379.393 37.6138 379.112 37.3325 cv
378.831 37.0512 378.449 36.8932 378.051 36.8932 cv
377.654 36.8932 377.272 37.0512 376.991 37.3325 cv
376.709 37.6138 376.551 37.9953 376.551 38.3932 cv
376.551 38.791 376.709 39.1725 376.991 39.4538 cv
377.272 39.7351 377.654 39.8932 378.051 39.8932 cv
cp
f
0 lc
378.051 39.8932 mo
378.449 39.8932 378.831 39.7351 379.112 39.4538 cv
379.393 39.1725 379.551 38.791 379.551 38.3932 cv
379.551 37.9953 379.393 37.6138 379.112 37.3325 cv
378.831 37.0512 378.449 36.8932 378.051 36.8932 cv
377.654 36.8932 377.272 37.0512 376.991 37.3325 cv
376.709 37.6138 376.551 37.9953 376.551 38.3932 cv
376.551 38.791 376.709 39.1725 376.991 39.4538 cv
377.272 39.7351 377.654 39.8932 378.051 39.8932 cv
cp
@
386.827 37.1452 mo
386.539 37.1452 386.311 37.2532 386.143 37.4652 cv
385.975 37.6812 385.891 37.9692 385.891 38.3372 cv
385.891 38.7052 385.975 38.9972 386.143 39.2092 cv
386.311 39.4252 386.539 39.5292 386.827 39.5292 cv
387.111 39.5292 387.339 39.4252 387.507 39.2092 cv
387.675 38.9972 387.759 38.7052 387.759 38.3372 cv
387.759 37.9692 387.675 37.6812 387.507 37.4652 cv
387.339 37.2532 387.111 37.1452 386.827 37.1452 cv
386.827 36.8252 mo
387.235 36.8252 387.559 36.9652 387.807 37.2372 cv
388.051 37.5092 388.175 37.8772 388.175 38.3372 cv
388.175 38.8012 388.051 39.1652 387.807 39.4372 cv
387.559 39.7092 387.235 39.8451 386.827 39.8451 cv
386.415 39.8451 386.087 39.7092 385.843 39.4372 cv
385.595 39.1652 385.475 38.8012 385.475 38.3372 cv
385.475 37.8772 385.595 37.5092 385.843 37.2372 cv
386.087 36.9652 386.415 36.8252 386.827 36.8252 cv
1 /0 /CSD get_res sepcs
1 sep
f
388.739 38.9292 mo
388.739 37.6052 li
389.099 37.6052 li
389.099 38.9172 li
389.099 39.1252 389.139 39.2772 389.219 39.3812 cv
389.299 39.4852 389.419 39.5372 389.583 39.5372 cv
389.775 39.5372 389.931 39.4771 390.043 39.3532 cv
390.155 39.2292 390.211 39.0612 390.211 38.8451 cv
390.211 37.6052 li
390.571 37.6052 li
390.571 39.7932 li
390.211 39.7932 li
390.211 39.4572 li
390.123 39.5932 390.019 39.6892 389.907 39.7532 cv
389.791 39.8132 389.659 39.8451 389.507 39.8451 cv
389.255 39.8451 389.063 39.7692 388.935 39.6132 cv
388.803 39.4612 388.739 39.2332 388.739 38.9292 cv
389.643 37.5532 mo
389.643 37.5532 li
f
392.579 37.9412 mo
392.447 37.8892 li
392.291 37.8732 li
392.087 37.8732 391.931 37.9412 391.823 38.0732 cv
391.711 38.2052 391.659 38.3932 391.659 38.6412 cv
391.659 39.7932 li
391.299 39.7932 li
391.299 37.6052 li
391.659 37.6052 li
391.659 37.9452 li
391.731 37.8132 391.831 37.7132 391.951 37.6492 cv
392.071 37.5852 392.219 37.5532 392.395 37.5532 cv
392.479 37.5572 li
392.579 37.5732 li
392.579 37.9412 li
f
395.931 38.0252 mo
396.019 37.8652 396.127 37.7492 396.251 37.6692 cv
396.375 37.5932 396.523 37.5532 396.695 37.5532 cv
396.919 37.5532 397.095 37.6332 397.219 37.7932 cv
397.343 37.9532 397.407 38.1812 397.407 38.4732 cv
397.407 39.7932 li
397.047 39.7932 li
397.047 38.4852 li
397.047 38.2772 397.007 38.1212 396.935 38.0172 cv
396.859 37.9172 396.747 37.8652 396.595 37.8652 cv
396.407 37.8652 396.259 37.9292 396.151 38.0532 cv
396.043 38.1772 395.991 38.3451 395.991 38.5572 cv
395.991 39.7932 li
395.631 39.7932 li
395.631 38.4852 li
395.631 38.2772 395.591 38.1212 395.519 38.0172 cv
395.443 37.9172 395.327 37.8652 395.175 37.8652 cv
394.991 37.8652 394.843 37.9292 394.735 38.0532 cv
394.627 38.1772 394.575 38.3451 394.575 38.5572 cv
394.575 39.7932 li
394.215 39.7932 li
394.215 37.6052 li
394.575 37.6052 li
394.575 37.9452 li
394.655 37.8132 394.755 37.7132 394.871 37.6492 cv
394.983 37.5852 395.119 37.5532 395.279 37.5532 cv
395.439 37.5532 395.571 37.5932 395.683 37.6732 cv
395.795 37.7532 395.875 37.8732 395.931 38.0252 cv
f
398.971 37.8572 mo
398.779 37.8572 398.627 37.9332 398.515 38.0852 cv
398.403 38.2372 398.347 38.4412 398.347 38.7012 cv
398.347 38.9652 398.399 39.1692 398.511 39.3212 cv
398.623 39.4732 398.775 39.5452 398.971 39.5452 cv
399.163 39.5452 399.315 39.4732 399.427 39.3212 cv
399.539 39.1692 399.595 38.9652 399.595 38.7012 cv
399.595 38.4452 399.539 38.2372 399.427 38.0852 cv
399.315 37.9332 399.163 37.8572 398.971 37.8572 cv
398.971 37.5532 mo
399.283 37.5532 399.527 37.6572 399.707 37.8572 cv
399.883 38.0612 399.975 38.3412 399.975 38.7012 cv
399.975 39.0612 399.883 39.3412 399.707 39.5412 cv
399.527 39.7452 399.283 39.8451 398.971 39.8451 cv
398.655 39.8451 398.407 39.7452 398.231 39.5412 cv
398.055 39.3412 397.967 39.0612 397.967 38.7012 cv
397.967 38.3412 398.055 38.0612 398.231 37.8572 cv
398.407 37.6572 398.655 37.5532 398.971 37.5532 cv
f
402.011 37.9372 mo
402.011 36.7532 li
402.371 36.7532 li
402.371 39.7932 li
402.011 39.7932 li
402.011 39.4652 li
401.935 39.5972 401.839 39.6932 401.723 39.7532 cv
401.607 39.8132 401.471 39.8451 401.311 39.8451 cv
401.047 39.8451 400.831 39.7412 400.663 39.5332 cv
400.495 39.3252 400.415 39.0452 400.415 38.7012 cv
400.415 38.3572 400.495 38.0812 400.663 37.8692 cv
400.831 37.6612 401.047 37.5532 401.311 37.5532 cv
401.471 37.5532 401.607 37.5852 401.723 37.6492 cv
401.839 37.7132 401.935 37.8092 402.011 37.9372 cv
400.787 38.7012 mo
400.787 38.9652 400.839 39.1732 400.947 39.3252 cv
401.055 39.4771 401.207 39.5492 401.399 39.5492 cv
401.587 39.5492 401.735 39.4771 401.847 39.3252 cv
401.955 39.1732 402.011 38.9652 402.011 38.7012 cv
402.011 38.4372 401.955 38.2332 401.847 38.0812 cv
401.735 37.9292 401.587 37.8532 401.399 37.8532 cv
401.207 37.8532 401.055 37.9292 400.947 38.0812 cv
400.839 38.2332 400.787 38.4372 400.787 38.7012 cv
f
404.983 38.6092 mo
404.983 38.7852 li
403.331 38.7852 li
403.347 39.0332 403.419 39.2252 403.555 39.3532 cv
403.687 39.4812 403.871 39.5452 404.111 39.5452 cv
404.247 39.5452 404.383 39.5292 404.511 39.4972 cv
404.639 39.4652 404.771 39.4132 404.899 39.3412 cv
404.899 39.6812 li
404.771 39.7372 404.639 39.7812 404.503 39.8052 cv
404.367 39.8292 404.227 39.8451 404.091 39.8451 cv
403.739 39.8451 403.463 39.7452 403.259 39.5452 cv
403.055 39.3451 402.955 39.0692 402.955 38.7212 cv
402.955 38.3652 403.051 38.0812 403.243 37.8692 cv
403.435 37.6612 403.699 37.5532 404.027 37.5532 cv
404.323 37.5532 404.555 37.6492 404.727 37.8372 cv
404.895 38.0292 404.983 38.2852 404.983 38.6092 cv
404.623 38.5051 mo
404.619 38.3092 404.563 38.1532 404.459 38.0332 cv
404.351 37.9172 404.207 37.8572 404.031 37.8572 cv
403.831 37.8572 403.671 37.9172 403.551 38.0292 cv
403.431 38.1412 403.359 38.3012 403.343 38.5051 cv
404.623 38.5051 li
f
405.571 36.7532 mo
405.931 36.7532 li
405.931 39.7932 li
405.571 39.7932 li
405.571 36.7532 li
f
2 lc
374.051 44.2682 mo
382.051 44.2682 li
.468757 .0952163 .538781 0 cmyk
@
378.051 42.7682 mo
377.715 43.8046 li
376.625 43.8046 li
377.507 44.4452 li
377.17 45.4817 li
378.051 44.8411 li
378.933 45.4817 li
378.596 44.4452 li
379.478 43.8046 li
378.388 43.8046 li
cp
f
0 lc
2 lj
378.051 42.7682 mo
377.715 43.8046 li
376.625 43.8046 li
377.507 44.4452 li
377.17 45.4817 li
378.051 44.8411 li
378.933 45.4817 li
378.596 44.4452 li
379.478 43.8046 li
378.388 43.8046 li
cp
@
385.643 42.7522 mo
386.231 42.7522 li
386.975 44.7362 li
387.723 42.7522 li
388.311 42.7522 li
388.311 45.6682 li
387.927 45.6682 li
387.927 43.1082 li
387.175 45.1082 li
386.779 45.1082 li
386.027 43.1082 li
386.027 45.6682 li
385.643 45.6682 li
385.643 42.7522 li
1 /0 /CSD get_res sepcs
1 sep
f
389.043 44.8042 mo
389.043 43.4802 li
389.403 43.4802 li
389.403 44.7922 li
389.403 45.0002 389.443 45.1522 389.523 45.2562 cv
389.603 45.3602 389.723 45.4122 389.887 45.4122 cv
390.079 45.4122 390.235 45.3521 390.347 45.2282 cv
390.459 45.1042 390.515 44.9362 390.515 44.7201 cv
390.515 43.4802 li
390.875 43.4802 li
390.875 45.6682 li
390.515 45.6682 li
390.515 45.3322 li
390.427 45.4682 390.323 45.5642 390.211 45.6282 cv
390.095 45.6882 389.963 45.7201 389.811 45.7201 cv
389.559 45.7201 389.367 45.6442 389.239 45.4882 cv
389.107 45.3362 389.043 45.1082 389.043 44.8042 cv
389.947 43.4282 mo
389.947 43.4282 li
f
391.615 42.6282 mo
391.975 42.6282 li
391.975 45.6682 li
391.615 45.6682 li
391.615 42.6282 li
f
393.083 42.8602 mo
393.083 43.4802 li
393.823 43.4802 li
393.823 43.7602 li
393.083 43.7602 li
393.083 44.9482 li
393.083 45.1282 393.107 45.2442 393.155 45.2922 cv
393.203 45.3442 393.303 45.3682 393.455 45.3682 cv
393.823 45.3682 li
393.823 45.6682 li
393.455 45.6682 li
393.175 45.6682 392.983 45.6162 392.879 45.5122 cv
392.775 45.4082 392.723 45.2201 392.723 44.9482 cv
392.723 43.7602 li
392.459 43.7602 li
392.459 43.4802 li
392.723 43.4802 li
392.723 42.8602 li
393.083 42.8602 li
f
394.295 43.4802 mo
394.655 43.4802 li
394.655 45.6682 li
394.295 45.6682 li
394.295 43.4802 li
394.295 42.6282 mo
394.655 42.6282 li
394.655 43.0842 li
394.295 43.0842 li
394.295 42.6282 li
f
395.227 44.4122 mo
396.279 44.4122 li
396.279 44.7322 li
395.227 44.7322 li
395.227 44.4122 li
f
396.851 42.6282 mo
397.211 42.6282 li
397.211 45.6682 li
396.851 45.6682 li
396.851 42.6282 li
f
399.835 44.4842 mo
399.835 44.6602 li
398.183 44.6602 li
398.199 44.9082 398.271 45.1002 398.407 45.2282 cv
398.539 45.3562 398.723 45.4202 398.963 45.4202 cv
399.099 45.4202 399.235 45.4042 399.363 45.3722 cv
399.491 45.3402 399.623 45.2882 399.751 45.2162 cv
399.751 45.5562 li
399.623 45.6122 399.491 45.6562 399.355 45.6802 cv
399.219 45.7042 399.079 45.7201 398.943 45.7201 cv
398.591 45.7201 398.315 45.6202 398.111 45.4202 cv
397.907 45.2201 397.807 44.9442 397.807 44.5962 cv
397.807 44.2402 397.903 43.9562 398.095 43.7442 cv
398.287 43.5362 398.551 43.4282 398.879 43.4282 cv
399.175 43.4282 399.407 43.5242 399.579 43.7122 cv
399.747 43.9042 399.835 44.1602 399.835 44.4842 cv
399.475 44.3801 mo
399.471 44.1842 399.415 44.0282 399.311 43.9082 cv
399.203 43.7922 399.059 43.7322 398.883 43.7322 cv
398.683 43.7322 398.523 43.7922 398.403 43.9042 cv
398.283 44.0162 398.211 44.1762 398.195 44.3801 cv
399.475 44.3801 li
f
400.167 43.4802 mo
400.547 43.4802 li
401.231 45.3162 li
401.915 43.4802 li
402.295 43.4802 li
401.475 45.6682 li
400.987 45.6682 li
400.167 43.4802 li
f
404.663 44.4842 mo
404.663 44.6602 li
403.011 44.6602 li
403.027 44.9082 403.099 45.1002 403.235 45.2282 cv
403.367 45.3562 403.551 45.4202 403.791 45.4202 cv
403.927 45.4202 404.063 45.4042 404.191 45.3722 cv
404.319 45.3402 404.451 45.2882 404.579 45.2162 cv
404.579 45.5562 li
404.451 45.6122 404.319 45.6562 404.183 45.6802 cv
404.047 45.7042 403.907 45.7201 403.771 45.7201 cv
403.419 45.7201 403.143 45.6202 402.939 45.4202 cv
402.735 45.2201 402.635 44.9442 402.635 44.5962 cv
402.635 44.2402 402.731 43.9562 402.923 43.7442 cv
403.115 43.5362 403.379 43.4282 403.707 43.4282 cv
404.003 43.4282 404.235 43.5242 404.407 43.7122 cv
404.575 43.9042 404.663 44.1602 404.663 44.4842 cv
404.303 44.3801 mo
404.299 44.1842 404.243 44.0282 404.139 43.9082 cv
404.031 43.7922 403.887 43.7322 403.711 43.7322 cv
403.511 43.7322 403.351 43.7922 403.231 43.9042 cv
403.111 44.0162 403.039 44.1762 403.023 44.3801 cv
404.303 44.3801 li
f
405.251 42.6282 mo
405.611 42.6282 li
405.611 45.6682 li
405.251 45.6682 li
405.251 42.6282 li
f
408.903 43.8162 mo
408.771 43.7642 li
408.615 43.7482 li
408.411 43.7482 408.255 43.8162 408.147 43.9482 cv
408.035 44.0802 407.983 44.2682 407.983 44.5162 cv
407.983 45.6682 li
407.623 45.6682 li
407.623 43.4802 li
407.983 43.4802 li
407.983 43.8202 li
408.055 43.6882 408.155 43.5882 408.275 43.5242 cv
408.395 43.4602 408.543 43.4282 408.719 43.4282 cv
408.803 43.4322 li
408.903 43.4482 li
408.903 43.8162 li
f
410.275 44.5682 mo
409.983 44.5682 409.783 44.6042 409.671 44.6682 cv
409.559 44.7362 409.503 44.8482 409.503 45.0082 cv
409.503 45.1362 409.543 45.2402 409.627 45.3122 cv
409.711 45.3882 409.827 45.4242 409.971 45.4242 cv
410.171 45.4242 410.331 45.3562 410.451 45.2122 cv
410.571 45.0722 410.631 44.8842 410.631 44.6482 cv
410.631 44.5682 li
410.275 44.5682 li
410.991 44.4202 mo
410.991 45.6682 li
410.631 45.6682 li
410.631 45.3362 li
410.547 45.4722 410.443 45.5682 410.323 45.6282 cv
410.203 45.6882 410.051 45.7201 409.875 45.7201 cv
409.651 45.7201 409.471 45.6602 409.339 45.5362 cv
409.207 45.4122 409.143 45.2442 409.143 45.0322 cv
409.143 44.7882 409.223 44.6042 409.391 44.4762 cv
409.555 44.3521 409.799 44.2882 410.127 44.2882 cv
410.631 44.2882 li
410.631 44.2522 li
410.631 44.0882 410.575 43.9602 410.467 43.8682 cv
410.359 43.7802 410.207 43.7322 410.011 43.7322 cv
409.883 43.7322 409.763 43.7482 409.643 43.7802 cv
409.523 43.8122 409.411 43.8562 409.303 43.9122 cv
409.303 43.5802 li
409.431 43.5322 409.559 43.4922 409.683 43.4682 cv
409.807 43.4442 409.927 43.4282 410.047 43.4282 cv
410.363 43.4282 410.599 43.5122 410.755 43.6762 cv
410.911 43.8402 410.991 44.0882 410.991 44.4202 cv
f
413.551 44.3482 mo
413.551 45.6682 li
413.191 45.6682 li
413.191 44.3602 li
413.191 44.1522 413.147 44.0002 413.067 43.8962 cv
412.987 43.7922 412.867 43.7402 412.707 43.7402 cv
412.511 43.7402 412.359 43.8042 412.247 43.9282 cv
412.135 44.0522 412.079 44.2201 412.079 44.4322 cv
412.079 45.6682 li
411.719 45.6682 li
411.719 43.4802 li
412.079 43.4802 li
412.079 43.8202 li
412.163 43.6922 412.263 43.5922 412.383 43.5282 cv
412.499 43.4642 412.635 43.4282 412.787 43.4282 cv
413.035 43.4282 413.227 43.5082 413.355 43.6642 cv
413.483 43.8202 413.551 44.0482 413.551 44.3482 cv
f
415.707 43.8122 mo
415.707 42.6282 li
416.067 42.6282 li
416.067 45.6682 li
415.707 45.6682 li
415.707 45.3402 li
415.631 45.4722 415.535 45.5682 415.419 45.6282 cv
415.303 45.6882 415.167 45.7201 415.007 45.7201 cv
414.743 45.7201 414.527 45.6162 414.359 45.4082 cv
414.191 45.2002 414.111 44.9202 414.111 44.5762 cv
414.111 44.2322 414.191 43.9562 414.359 43.7442 cv
414.527 43.5362 414.743 43.4282 415.007 43.4282 cv
415.167 43.4282 415.303 43.4602 415.419 43.5242 cv
415.535 43.5882 415.631 43.6842 415.707 43.8122 cv
414.483 44.5762 mo
414.483 44.8402 414.535 45.0482 414.643 45.2002 cv
414.751 45.3521 414.903 45.4242 415.095 45.4242 cv
415.283 45.4242 415.431 45.3521 415.543 45.2002 cv
415.651 45.0482 415.707 44.8402 415.707 44.5762 cv
415.707 44.3122 415.651 44.1082 415.543 43.9562 cv
415.431 43.8042 415.283 43.7282 415.095 43.7282 cv
414.903 43.7282 414.751 43.8042 414.643 43.9562 cv
414.535 44.1082 414.483 44.3122 414.483 44.5762 cv
f
417.655 43.7322 mo
417.463 43.7322 417.311 43.8082 417.199 43.9602 cv
417.087 44.1122 417.031 44.3162 417.031 44.5762 cv
417.031 44.8402 417.083 45.0442 417.195 45.1962 cv
417.307 45.3482 417.459 45.4202 417.655 45.4202 cv
417.847 45.4202 417.999 45.3482 418.111 45.1962 cv
418.223 45.0442 418.279 44.8402 418.279 44.5762 cv
418.279 44.3202 418.223 44.1122 418.111 43.9602 cv
417.999 43.8082 417.847 43.7322 417.655 43.7322 cv
417.655 43.4282 mo
417.967 43.4282 418.211 43.5322 418.391 43.7322 cv
418.567 43.9362 418.659 44.2162 418.659 44.5762 cv
418.659 44.9362 418.567 45.2162 418.391 45.4162 cv
418.211 45.6202 417.967 45.7201 417.655 45.7201 cv
417.339 45.7201 417.091 45.6202 416.915 45.4162 cv
416.739 45.2162 416.651 44.9362 416.651 44.5762 cv
416.651 44.2162 416.739 43.9362 416.915 43.7322 cv
417.091 43.5322 417.339 43.4282 417.655 43.4282 cv
f
420.959 43.9002 mo
421.047 43.7402 421.155 43.6242 421.279 43.5442 cv
421.403 43.4682 421.551 43.4282 421.723 43.4282 cv
421.947 43.4282 422.123 43.5082 422.247 43.6682 cv
422.371 43.8282 422.435 44.0562 422.435 44.3482 cv
422.435 45.6682 li
422.075 45.6682 li
422.075 44.3602 li
422.075 44.1522 422.035 43.9962 421.963 43.8922 cv
421.887 43.7922 421.775 43.7402 421.623 43.7402 cv
421.435 43.7402 421.287 43.8042 421.179 43.9282 cv
421.071 44.0522 421.019 44.2201 421.019 44.4322 cv
421.019 45.6682 li
420.659 45.6682 li
420.659 44.3602 li
420.659 44.1522 420.619 43.9962 420.547 43.8922 cv
420.471 43.7922 420.355 43.7402 420.203 43.7402 cv
420.019 43.7402 419.871 43.8042 419.763 43.9282 cv
419.655 44.0522 419.603 44.2201 419.603 44.4322 cv
419.603 45.6682 li
419.243 45.6682 li
419.243 43.4802 li
419.603 43.4802 li
419.603 43.8202 li
419.683 43.6882 419.783 43.5882 419.899 43.5242 cv
420.011 43.4602 420.147 43.4282 420.307 43.4282 cv
420.467 43.4282 420.599 43.4682 420.711 43.5482 cv
420.823 43.6282 420.903 43.7482 420.959 43.9002 cv
f
425.531 42.6282 mo
425.531 42.9282 li
425.187 42.9282 li
425.059 42.9282 424.967 42.9562 424.919 43.0082 cv
424.867 43.0602 424.843 43.1522 424.843 43.2882 cv
424.843 43.4802 li
425.435 43.4802 li
425.435 43.7602 li
424.843 43.7602 li
424.843 45.6682 li
424.483 45.6682 li
424.483 43.7602 li
424.139 43.7602 li
424.139 43.4802 li
424.483 43.4802 li
424.483 43.3282 li
424.483 43.0882 424.539 42.9081 424.651 42.7962 cv
424.763 42.6842 424.943 42.6282 425.191 42.6282 cv
425.531 42.6282 li
f
426.679 43.7322 mo
426.487 43.7322 426.335 43.8082 426.223 43.9602 cv
426.111 44.1122 426.055 44.3162 426.055 44.5762 cv
426.055 44.8402 426.107 45.0442 426.219 45.1962 cv
426.331 45.3482 426.483 45.4202 426.679 45.4202 cv
426.871 45.4202 427.023 45.3482 427.135 45.1962 cv
427.247 45.0442 427.303 44.8402 427.303 44.5762 cv
427.303 44.3202 427.247 44.1122 427.135 43.9602 cv
427.023 43.8082 426.871 43.7322 426.679 43.7322 cv
426.679 43.4282 mo
426.991 43.4282 427.235 43.5322 427.415 43.7322 cv
427.591 43.9362 427.683 44.2162 427.683 44.5762 cv
427.683 44.9362 427.591 45.2162 427.415 45.4162 cv
427.235 45.6202 426.991 45.7201 426.679 45.7201 cv
426.363 45.7201 426.115 45.6202 425.939 45.4162 cv
425.763 45.2162 425.675 44.9362 425.675 44.5762 cv
425.675 44.2162 425.763 43.9362 425.939 43.7322 cv
426.115 43.5322 426.363 43.4282 426.679 43.4282 cv
f
429.547 43.8162 mo
429.415 43.7642 li
429.259 43.7482 li
429.055 43.7482 428.899 43.8162 428.791 43.9482 cv
428.679 44.0802 428.627 44.2682 428.627 44.5162 cv
428.627 45.6682 li
428.267 45.6682 li
428.267 43.4802 li
428.627 43.4802 li
428.627 43.8202 li
428.699 43.6882 428.799 43.5882 428.919 43.5242 cv
429.039 43.4602 429.187 43.4282 429.363 43.4282 cv
429.447 43.4322 li
429.547 43.4482 li
429.547 43.8162 li
f
431.795 44.4842 mo
431.795 44.6602 li
430.143 44.6602 li
430.159 44.9082 430.231 45.1002 430.367 45.2282 cv
430.499 45.3562 430.683 45.4202 430.923 45.4202 cv
431.059 45.4202 431.195 45.4042 431.323 45.3722 cv
431.451 45.3402 431.583 45.2882 431.711 45.2162 cv
431.711 45.5562 li
431.583 45.6122 431.451 45.6562 431.315 45.6802 cv
431.179 45.7042 431.039 45.7201 430.903 45.7201 cv
430.551 45.7201 430.275 45.6202 430.071 45.4202 cv
429.867 45.2201 429.767 44.9442 429.767 44.5962 cv
429.767 44.2402 429.863 43.9562 430.055 43.7442 cv
430.247 43.5362 430.511 43.4282 430.839 43.4282 cv
431.135 43.4282 431.367 43.5242 431.539 43.7122 cv
431.707 43.9042 431.795 44.1602 431.795 44.4842 cv
431.435 44.3801 mo
431.431 44.1842 431.375 44.0282 431.271 43.9082 cv
431.163 43.7922 431.019 43.7322 430.843 43.7322 cv
430.643 43.7322 430.483 43.7922 430.363 43.9042 cv
430.243 44.0162 430.171 44.1762 430.155 44.3801 cv
431.435 44.3801 li
f
433.779 43.5442 mo
433.779 43.8842 li
433.675 43.8362 433.571 43.7962 433.463 43.7682 cv
433.351 43.7442 433.239 43.7282 433.123 43.7282 cv
432.943 43.7282 432.807 43.7562 432.719 43.8122 cv
432.631 43.8682 432.587 43.9482 432.587 44.0562 cv
432.683 44.2522 li
432.747 44.3002 432.875 44.3482 433.067 44.3882 cv
433.191 44.4162 li
433.447 44.4722 433.627 44.5522 433.735 44.6482 cv
433.839 44.7482 433.895 44.8882 433.895 45.0642 cv
433.895 45.2682 433.815 45.4282 433.655 45.5442 cv
433.495 45.6642 433.271 45.7201 432.991 45.7201 cv
432.871 45.7201 432.751 45.7082 432.623 45.6882 cv
432.495 45.6682 432.363 45.6362 432.223 45.5882 cv
432.223 45.2162 li
432.355 45.2882 432.487 45.3402 432.615 45.3722 cv
432.743 45.4082 432.871 45.4242 432.999 45.4242 cv
433.167 45.4242 433.299 45.3962 433.391 45.3402 cv
433.479 45.2842 433.527 45.2002 433.527 45.0922 cv
433.527 44.9962 433.491 44.9202 433.427 44.8682 cv
433.363 44.8162 433.219 44.7642 432.995 44.7162 cv
432.871 44.6882 li
432.647 44.6402 432.483 44.5682 432.387 44.4722 cv
432.287 44.3762 432.239 44.2442 432.239 44.0722 cv
432.239 43.8682 432.311 43.7082 432.455 43.5962 cv
432.599 43.4842 432.807 43.4282 433.079 43.4282 cv
433.211 43.4282 433.335 43.4402 433.455 43.4602 cv
433.571 43.4802 433.679 43.5082 433.779 43.5442 cv
f
434.823 42.8602 mo
434.823 43.4802 li
435.563 43.4802 li
435.563 43.7602 li
434.823 43.7602 li
434.823 44.9482 li
434.823 45.1282 434.847 45.2442 434.895 45.2922 cv
434.943 45.3442 435.043 45.3682 435.195 45.3682 cv
435.563 45.3682 li
435.563 45.6682 li
435.195 45.6682 li
434.915 45.6682 434.723 45.6162 434.619 45.5122 cv
434.515 45.4082 434.463 45.2201 434.463 44.9482 cv
434.463 43.7602 li
434.199 43.7602 li
434.199 43.4802 li
434.463 43.4802 li
434.463 42.8602 li
434.823 42.8602 li
f
2 lc
1 lj
374.051 50.1432 mo
382.051 50.1432 li
.749203 .420264 .103029 .000457771 cmyk
@
376.551 51.6432 mo
379.551 51.6432 li
379.551 48.6432 li
376.551 48.6432 li
cp
f
0 lc
0 lj
376.551 51.6432 mo
379.551 51.6432 li
379.551 48.6432 li
376.551 48.6432 li
cp
@
387.027 50.1752 mo
387.111 50.2072 387.195 50.2672 387.275 50.3592 cv
387.355 50.4552 387.435 50.5832 387.515 50.7472 cv
387.915 51.5432 li
387.491 51.5432 li
387.119 50.7952 li
387.023 50.6032 386.927 50.4712 386.839 50.4072 cv
386.747 50.3432 386.623 50.3112 386.467 50.3112 cv
386.039 50.3112 li
386.039 51.5432 li
385.643 51.5432 li
385.643 48.6272 li
386.535 48.6272 li
386.867 48.6272 387.115 48.6992 387.279 48.8352 cv
387.443 48.9752 387.527 49.1872 387.527 49.4672 cv
387.527 49.6512 387.483 49.8072 387.399 49.9272 cv
387.311 50.0472 387.187 50.1312 387.027 50.1752 cv
386.039 48.9512 mo
386.039 49.9872 li
386.535 49.9872 li
386.723 49.9872 386.867 49.9432 386.963 49.8552 cv
387.059 49.7672 387.111 49.6392 387.111 49.4672 cv
387.111 49.2992 387.059 49.1712 386.963 49.0832 cv
386.867 48.9952 386.723 48.9512 386.535 48.9512 cv
386.039 48.9512 li
1 /0 /CSD get_res sepcs
1 sep
f
389.403 50.4432 mo
389.111 50.4432 388.911 50.4792 388.799 50.5432 cv
388.687 50.6112 388.631 50.7232 388.631 50.8832 cv
388.631 51.0112 388.671 51.1152 388.755 51.1872 cv
388.839 51.2632 388.955 51.2992 389.099 51.2992 cv
389.299 51.2992 389.459 51.2312 389.579 51.0872 cv
389.699 50.9472 389.759 50.7592 389.759 50.5232 cv
389.759 50.4432 li
389.403 50.4432 li
390.119 50.2952 mo
390.119 51.5432 li
389.759 51.5432 li
389.759 51.2112 li
389.675 51.3472 389.571 51.4432 389.451 51.5032 cv
389.331 51.5632 389.179 51.5951 389.003 51.5951 cv
388.779 51.5951 388.599 51.5352 388.467 51.4112 cv
388.335 51.2872 388.271 51.1192 388.271 50.9072 cv
388.271 50.6632 388.351 50.4792 388.519 50.3512 cv
388.683 50.2271 388.927 50.1632 389.255 50.1632 cv
389.759 50.1632 li
389.759 50.1272 li
389.759 49.9632 389.703 49.8352 389.595 49.7432 cv
389.487 49.6552 389.335 49.6072 389.139 49.6072 cv
389.011 49.6072 388.891 49.6232 388.771 49.6552 cv
388.651 49.6872 388.539 49.7312 388.431 49.7872 cv
388.431 49.4552 li
388.559 49.4072 388.687 49.3672 388.811 49.3432 cv
388.935 49.3192 389.055 49.3032 389.175 49.3032 cv
389.491 49.3032 389.727 49.3872 389.883 49.5512 cv
390.039 49.7152 390.119 49.9632 390.119 50.2952 cv
f
392.68 50.2232 mo
392.68 51.5432 li
392.319 51.5432 li
392.319 50.2352 li
392.319 50.0272 392.275 49.8752 392.195 49.7712 cv
392.115 49.6672 391.995 49.6152 391.835 49.6152 cv
391.639 49.6152 391.487 49.6792 391.375 49.8032 cv
391.263 49.9272 391.207 50.0951 391.207 50.3072 cv
391.207 51.5432 li
390.848 51.5432 li
390.848 49.3552 li
391.207 49.3552 li
391.207 49.6952 li
391.292 49.5672 391.391 49.4672 391.512 49.4032 cv
391.628 49.3392 391.763 49.3032 391.915 49.3032 cv
392.163 49.3032 392.355 49.3832 392.483 49.5392 cv
392.611 49.6952 392.68 49.9232 392.68 50.2232 cv
f
394.836 49.6872 mo
394.836 48.5032 li
395.195 48.5032 li
395.195 51.5432 li
394.836 51.5432 li
394.836 51.2152 li
394.759 51.3472 394.664 51.4432 394.548 51.5032 cv
394.431 51.5632 394.296 51.5951 394.135 51.5951 cv
393.871 51.5951 393.655 51.4912 393.487 51.2832 cv
393.319 51.0752 393.24 50.7952 393.24 50.4512 cv
393.24 50.1072 393.319 49.8312 393.487 49.6192 cv
393.655 49.4112 393.871 49.3032 394.135 49.3032 cv
394.296 49.3032 394.431 49.3352 394.548 49.3992 cv
394.664 49.4632 394.759 49.5592 394.836 49.6872 cv
393.612 50.4512 mo
393.612 50.7152 393.664 50.9232 393.772 51.0752 cv
393.879 51.2271 394.031 51.2992 394.224 51.2992 cv
394.411 51.2992 394.56 51.2271 394.672 51.0752 cv
394.78 50.9232 394.836 50.7152 394.836 50.4512 cv
394.836 50.1872 394.78 49.9832 394.672 49.8312 cv
394.56 49.6792 394.411 49.6032 394.224 49.6032 cv
394.031 49.6032 393.879 49.6792 393.772 49.8312 cv
393.664 49.9832 393.612 50.1872 393.612 50.4512 cv
f
396.783 49.6072 mo
396.591 49.6072 396.439 49.6832 396.327 49.8352 cv
396.215 49.9872 396.159 50.1912 396.159 50.4512 cv
396.159 50.7152 396.211 50.9192 396.323 51.0712 cv
396.435 51.2232 396.587 51.2952 396.783 51.2952 cv
396.975 51.2952 397.127 51.2232 397.239 51.0712 cv
397.351 50.9192 397.407 50.7152 397.407 50.4512 cv
397.407 50.1952 397.351 49.9872 397.239 49.8352 cv
397.127 49.6832 396.975 49.6072 396.783 49.6072 cv
396.783 49.3032 mo
397.095 49.3032 397.339 49.4072 397.519 49.6072 cv
397.695 49.8112 397.787 50.0912 397.787 50.4512 cv
397.787 50.8112 397.695 51.0912 397.519 51.2912 cv
397.339 51.4952 397.095 51.5951 396.783 51.5951 cv
396.467 51.5951 396.219 51.4952 396.043 51.2912 cv
395.867 51.0912 395.779 50.8112 395.779 50.4512 cv
395.779 50.0912 395.867 49.8112 396.043 49.6072 cv
396.219 49.4072 396.467 49.3032 396.783 49.3032 cv
f
400.087 49.7752 mo
400.175 49.6152 400.283 49.4992 400.407 49.4192 cv
400.531 49.3432 400.679 49.3032 400.851 49.3032 cv
401.075 49.3032 401.251 49.3832 401.375 49.5432 cv
401.499 49.7032 401.563 49.9312 401.563 50.2232 cv
401.563 51.5432 li
401.203 51.5432 li
401.203 50.2352 li
401.203 50.0272 401.163 49.8712 401.091 49.7672 cv
401.015 49.6672 400.903 49.6152 400.751 49.6152 cv
400.563 49.6152 400.415 49.6792 400.307 49.8032 cv
400.199 49.9272 400.147 50.0951 400.147 50.3072 cv
400.147 51.5432 li
399.787 51.5432 li
399.787 50.2352 li
399.787 50.0272 399.747 49.8712 399.675 49.7672 cv
399.599 49.6672 399.483 49.6152 399.331 49.6152 cv
399.147 49.6152 398.999 49.6792 398.891 49.8032 cv
398.783 49.9272 398.731 50.0951 398.731 50.3072 cv
398.731 51.5432 li
398.371 51.5432 li
398.371 49.3552 li
398.731 49.3552 li
398.731 49.6952 li
398.811 49.5632 398.911 49.4632 399.027 49.3992 cv
399.139 49.3352 399.275 49.3032 399.435 49.3032 cv
399.595 49.3032 399.727 49.3432 399.839 49.4232 cv
399.951 49.5032 400.031 49.6232 400.087 49.7752 cv
f
403.567 48.6272 mo
405.243 48.6272 li
405.243 48.9592 li
403.963 48.9592 li
403.963 49.8192 li
405.119 49.8192 li
405.119 50.1512 li
403.963 50.1512 li
403.963 51.5432 li
403.567 51.5432 li
403.567 48.6272 li
f
406.699 49.6072 mo
406.507 49.6072 406.355 49.6832 406.243 49.8352 cv
406.131 49.9872 406.075 50.1912 406.075 50.4512 cv
406.075 50.7152 406.127 50.9192 406.239 51.0712 cv
406.351 51.2232 406.503 51.2952 406.699 51.2952 cv
406.891 51.2952 407.043 51.2232 407.155 51.0712 cv
407.267 50.9192 407.323 50.7152 407.323 50.4512 cv
407.323 50.1952 407.267 49.9872 407.155 49.8352 cv
407.043 49.6832 406.891 49.6072 406.699 49.6072 cv
406.699 49.3032 mo
407.011 49.3032 407.255 49.4072 407.435 49.6072 cv
407.611 49.8112 407.703 50.0912 407.703 50.4512 cv
407.703 50.8112 407.611 51.0912 407.435 51.2912 cv
407.255 51.4952 407.011 51.5951 406.699 51.5951 cv
406.383 51.5951 406.135 51.4952 405.959 51.2912 cv
405.783 51.0912 405.695 50.8112 405.695 50.4512 cv
405.695 50.0912 405.783 49.8112 405.959 49.6072 cv
406.135 49.4072 406.383 49.3032 406.699 49.3032 cv
f
409.567 49.6912 mo
409.435 49.6392 li
409.279 49.6232 li
409.075 49.6232 408.919 49.6912 408.811 49.8232 cv
408.699 49.9552 408.647 50.1432 408.647 50.3912 cv
408.647 51.5432 li
408.287 51.5432 li
408.287 49.3552 li
408.647 49.3552 li
408.647 49.6952 li
408.719 49.5632 408.819 49.4632 408.939 49.3992 cv
409.059 49.3352 409.207 49.3032 409.383 49.3032 cv
409.467 49.3072 li
409.567 49.3232 li
409.567 49.6912 li
f
411.815 50.3592 mo
411.815 50.5352 li
410.163 50.5352 li
410.179 50.7832 410.251 50.9752 410.387 51.1032 cv
410.519 51.2312 410.703 51.2952 410.943 51.2952 cv
411.079 51.2952 411.215 51.2792 411.343 51.2472 cv
411.471 51.2152 411.603 51.1632 411.731 51.0912 cv
411.731 51.4312 li
411.603 51.4872 411.471 51.5312 411.335 51.5552 cv
411.199 51.5792 411.059 51.5951 410.923 51.5951 cv
410.571 51.5951 410.295 51.4952 410.091 51.2952 cv
409.887 51.0951 409.787 50.8192 409.787 50.4712 cv
409.787 50.1152 409.883 49.8312 410.075 49.6192 cv
410.267 49.4112 410.531 49.3032 410.859 49.3032 cv
411.155 49.3032 411.387 49.3992 411.559 49.5872 cv
411.727 49.7792 411.815 50.0352 411.815 50.3592 cv
411.455 50.2551 mo
411.451 50.0592 411.395 49.9032 411.291 49.7832 cv
411.183 49.6672 411.039 49.6072 410.863 49.6072 cv
410.663 49.6072 410.503 49.6672 410.383 49.7792 cv
410.263 49.8912 410.191 50.0512 410.175 50.2551 cv
411.455 50.2551 li
f
413.799 49.4192 mo
413.799 49.7592 li
413.695 49.7112 413.591 49.6712 413.483 49.6432 cv
413.371 49.6192 413.259 49.6032 413.143 49.6032 cv
412.963 49.6032 412.827 49.6312 412.739 49.6872 cv
412.651 49.7432 412.607 49.8232 412.607 49.9312 cv
412.703 50.1272 li
412.767 50.1752 412.895 50.2232 413.087 50.2632 cv
413.211 50.2912 li
413.467 50.3472 413.647 50.4272 413.755 50.5232 cv
413.859 50.6232 413.915 50.7632 413.915 50.9392 cv
413.915 51.1432 413.835 51.3032 413.675 51.4192 cv
413.515 51.5392 413.291 51.5951 413.011 51.5951 cv
412.891 51.5951 412.771 51.5832 412.643 51.5632 cv
412.515 51.5432 412.383 51.5112 412.243 51.4632 cv
412.243 51.0912 li
412.375 51.1632 412.507 51.2152 412.635 51.2472 cv
412.763 51.2832 412.891 51.2992 413.019 51.2992 cv
413.187 51.2992 413.319 51.2712 413.411 51.2152 cv
413.499 51.1592 413.547 51.0752 413.547 50.9672 cv
413.547 50.8712 413.511 50.7952 413.447 50.7432 cv
413.383 50.6912 413.239 50.6392 413.015 50.5912 cv
412.891 50.5632 li
412.667 50.5152 412.503 50.4432 412.407 50.3472 cv
412.307 50.2512 412.259 50.1192 412.259 49.9472 cv
412.259 49.7432 412.331 49.5832 412.475 49.4712 cv
412.619 49.3592 412.827 49.3032 413.099 49.3032 cv
413.231 49.3032 413.355 49.3152 413.475 49.3352 cv
413.591 49.3552 413.699 49.3832 413.799 49.4192 cv
f
414.843 48.7352 mo
414.843 49.3552 li
415.583 49.3552 li
415.583 49.6352 li
414.843 49.6352 li
414.843 50.8232 li
414.843 51.0032 414.867 51.1192 414.915 51.1672 cv
414.963 51.2192 415.063 51.2432 415.215 51.2432 cv
415.583 51.2432 li
415.583 51.5432 li
415.215 51.5432 li
414.935 51.5432 414.743 51.4912 414.639 51.3872 cv
414.535 51.2832 414.483 51.0951 414.483 50.8232 cv
414.483 49.6352 li
414.219 49.6352 li
414.219 49.3552 li
414.483 49.3552 li
414.483 48.7352 li
414.843 48.7352 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
